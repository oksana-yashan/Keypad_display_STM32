
03_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800238c  0800238c  0001238c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002448  08002448  00012448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800244c  0800244c  0001244c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000084  20000000  08002450  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020084  2**0
                  CONTENTS
  7 .bss          00000290  20000084  20000084  00020084  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000314  20000314  00020084  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009e79  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001d6c  00000000  00000000  00029f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000778  00000000  00000000  0002bca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000680  00000000  00000000  0002c418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004107  00000000  00000000  0002ca98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000099d1  00000000  00000000  00030b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000614ac  00000000  00000000  0003a570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0009ba1c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000020b0  00000000  00000000  0009ba70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stabstr      0000003f  00000000  00000000  0009db20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002374 	.word	0x08002374

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08002374 	.word	0x08002374

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800029a:	d102      	bne.n	80002a2 <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e015      	b.n	80002ce <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80002aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80002ae:	d102      	bne.n	80002b6 <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	73fb      	strb	r3, [r7, #15]
 80002b4:	e00b      	b.n	80002ce <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002c2:	d102      	bne.n	80002ca <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 80002c4:	2302      	movs	r3, #2
 80002c6:	73fb      	strb	r3, [r7, #15]
 80002c8:	e001      	b.n	80002ce <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 80002ca:	2304      	movs	r3, #4
 80002cc:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	2b04      	cmp	r3, #4
 80002d2:	f000 809f 	beq.w	8000414 <CAN_Transmit+0x194>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	3318      	adds	r3, #24
 80002dc:	011b      	lsls	r3, r3, #4
 80002de:	4413      	add	r3, r2
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	f002 0201 	and.w	r2, r2, #1
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	3318      	adds	r3, #24
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	440b      	add	r3, r1
 80002f0:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	7a1b      	ldrb	r3, [r3, #8]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d113      	bne.n	8000322 <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	3318      	adds	r3, #24
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	4413      	add	r3, r2
 8000304:	6819      	ldr	r1, [r3, #0]
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
 800030c:	683a      	ldr	r2, [r7, #0]
 800030e:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000310:	431a      	orrs	r2, r3
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	430a      	orrs	r2, r1
 8000316:	6879      	ldr	r1, [r7, #4]
 8000318:	3318      	adds	r3, #24
 800031a:	011b      	lsls	r3, r3, #4
 800031c:	440b      	add	r3, r1
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	e015      	b.n	800034e <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	3318      	adds	r3, #24
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	4413      	add	r3, r2
 800032c:	6819      	ldr	r1, [r3, #0]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
 8000334:	683a      	ldr	r2, [r7, #0]
 8000336:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000338:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
 800033a:	683a      	ldr	r2, [r7, #0]
 800033c:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
 800033e:	431a      	orrs	r2, r3
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	430a      	orrs	r2, r1
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	3318      	adds	r3, #24
 8000348:	011b      	lsls	r3, r3, #4
 800034a:	440b      	add	r3, r1
 800034c:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	7a9b      	ldrb	r3, [r3, #10]
 8000352:	f003 030f 	and.w	r3, r3, #15
 8000356:	b2da      	uxtb	r2, r3
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	3318      	adds	r3, #24
 8000362:	011b      	lsls	r3, r3, #4
 8000364:	4413      	add	r3, r2
 8000366:	3304      	adds	r3, #4
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	f022 020f 	bic.w	r2, r2, #15
 8000370:	6879      	ldr	r1, [r7, #4]
 8000372:	3318      	adds	r3, #24
 8000374:	011b      	lsls	r3, r3, #4
 8000376:	440b      	add	r3, r1
 8000378:	3304      	adds	r3, #4
 800037a:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	3318      	adds	r3, #24
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	4413      	add	r3, r2
 8000386:	3304      	adds	r3, #4
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	7a9b      	ldrb	r3, [r3, #10]
 800038e:	4619      	mov	r1, r3
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	430a      	orrs	r2, r1
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	3318      	adds	r3, #24
 8000398:	011b      	lsls	r3, r3, #4
 800039a:	440b      	add	r3, r1
 800039c:	3304      	adds	r3, #4
 800039e:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	7b9b      	ldrb	r3, [r3, #14]
 80003a4:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	7b5b      	ldrb	r3, [r3, #13]
 80003aa:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80003ac:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	7b1b      	ldrb	r3, [r3, #12]
 80003b2:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80003b4:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[0]));
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	7adb      	ldrb	r3, [r3, #11]
 80003ba:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80003be:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	011b      	lsls	r3, r3, #4
 80003c4:	440b      	add	r3, r1
 80003c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80003ca:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	7c9b      	ldrb	r3, [r3, #18]
 80003d0:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	7c5b      	ldrb	r3, [r3, #17]
 80003d6:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80003d8:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	7c1b      	ldrb	r3, [r3, #16]
 80003de:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80003e0:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[4]));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	7bdb      	ldrb	r3, [r3, #15]
 80003e6:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80003ea:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	011b      	lsls	r3, r3, #4
 80003f0:	440b      	add	r3, r1
 80003f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80003f6:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	3318      	adds	r3, #24
 80003fe:	011b      	lsls	r3, r3, #4
 8000400:	4413      	add	r3, r2
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	f042 0201 	orr.w	r2, r2, #1
 800040a:	6879      	ldr	r1, [r7, #4]
 800040c:	3318      	adds	r3, #24
 800040e:	011b      	lsls	r3, r3, #4
 8000410:	440b      	add	r3, r1
 8000412:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8000414:	7bfb      	ldrb	r3, [r7, #15]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000422:	b480      	push	{r7}
 8000424:	b085      	sub	sp, #20
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	460b      	mov	r3, r1
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000430:	7afb      	ldrb	r3, [r7, #11]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	331b      	adds	r3, #27
 8000436:	011b      	lsls	r3, r3, #4
 8000438:	4413      	add	r3, r2
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	f003 0304 	and.w	r3, r3, #4
 8000442:	b2da      	uxtb	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	7a1b      	ldrb	r3, [r3, #8]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d10b      	bne.n	8000468 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000450:	7afb      	ldrb	r3, [r7, #11]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	331b      	adds	r3, #27
 8000456:	011b      	lsls	r3, r3, #4
 8000458:	4413      	add	r3, r2
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	0d5b      	lsrs	r3, r3, #21
 800045e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	e00a      	b.n	800047e <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	331b      	adds	r3, #27
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	4413      	add	r3, r2
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	08db      	lsrs	r3, r3, #3
 8000476:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	331b      	adds	r3, #27
 8000484:	011b      	lsls	r3, r3, #4
 8000486:	4413      	add	r3, r2
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	f003 0302 	and.w	r3, r3, #2
 8000490:	b2da      	uxtb	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000496:	7afb      	ldrb	r3, [r7, #11]
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	331b      	adds	r3, #27
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	4413      	add	r3, r2
 80004a0:	3304      	adds	r3, #4
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	f003 030f 	and.w	r3, r3, #15
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80004b0:	7afb      	ldrb	r3, [r7, #11]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	331b      	adds	r3, #27
 80004b6:	011b      	lsls	r3, r3, #4
 80004b8:	4413      	add	r3, r2
 80004ba:	3304      	adds	r3, #4
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	0a1b      	lsrs	r3, r3, #8
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 80004c6:	7afb      	ldrb	r3, [r7, #11]
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	4413      	add	r3, r2
 80004ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80004da:	7afb      	ldrb	r3, [r7, #11]
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	4413      	add	r3, r2
 80004e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	0a1b      	lsrs	r3, r3, #8
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80004f0:	7afb      	ldrb	r3, [r7, #11]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4413      	add	r3, r2
 80004f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	0c1b      	lsrs	r3, r3, #16
 8000500:	b2da      	uxtb	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000506:	7afb      	ldrb	r3, [r7, #11]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	4413      	add	r3, r2
 800050e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	0e1b      	lsrs	r3, r3, #24
 8000516:	b2da      	uxtb	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 800051c:	7afb      	ldrb	r3, [r7, #11]
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	011b      	lsls	r3, r3, #4
 8000522:	4413      	add	r3, r2
 8000524:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000530:	7afb      	ldrb	r3, [r7, #11]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	4413      	add	r3, r2
 8000538:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	b2da      	uxtb	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4413      	add	r3, r2
 800054e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	0c1b      	lsrs	r3, r3, #16
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 800055c:	7afb      	ldrb	r3, [r7, #11]
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4413      	add	r3, r2
 8000564:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	0e1b      	lsrs	r3, r3, #24
 800056c:	b2da      	uxtb	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000572:	7afb      	ldrb	r3, [r7, #11]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d106      	bne.n	8000586 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f043 0220 	orr.w	r2, r3, #32
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8000584:	e005      	b.n	8000592 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	691b      	ldr	r3, [r3, #16]
 800058a:	f043 0220 	orr.w	r2, r3, #32
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	611a      	str	r2, [r3, #16]
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	4013      	ands	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f000 811b 	beq.w	80007f2 <CAN_GetITStatus+0x252>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80005c2:	f000 80dd 	beq.w	8000780 <CAN_GetITStatus+0x1e0>
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80005cc:	f200 810e 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005d6:	f000 80ca 	beq.w	800076e <CAN_GetITStatus+0x1ce>
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005e0:	f200 8104 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005ea:	f000 80f6 	beq.w	80007da <CAN_GetITStatus+0x23a>
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005f4:	f200 80fa 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005fe:	f000 80e3 	beq.w	80007c8 <CAN_GetITStatus+0x228>
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000608:	f200 80f0 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000612:	f000 80d0 	beq.w	80007b6 <CAN_GetITStatus+0x216>
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061c:	f200 80e6 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000626:	f000 80bd 	beq.w	80007a4 <CAN_GetITStatus+0x204>
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000630:	f200 80dc 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800063a:	f000 80aa 	beq.w	8000792 <CAN_GetITStatus+0x1f2>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000644:	f200 80d2 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	2b20      	cmp	r3, #32
 800064c:	d84c      	bhi.n	80006e8 <CAN_GetITStatus+0x148>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	f000 80cb 	beq.w	80007ec <CAN_GetITStatus+0x24c>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	2b1f      	cmp	r3, #31
 800065c:	f200 80c6 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <CAN_GetITStatus+0xc8>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	080006f1 	.word	0x080006f1
 800066c:	08000703 	.word	0x08000703
 8000670:	080007ed 	.word	0x080007ed
 8000674:	08000715 	.word	0x08000715
 8000678:	080007ed 	.word	0x080007ed
 800067c:	080007ed 	.word	0x080007ed
 8000680:	080007ed 	.word	0x080007ed
 8000684:	08000727 	.word	0x08000727
 8000688:	080007ed 	.word	0x080007ed
 800068c:	080007ed 	.word	0x080007ed
 8000690:	080007ed 	.word	0x080007ed
 8000694:	080007ed 	.word	0x080007ed
 8000698:	080007ed 	.word	0x080007ed
 800069c:	080007ed 	.word	0x080007ed
 80006a0:	080007ed 	.word	0x080007ed
 80006a4:	08000739 	.word	0x08000739
 80006a8:	080007ed 	.word	0x080007ed
 80006ac:	080007ed 	.word	0x080007ed
 80006b0:	080007ed 	.word	0x080007ed
 80006b4:	080007ed 	.word	0x080007ed
 80006b8:	080007ed 	.word	0x080007ed
 80006bc:	080007ed 	.word	0x080007ed
 80006c0:	080007ed 	.word	0x080007ed
 80006c4:	080007ed 	.word	0x080007ed
 80006c8:	080007ed 	.word	0x080007ed
 80006cc:	080007ed 	.word	0x080007ed
 80006d0:	080007ed 	.word	0x080007ed
 80006d4:	080007ed 	.word	0x080007ed
 80006d8:	080007ed 	.word	0x080007ed
 80006dc:	080007ed 	.word	0x080007ed
 80006e0:	080007ed 	.word	0x080007ed
 80006e4:	0800074b 	.word	0x0800074b
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b40      	cmp	r3, #64	; 0x40
 80006ec:	d036      	beq.n	800075c <CAN_GetITStatus+0x1bc>
 80006ee:	e07d      	b.n	80007ec <CAN_GetITStatus+0x24c>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	4942      	ldr	r1, [pc, #264]	; (8000800 <CAN_GetITStatus+0x260>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f884 	bl	8000804 <CheckITStatus>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]
        break;
 8000700:	e079      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	2103      	movs	r1, #3
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f87b 	bl	8000804 <CheckITStatus>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
        break;
 8000712:	e070      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	2108      	movs	r1, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f872 	bl	8000804 <CheckITStatus>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
        break;
 8000724:	e067      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	2110      	movs	r1, #16
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f869 	bl	8000804 <CheckITStatus>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
        break;
 8000736:	e05e      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f860 	bl	8000804 <CheckITStatus>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
        break;
 8000748:	e055      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	2108      	movs	r1, #8
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f857 	bl	8000804 <CheckITStatus>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
        break;
 800075a:	e04c      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	2110      	movs	r1, #16
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f84e 	bl	8000804 <CheckITStatus>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
        break;
 800076c:	e043      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	2108      	movs	r1, #8
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f845 	bl	8000804 <CheckITStatus>
 800077a:	4603      	mov	r3, r0
 800077c:	73fb      	strb	r3, [r7, #15]
        break;
 800077e:	e03a      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	2110      	movs	r1, #16
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f83c 	bl	8000804 <CheckITStatus>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]
        break;
 8000790:	e031      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f833 	bl	8000804 <CheckITStatus>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]
        break;
 80007a2:	e028      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	2102      	movs	r1, #2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f82a 	bl	8000804 <CheckITStatus>
 80007b0:	4603      	mov	r3, r0
 80007b2:	73fb      	strb	r3, [r7, #15]
        break;
 80007b4:	e01f      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	2104      	movs	r1, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f821 	bl	8000804 <CheckITStatus>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
        break;
 80007c6:	e016      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	2170      	movs	r1, #112	; 0x70
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f818 	bl	8000804 <CheckITStatus>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
        break;
 80007d8:	e00d      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2104      	movs	r1, #4
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f80f 	bl	8000804 <CheckITStatus>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
        break;
 80007ea:	e004      	b.n	80007f6 <CAN_GetITStatus+0x256>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
        break;
 80007f0:	e001      	b.n	80007f6 <CAN_GetITStatus+0x256>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	00010101 	.word	0x00010101

08000804 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	4013      	ands	r3, r2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e001      	b.n	8000826 <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <EXTI_GetITStatus+0x44>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4013      	ands	r3, r2
 800084c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <EXTI_GetITStatus+0x44>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4013      	ands	r3, r2
 8000856:	2b00      	cmp	r3, #0
 8000858:	d005      	beq.n	8000866 <EXTI_GetITStatus+0x32>
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e001      	b.n	800086a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	40013c00 	.word	0x40013c00

0800087c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <EXTI_ClearITPendingBit+0x1c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6153      	str	r3, [r2, #20]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40013c00 	.word	0x40013c00

0800089c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800089c:	b480      	push	{r7}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e076      	b.n	80009a6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80008b8:	2201      	movs	r2, #1
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d165      	bne.n	80009a0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2103      	movs	r1, #3
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	401a      	ands	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	4619      	mov	r1, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	791b      	ldrb	r3, [r3, #4]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d003      	beq.n	8000912 <GPIO_Init+0x76>
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d12e      	bne.n	8000970 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2103      	movs	r1, #3
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	401a      	ands	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	4619      	mov	r1, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	b29b      	uxth	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	2301      	movs	r3, #1
 800094c:	408b      	lsls	r3, r1
 800094e:	43db      	mvns	r3, r3
 8000950:	401a      	ands	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	7992      	ldrb	r2, [r2, #6]
 800095e:	4611      	mov	r1, r2
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	b292      	uxth	r2, r2
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	b292      	uxth	r2, r2
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	b29b      	uxth	r3, r3
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2103      	movs	r1, #3
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	401a      	ands	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	79db      	ldrb	r3, [r3, #7]
 8000990:	4619      	mov	r1, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d985      	bls.n	80008b8 <GPIO_Init+0x1c>
    }
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	887a      	ldrh	r2, [r7, #2]
 80009ca:	831a      	strh	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	887a      	ldrh	r2, [r7, #2]
 80009e8:	835a      	strh	r2, [r3, #26]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	405a      	eors	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	615a      	str	r2, [r3, #20]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b089      	sub	sp, #36	; 0x24
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61fb      	str	r3, [r7, #28]
 8000a30:	2302      	movs	r3, #2
 8000a32:	613b      	str	r3, [r7, #16]
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000a3e:	689b      	ldr	r3, [r3, #8]
 8000a40:	f003 030c 	and.w	r3, r3, #12
 8000a44:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000a46:	69bb      	ldr	r3, [r7, #24]
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d011      	beq.n	8000a70 <RCC_GetClocksFreq+0x54>
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	2b08      	cmp	r3, #8
 8000a50:	d844      	bhi.n	8000adc <RCC_GetClocksFreq+0xc0>
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d003      	beq.n	8000a60 <RCC_GetClocksFreq+0x44>
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	2b04      	cmp	r3, #4
 8000a5c:	d004      	beq.n	8000a68 <RCC_GetClocksFreq+0x4c>
 8000a5e:	e03d      	b.n	8000adc <RCC_GetClocksFreq+0xc0>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a42      	ldr	r2, [pc, #264]	; (8000b6c <RCC_GetClocksFreq+0x150>)
 8000a64:	601a      	str	r2, [r3, #0]
      break;
 8000a66:	e03d      	b.n	8000ae4 <RCC_GetClocksFreq+0xc8>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a41      	ldr	r2, [pc, #260]	; (8000b70 <RCC_GetClocksFreq+0x154>)
 8000a6c:	601a      	str	r2, [r3, #0]
      break;
 8000a6e:	e039      	b.n	8000ae4 <RCC_GetClocksFreq+0xc8>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000a70:	4b3d      	ldr	r3, [pc, #244]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	0d9b      	lsrs	r3, r3, #22
 8000a76:	f003 0301 	and.w	r3, r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a7c:	4b3a      	ldr	r3, [pc, #232]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000a84:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d00c      	beq.n	8000aa6 <RCC_GetClocksFreq+0x8a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000a8c:	4a38      	ldr	r2, [pc, #224]	; (8000b70 <RCC_GetClocksFreq+0x154>)
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a94:	4a34      	ldr	r2, [pc, #208]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000a96:	6852      	ldr	r2, [r2, #4]
 8000a98:	0992      	lsrs	r2, r2, #6
 8000a9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a9e:	fb02 f303 	mul.w	r3, r2, r3
 8000aa2:	61fb      	str	r3, [r7, #28]
 8000aa4:	e00b      	b.n	8000abe <RCC_GetClocksFreq+0xa2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000aa6:	4a31      	ldr	r2, [pc, #196]	; (8000b6c <RCC_GetClocksFreq+0x150>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aae:	4a2e      	ldr	r2, [pc, #184]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000ab0:	6852      	ldr	r2, [r2, #4]
 8000ab2:	0992      	lsrs	r2, r2, #6
 8000ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	0c1b      	lsrs	r3, r3, #16
 8000ac4:	f003 0303 	and.w	r3, r3, #3
 8000ac8:	3301      	adds	r3, #1
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	fbb2 f2f3 	udiv	r2, r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	601a      	str	r2, [r3, #0]
      break;
 8000ada:	e003      	b.n	8000ae4 <RCC_GetClocksFreq+0xc8>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a23      	ldr	r2, [pc, #140]	; (8000b6c <RCC_GetClocksFreq+0x150>)
 8000ae0:	601a      	str	r2, [r3, #0]
      break;
 8000ae2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000ae4:	4b20      	ldr	r3, [pc, #128]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000aec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	091b      	lsrs	r3, r3, #4
 8000af2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000af4:	4a1f      	ldr	r2, [pc, #124]	; (8000b74 <RCC_GetClocksFreq+0x158>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4413      	add	r3, r2
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	40da      	lsrs	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000b0e:	689b      	ldr	r3, [r3, #8]
 8000b10:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000b14:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	0a9b      	lsrs	r3, r3, #10
 8000b1a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b1c:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <RCC_GetClocksFreq+0x158>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4413      	add	r3, r2
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	40da      	lsrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <RCC_GetClocksFreq+0x14c>)
 8000b36:	689b      	ldr	r3, [r3, #8]
 8000b38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000b3c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	0b5b      	lsrs	r3, r3, #13
 8000b42:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <RCC_GetClocksFreq+0x158>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4413      	add	r3, r2
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685a      	ldr	r2, [r3, #4]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	40da      	lsrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	60da      	str	r2, [r3, #12]
}
 8000b5c:	bf00      	nop
 8000b5e:	3724      	adds	r7, #36	; 0x24
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	00f42400 	.word	0x00f42400
 8000b70:	007a1200 	.word	0x007a1200
 8000b74:	20000000 	.word	0x20000000

08000b78 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	460b      	mov	r3, r1
 8000b82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b84:	78fb      	ldrb	r3, [r7, #3]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d006      	beq.n	8000b98 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b8a:	4b0a      	ldr	r3, [pc, #40]	; (8000bb4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8e:	4909      	ldr	r1, [pc, #36]	; (8000bb4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4313      	orrs	r3, r2
 8000b94:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000b96:	e006      	b.n	8000ba6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	43db      	mvns	r3, r3
 8000ba0:	4904      	ldr	r1, [pc, #16]	; (8000bb4 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000bc4:	887b      	ldrh	r3, [r7, #2]
 8000bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	809a      	strh	r2, [r3, #4]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	889b      	ldrh	r3, [r3, #4]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bee:	b29b      	uxth	r3, r3
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b085      	sub	sp, #20
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	887b      	ldrh	r3, [r7, #2]
 8000c14:	4013      	ands	r3, r2
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d002      	beq.n	8000c22 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	73fb      	strb	r3, [r7, #15]
 8000c20:	e001      	b.n	8000c26 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <CAN_transmit_data>:
//	NVIC_Init(&NVIC_InitStructure);

}

void CAN_transmit_data(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
	CanTxMsg TxMessage;
	TxMessage.StdId = CAN_MASSEGE_ID_REQ;
 8000c3a:	23a1      	movs	r3, #161	; 0xa1
 8000c3c:	607b      	str	r3, [r7, #4]

	TxMessage.ExtId = 0x00;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	60bb      	str	r3, [r7, #8]

	TxMessage.IDE = CAN_Id_Standard;
 8000c42:	2300      	movs	r3, #0
 8000c44:	733b      	strb	r3, [r7, #12]
	TxMessage.RTR = CAN_RTR_DATA;
 8000c46:	2300      	movs	r3, #0
 8000c48:	737b      	strb	r3, [r7, #13]
	TxMessage.DLC = 3;
 8000c4a:	2303      	movs	r3, #3
 8000c4c:	73bb      	strb	r3, [r7, #14]

	TxMessage.Data[0] = 0x31;
 8000c4e:	2331      	movs	r3, #49	; 0x31
 8000c50:	73fb      	strb	r3, [r7, #15]
	TxMessage.Data[1] = 0x32;
 8000c52:	2332      	movs	r3, #50	; 0x32
 8000c54:	743b      	strb	r3, [r7, #16]
	TxMessage.Data[2] = 0x33;
 8000c56:	2333      	movs	r3, #51	; 0x33
 8000c58:	747b      	strb	r3, [r7, #17]

	CAN_Transmit(CAN1, &TxMessage);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4803      	ldr	r0, [pc, #12]	; (8000c6c <CAN_transmit_data+0x38>)
 8000c60:	f7ff fb0e 	bl	8000280 <CAN_Transmit>

}
 8000c64:	bf00      	nop
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40006400 	.word	0x40006400

08000c70 <Display_Init>:
#include "DISPLAY_WH1602B_4Bit.h"
//#include <stdio.h>

static char empty_field[] = "                                ";
void Display_Init()
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
	delay_milis(40);
 8000c74:	2028      	movs	r0, #40	; 0x28
 8000c76:	f000 fa91 	bl	800119c <delay_milis>
	Display_Write_Ins(0x03); 	//as per documentation set 4-bit mode
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 f830 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(40);
 8000c80:	2028      	movs	r0, #40	; 0x28
 8000c82:	f000 fa8b 	bl	800119c <delay_milis>

	Display_Write_Ins(0x03); 	//as per documentation set 4-bit mode
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f82a 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(40);
 8000c8c:	2028      	movs	r0, #40	; 0x28
 8000c8e:	f000 fa85 	bl	800119c <delay_milis>

	Display_Write_Ins(0x03); 	//as per documentation set 4-bit mode
 8000c92:	2003      	movs	r0, #3
 8000c94:	f000 f824 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(40);
 8000c98:	2028      	movs	r0, #40	; 0x28
 8000c9a:	f000 fa7f 	bl	800119c <delay_milis>


	Display_Write_Ins(0x02); 	//as per documentation set 4-bit mode
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f000 f81e 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(40);
 8000ca4:	2028      	movs	r0, #40	; 0x28
 8000ca6:	f000 fa79 	bl	800119c <delay_milis>

//	Display_Write_Ins(0x28);
	Display_Write_Ins(TWO_LINE_MODE);
 8000caa:	2028      	movs	r0, #40	; 0x28
 8000cac:	f000 f818 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fa73 	bl	800119c <delay_milis>

//	Display_Write_Ins(0x0F);
	Display_Write_Ins(DISPLAY_ON | CURSOR_OFF | CURSOR_BLINK_OFF);
 8000cb6:	200c      	movs	r0, #12
 8000cb8:	f000 f812 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f000 fa6d 	bl	800119c <delay_milis>

//	Display_Write_Ins(0x01);
	Display_Write_Ins(DISPLAY_CLEAR);
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f000 f80c 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f000 fa67 	bl	800119c <delay_milis>

//	Display_Write_Ins(0x06);
	Display_Write_Ins(INCREMENT_MODE | ENTIRE_SHIFT_OFF);
 8000cce:	2006      	movs	r0, #6
 8000cd0:	f000 f806 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000cd4:	2001      	movs	r0, #1
 8000cd6:	f000 fa61 	bl	800119c <delay_milis>

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <Display_Write_Ins>:

void Display_Write_Ins(char instruction)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RS);
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	484a      	ldr	r0, [pc, #296]	; (8000e18 <Display_Write_Ins+0x138>)
 8000cee:	f7ff fe73 	bl	80009d8 <GPIO_ResetBits>
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RW);
 8000cf2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cf6:	4848      	ldr	r0, [pc, #288]	; (8000e18 <Display_Write_Ins+0x138>)
 8000cf8:	f7ff fe6e 	bl	80009d8 <GPIO_ResetBits>

	instruction & DISPLAY_BIT_7_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000cfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	da05      	bge.n	8000d10 <Display_Write_Ins+0x30>
 8000d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d08:	4843      	ldr	r0, [pc, #268]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d0a:	f7ff fe56 	bl	80009ba <GPIO_SetBits>
 8000d0e:	e004      	b.n	8000d1a <Display_Write_Ins+0x3a>
 8000d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d14:	4840      	ldr	r0, [pc, #256]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d16:	f7ff fe5f 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_6_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d005      	beq.n	8000d30 <Display_Write_Ins+0x50>
 8000d24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d28:	483b      	ldr	r0, [pc, #236]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d2a:	f7ff fe46 	bl	80009ba <GPIO_SetBits>
 8000d2e:	e004      	b.n	8000d3a <Display_Write_Ins+0x5a>
 8000d30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d34:	4838      	ldr	r0, [pc, #224]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d36:	f7ff fe4f 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_5_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <Display_Write_Ins+0x70>
 8000d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d48:	4833      	ldr	r0, [pc, #204]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d4a:	f7ff fe36 	bl	80009ba <GPIO_SetBits>
 8000d4e:	e004      	b.n	8000d5a <Display_Write_Ins+0x7a>
 8000d50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d54:	4830      	ldr	r0, [pc, #192]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d56:	f7ff fe3f 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_4_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 0310 	and.w	r3, r3, #16
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <Display_Write_Ins+0x90>
 8000d64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d68:	482b      	ldr	r0, [pc, #172]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d6a:	f7ff fe26 	bl	80009ba <GPIO_SetBits>
 8000d6e:	e004      	b.n	8000d7a <Display_Write_Ins+0x9a>
 8000d70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d74:	4828      	ldr	r0, [pc, #160]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d76:	f7ff fe2f 	bl	80009d8 <GPIO_ResetBits>

	Display_RW_pusle();
 8000d7a:	f000 f915 	bl	8000fa8 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 fa0c 	bl	800119c <delay_milis>

	instruction & DISPLAY_BIT_3_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 0308 	and.w	r3, r3, #8
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <Display_Write_Ins+0xba>
 8000d8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d92:	4821      	ldr	r0, [pc, #132]	; (8000e18 <Display_Write_Ins+0x138>)
 8000d94:	f7ff fe11 	bl	80009ba <GPIO_SetBits>
 8000d98:	e004      	b.n	8000da4 <Display_Write_Ins+0xc4>
 8000d9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9e:	481e      	ldr	r0, [pc, #120]	; (8000e18 <Display_Write_Ins+0x138>)
 8000da0:	f7ff fe1a 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_2_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 0304 	and.w	r3, r3, #4
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d005      	beq.n	8000dba <Display_Write_Ins+0xda>
 8000dae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db2:	4819      	ldr	r0, [pc, #100]	; (8000e18 <Display_Write_Ins+0x138>)
 8000db4:	f7ff fe01 	bl	80009ba <GPIO_SetBits>
 8000db8:	e004      	b.n	8000dc4 <Display_Write_Ins+0xe4>
 8000dba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dbe:	4816      	ldr	r0, [pc, #88]	; (8000e18 <Display_Write_Ins+0x138>)
 8000dc0:	f7ff fe0a 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_1_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000dc4:	79fb      	ldrb	r3, [r7, #7]
 8000dc6:	f003 0302 	and.w	r3, r3, #2
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <Display_Write_Ins+0xfa>
 8000dce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dd2:	4811      	ldr	r0, [pc, #68]	; (8000e18 <Display_Write_Ins+0x138>)
 8000dd4:	f7ff fdf1 	bl	80009ba <GPIO_SetBits>
 8000dd8:	e004      	b.n	8000de4 <Display_Write_Ins+0x104>
 8000dda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <Display_Write_Ins+0x138>)
 8000de0:	f7ff fdfa 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_0_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d005      	beq.n	8000dfa <Display_Write_Ins+0x11a>
 8000dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <Display_Write_Ins+0x138>)
 8000df4:	f7ff fde1 	bl	80009ba <GPIO_SetBits>
 8000df8:	e004      	b.n	8000e04 <Display_Write_Ins+0x124>
 8000dfa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <Display_Write_Ins+0x138>)
 8000e00:	f7ff fdea 	bl	80009d8 <GPIO_ResetBits>

	Display_RW_pusle();
 8000e04:	f000 f8d0 	bl	8000fa8 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 f9c7 	bl	800119c <delay_milis>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40021000 	.word	0x40021000

08000e1c <Display_Write_Data>:

void Display_Write_Data(char data)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	GPIO_SetBits(DISPLAY_PORT, DISPLAY_RS);
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	484a      	ldr	r0, [pc, #296]	; (8000f54 <Display_Write_Data+0x138>)
 8000e2a:	f7ff fdc6 	bl	80009ba <GPIO_SetBits>
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RW);
 8000e2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e32:	4848      	ldr	r0, [pc, #288]	; (8000f54 <Display_Write_Data+0x138>)
 8000e34:	f7ff fdd0 	bl	80009d8 <GPIO_ResetBits>

	data & DISPLAY_BIT_7_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	da05      	bge.n	8000e4c <Display_Write_Data+0x30>
 8000e40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e44:	4843      	ldr	r0, [pc, #268]	; (8000f54 <Display_Write_Data+0x138>)
 8000e46:	f7ff fdb8 	bl	80009ba <GPIO_SetBits>
 8000e4a:	e004      	b.n	8000e56 <Display_Write_Data+0x3a>
 8000e4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e50:	4840      	ldr	r0, [pc, #256]	; (8000f54 <Display_Write_Data+0x138>)
 8000e52:	f7ff fdc1 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_6_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d005      	beq.n	8000e6c <Display_Write_Data+0x50>
 8000e60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e64:	483b      	ldr	r0, [pc, #236]	; (8000f54 <Display_Write_Data+0x138>)
 8000e66:	f7ff fda8 	bl	80009ba <GPIO_SetBits>
 8000e6a:	e004      	b.n	8000e76 <Display_Write_Data+0x5a>
 8000e6c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e70:	4838      	ldr	r0, [pc, #224]	; (8000f54 <Display_Write_Data+0x138>)
 8000e72:	f7ff fdb1 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_5_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	f003 0320 	and.w	r3, r3, #32
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d005      	beq.n	8000e8c <Display_Write_Data+0x70>
 8000e80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e84:	4833      	ldr	r0, [pc, #204]	; (8000f54 <Display_Write_Data+0x138>)
 8000e86:	f7ff fd98 	bl	80009ba <GPIO_SetBits>
 8000e8a:	e004      	b.n	8000e96 <Display_Write_Data+0x7a>
 8000e8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e90:	4830      	ldr	r0, [pc, #192]	; (8000f54 <Display_Write_Data+0x138>)
 8000e92:	f7ff fda1 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_4_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 0310 	and.w	r3, r3, #16
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d005      	beq.n	8000eac <Display_Write_Data+0x90>
 8000ea0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ea4:	482b      	ldr	r0, [pc, #172]	; (8000f54 <Display_Write_Data+0x138>)
 8000ea6:	f7ff fd88 	bl	80009ba <GPIO_SetBits>
 8000eaa:	e004      	b.n	8000eb6 <Display_Write_Data+0x9a>
 8000eac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000eb0:	4828      	ldr	r0, [pc, #160]	; (8000f54 <Display_Write_Data+0x138>)
 8000eb2:	f7ff fd91 	bl	80009d8 <GPIO_ResetBits>

	Display_RW_pusle();
 8000eb6:	f000 f877 	bl	8000fa8 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000eba:	2001      	movs	r0, #1
 8000ebc:	f000 f96e 	bl	800119c <delay_milis>

	data & DISPLAY_BIT_3_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d005      	beq.n	8000ed6 <Display_Write_Data+0xba>
 8000eca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ece:	4821      	ldr	r0, [pc, #132]	; (8000f54 <Display_Write_Data+0x138>)
 8000ed0:	f7ff fd73 	bl	80009ba <GPIO_SetBits>
 8000ed4:	e004      	b.n	8000ee0 <Display_Write_Data+0xc4>
 8000ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eda:	481e      	ldr	r0, [pc, #120]	; (8000f54 <Display_Write_Data+0x138>)
 8000edc:	f7ff fd7c 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_2_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d005      	beq.n	8000ef6 <Display_Write_Data+0xda>
 8000eea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eee:	4819      	ldr	r0, [pc, #100]	; (8000f54 <Display_Write_Data+0x138>)
 8000ef0:	f7ff fd63 	bl	80009ba <GPIO_SetBits>
 8000ef4:	e004      	b.n	8000f00 <Display_Write_Data+0xe4>
 8000ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000efa:	4816      	ldr	r0, [pc, #88]	; (8000f54 <Display_Write_Data+0x138>)
 8000efc:	f7ff fd6c 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_1_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 0302 	and.w	r3, r3, #2
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d005      	beq.n	8000f16 <Display_Write_Data+0xfa>
 8000f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0e:	4811      	ldr	r0, [pc, #68]	; (8000f54 <Display_Write_Data+0x138>)
 8000f10:	f7ff fd53 	bl	80009ba <GPIO_SetBits>
 8000f14:	e004      	b.n	8000f20 <Display_Write_Data+0x104>
 8000f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <Display_Write_Data+0x138>)
 8000f1c:	f7ff fd5c 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_0_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d005      	beq.n	8000f36 <Display_Write_Data+0x11a>
 8000f2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <Display_Write_Data+0x138>)
 8000f30:	f7ff fd43 	bl	80009ba <GPIO_SetBits>
 8000f34:	e004      	b.n	8000f40 <Display_Write_Data+0x124>
 8000f36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f3a:	4806      	ldr	r0, [pc, #24]	; (8000f54 <Display_Write_Data+0x138>)
 8000f3c:	f7ff fd4c 	bl	80009d8 <GPIO_ResetBits>

	Display_RW_pusle();
 8000f40:	f000 f832 	bl	8000fa8 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000f44:	2001      	movs	r0, #1
 8000f46:	f000 f929 	bl	800119c <delay_milis>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000

08000f58 <Display_init_GPIO>:
	}
	delay_milis(DISPLAY_DELAY);
}

void Display_init_GPIO(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
	delay_milis(400);
 8000f5e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000f62:	f000 f91b 	bl	800119c <delay_milis>
	setup_clock_for_GPIO(DISPLAY_PORT, ENABLE);
 8000f66:	2101      	movs	r1, #1
 8000f68:	480e      	ldr	r0, [pc, #56]	; (8000fa4 <Display_init_GPIO+0x4c>)
 8000f6a:	f000 f93d 	bl	80011e8 <setup_clock_for_GPIO>
	GPIO_InitTypeDef DISPLAY_GPIO;
	DISPLAY_GPIO.GPIO_Mode = GPIO_Mode_OUT;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	713b      	strb	r3, [r7, #4]
	DISPLAY_GPIO.GPIO_Speed = GPIO_Speed_50MHz;
 8000f72:	2302      	movs	r3, #2
 8000f74:	717b      	strb	r3, [r7, #5]
	DISPLAY_GPIO.GPIO_OType = GPIO_OType_PP;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71bb      	strb	r3, [r7, #6]
	DISPLAY_GPIO.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]

	DISPLAY_GPIO.GPIO_Pin = DISPLAY_RS |  DISPLAY_RW | DISPLAY_ENA | DISPLAY_DB7 | DISPLAY_DB6 | DISPLAY_DB5 | DISPLAY_DB4;
 8000f7e:	f64f 4380 	movw	r3, #64640	; 0xfc80
 8000f82:	603b      	str	r3, [r7, #0]
	GPIO_Init(DISPLAY_PORT, &DISPLAY_GPIO);
 8000f84:	463b      	mov	r3, r7
 8000f86:	4619      	mov	r1, r3
 8000f88:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <Display_init_GPIO+0x4c>)
 8000f8a:	f7ff fc87 	bl	800089c <GPIO_Init>
	GPIO_SetBits(DISPLAY_PORT, DISPLAY_GPIO.GPIO_Pin);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4619      	mov	r1, r3
 8000f94:	4803      	ldr	r0, [pc, #12]	; (8000fa4 <Display_init_GPIO+0x4c>)
 8000f96:	f7ff fd10 	bl	80009ba <GPIO_SetBits>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	40021000 	.word	0x40021000

08000fa8 <Display_RW_pusle>:

//pulse
void Display_RW_pusle(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
    GPIO_SetBits(DISPLAY_PORT, DISPLAY_ENA);
 8000fac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb0:	4806      	ldr	r0, [pc, #24]	; (8000fcc <Display_RW_pusle+0x24>)
 8000fb2:	f7ff fd02 	bl	80009ba <GPIO_SetBits>
    delay_milis(DISPLAY_DELAY);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f000 f8f0 	bl	800119c <delay_milis>
    GPIO_ResetBits(DISPLAY_PORT, DISPLAY_ENA);
 8000fbc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc0:	4802      	ldr	r0, [pc, #8]	; (8000fcc <Display_RW_pusle+0x24>)
 8000fc2:	f7ff fd09 	bl	80009d8 <GPIO_ResetBits>
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <Display_clear>:
	}

}

void Display_clear(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
	Display_Write_Ins(DISPLAY_CLEAR);
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff fe83 	bl	8000ce0 <Display_Write_Ins>
	delay_milis(2);
 8000fda:	2002      	movs	r0, #2
 8000fdc:	f000 f8de 	bl	800119c <delay_milis>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <setup_Display>:
		Display_Write_Data(' ');
	}
}

void setup_Display(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	Display_init_GPIO();
 8000fe8:	f7ff ffb6 	bl	8000f58 <Display_init_GPIO>
	Display_Init();
 8000fec:	f7ff fe40 	bl	8000c70 <Display_Init>
}
 8000ff0:	bf00      	nop
 8000ff2:	bd80      	pop	{r7, pc}

08000ff4 <setup_first_line>:

void setup_first_line() {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	Display_Write_Ins(GO_TO_START_FIRST_LINE);
 8000ff8:	2080      	movs	r0, #128	; 0x80
 8000ffa:	f7ff fe71 	bl	8000ce0 <Display_Write_Ins>
}
 8000ffe:	bf00      	nop
 8001000:	bd80      	pop	{r7, pc}

08001002 <print_display>:

void setup_second_line() {
	Display_Write_Ins(GO_TO_START_SECOND_LINE);
}

void print_display(char ch) {
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	71fb      	strb	r3, [r7, #7]
	Display_Write_Data(ch);
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff ff04 	bl	8000e1c <Display_Write_Data>
}
 8001014:	bf00      	nop
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <print_display_array>:

void print_display_array(char array[4]) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; ++i) {
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e009      	b.n	800103e <print_display_array+0x22>
		Display_Write_Data(array[i]);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fef2 	bl	8000e1c <Display_Write_Data>
	for (int i=0; i<4; ++i) {
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b03      	cmp	r3, #3
 8001042:	ddf2      	ble.n	800102a <print_display_array+0xe>
	}
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <Display_example>:

void Display_example(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	af00      	add	r7, sp, #0
	Display_init_GPIO();
 8001052:	f7ff ff81 	bl	8000f58 <Display_init_GPIO>

	Display_Init();
 8001056:	f7ff fe0b 	bl	8000c70 <Display_Init>

	Display_Write_Ins(GO_TO_START_FIRST_LINE);
 800105a:	2080      	movs	r0, #128	; 0x80
 800105c:	f7ff fe40 	bl	8000ce0 <Display_Write_Ins>
	Display_Write_Data('H');
 8001060:	2048      	movs	r0, #72	; 0x48
 8001062:	f7ff fedb 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('e');
 8001066:	2065      	movs	r0, #101	; 0x65
 8001068:	f7ff fed8 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('l');
 800106c:	206c      	movs	r0, #108	; 0x6c
 800106e:	f7ff fed5 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('l');
 8001072:	206c      	movs	r0, #108	; 0x6c
 8001074:	f7ff fed2 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('o');
 8001078:	206f      	movs	r0, #111	; 0x6f
 800107a:	f7ff fecf 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data(',');
 800107e:	202c      	movs	r0, #44	; 0x2c
 8001080:	f7ff fecc 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data(' ');
 8001084:	2020      	movs	r0, #32
 8001086:	f7ff fec9 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('E');
 800108a:	2045      	movs	r0, #69	; 0x45
 800108c:	f7ff fec6 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('m');
 8001090:	206d      	movs	r0, #109	; 0x6d
 8001092:	f7ff fec3 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('b');
 8001096:	2062      	movs	r0, #98	; 0x62
 8001098:	f7ff fec0 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('e');
 800109c:	2065      	movs	r0, #101	; 0x65
 800109e:	f7ff febd 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('d');
 80010a2:	2064      	movs	r0, #100	; 0x64
 80010a4:	f7ff feba 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('d');
 80010a8:	2064      	movs	r0, #100	; 0x64
 80010aa:	f7ff feb7 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('e');
 80010ae:	2065      	movs	r0, #101	; 0x65
 80010b0:	f7ff feb4 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('d');
 80010b4:	2064      	movs	r0, #100	; 0x64
 80010b6:	f7ff feb1 	bl	8000e1c <Display_Write_Data>


	delay_milis(1);
 80010ba:	2001      	movs	r0, #1
 80010bc:	f000 f86e 	bl	800119c <delay_milis>

	Display_Write_Ins(GO_TO_START_SECOND_LINE+5);
 80010c0:	20c5      	movs	r0, #197	; 0xc5
 80010c2:	f7ff fe0d 	bl	8000ce0 <Display_Write_Ins>
	Display_Write_Data('N');
 80010c6:	204e      	movs	r0, #78	; 0x4e
 80010c8:	f7ff fea8 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('U');
 80010cc:	2055      	movs	r0, #85	; 0x55
 80010ce:	f7ff fea5 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data(' ');
 80010d2:	2020      	movs	r0, #32
 80010d4:	f7ff fea2 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('K');
 80010d8:	204b      	movs	r0, #75	; 0x4b
 80010da:	f7ff fe9f 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('P');
 80010de:	2050      	movs	r0, #80	; 0x50
 80010e0:	f7ff fe9c 	bl	8000e1c <Display_Write_Data>
	Display_Write_Data('I');
 80010e4:	2049      	movs	r0, #73	; 0x49
 80010e6:	f7ff fe99 	bl	8000e1c <Display_Write_Data>
//	Display_Write_Data('E');
//	Display_Write_Data('R');
//	Display_Write_Data('!');
//	Display_Write_Data('!');
//	Display_Write_Data('!');
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}

080010ee <USART_send_character>:
	USART_Cmd(USARTx, ENABLE);

}

void USART_send_character(USART_TypeDef *USARTx, char ch)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	460b      	mov	r3, r1
 80010f8:	70fb      	strb	r3, [r7, #3]
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET){}
 80010fa:	bf00      	nop
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fd7c 	bl	8000bfc <USART_GetFlagStatus>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f8      	beq.n	80010fc <USART_send_character+0xe>
	USART_SendData(USARTx, (uint16_t)ch);
 800110a:	78fb      	ldrb	r3, [r7, #3]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4619      	mov	r1, r3
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff fd51 	bl	8000bb8 <USART_SendData>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <USART_send_string>:

void USART_send_string(USART_TypeDef *USARTx, char *str)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
 8001126:	6039      	str	r1, [r7, #0]
	while(*str != '\0')
 8001128:	e007      	b.n	800113a <USART_send_string+0x1c>
	{
		USART_send_character(USARTx, *str++);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	603a      	str	r2, [r7, #0]
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	4619      	mov	r1, r3
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffda 	bl	80010ee <USART_send_character>
	while(*str != '\0')
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f3      	bne.n	800112a <USART_send_string+0xc>
	}
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <USART_receive_character>:
	USART_send_character(USARTx, '\n');
	USART_send_character(USARTx, '\r');
}

char USART_receive_character(USART_TypeDef *USARTx)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	return USART_ReceiveData(USARTx);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fd41 	bl	8000bdc <USART_ReceiveData>
 800115a:	4603      	mov	r3, r0
 800115c:	b2db      	uxtb	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <USART_printf>:
{
	memset(USART_printf_buffer, 0, USART3_BUFF_MAX_SIZE);
}

void USART_printf(USART_TypeDef *USARTx, char *formater, ...)
{
 8001168:	b40e      	push	{r1, r2, r3}
 800116a:	b580      	push	{r7, lr}
 800116c:	b085      	sub	sp, #20
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
	va_list argumerts_list;
	va_start (argumerts_list, formater);
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	60fb      	str	r3, [r7, #12]
	vsprintf(USART_printf_buffer, formater, argumerts_list);
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	69f9      	ldr	r1, [r7, #28]
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <USART_printf+0x30>)
 800117e:	f000 fcd3 	bl	8001b28 <vsiprintf>
	USART_send_string(USARTx, USART_printf_buffer);
 8001182:	4905      	ldr	r1, [pc, #20]	; (8001198 <USART_printf+0x30>)
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ffca 	bl	800111e <USART_send_string>

}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001194:	b003      	add	sp, #12
 8001196:	4770      	bx	lr
 8001198:	200000a0 	.word	0x200000a0

0800119c <delay_milis>:
//	timing_dalay = RCC_Clocks.HCLK_Frequency/1000 * milisecond;
//	while(timing_dalay--);
}

void delay_milis(uint32_t milisecond)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
//	timing_dalay = RCC_Clocks.HCLK_Frequency/10000000 * microsecond;
//	while(timing_dalay--);
//	timing_dalay = microsecond;
//	while(timing_dalay);

	RCC_GetClocksFreq(&RCC_Clocks);
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <delay_milis+0x40>)
 80011a6:	f7ff fc39 	bl	8000a1c <RCC_GetClocksFreq>
	timing_dalay = RCC_Clocks.HCLK_Frequency/10000 * milisecond;
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <delay_milis+0x40>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <delay_milis+0x44>)
 80011b0:	fba2 2303 	umull	r2, r3, r2, r3
 80011b4:	0b5b      	lsrs	r3, r3, #13
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	fb02 f303 	mul.w	r3, r2, r3
 80011bc:	4a09      	ldr	r2, [pc, #36]	; (80011e4 <delay_milis+0x48>)
 80011be:	6013      	str	r3, [r2, #0]
	while(timing_dalay--);
 80011c0:	bf00      	nop
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <delay_milis+0x48>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1e5a      	subs	r2, r3, #1
 80011c8:	4906      	ldr	r1, [pc, #24]	; (80011e4 <delay_milis+0x48>)
 80011ca:	600a      	str	r2, [r1, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1f8      	bne.n	80011c2 <delay_milis+0x26>

//	milisecond*=800000;
//	while(milisecond--);
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200001a0 	.word	0x200001a0
 80011e0:	d1b71759 	.word	0xd1b71759
 80011e4:	200001c8 	.word	0x200001c8

080011e8 <setup_clock_for_GPIO>:

void setup_clock_for_GPIO(GPIO_TypeDef* GPIOx, FunctionalState state)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	70fb      	strb	r3, [r7, #3]
	switch ((int)GPIOx) {
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <setup_clock_for_GPIO+0x88>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d02d      	beq.n	8001258 <setup_clock_for_GPIO+0x70>
 80011fc:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <setup_clock_for_GPIO+0x88>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	dc30      	bgt.n	8001264 <setup_clock_for_GPIO+0x7c>
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <setup_clock_for_GPIO+0x8c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d021      	beq.n	800124c <setup_clock_for_GPIO+0x64>
 8001208:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <setup_clock_for_GPIO+0x8c>)
 800120a:	4293      	cmp	r3, r2
 800120c:	dc2a      	bgt.n	8001264 <setup_clock_for_GPIO+0x7c>
 800120e:	4a1a      	ldr	r2, [pc, #104]	; (8001278 <setup_clock_for_GPIO+0x90>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d015      	beq.n	8001240 <setup_clock_for_GPIO+0x58>
 8001214:	4a18      	ldr	r2, [pc, #96]	; (8001278 <setup_clock_for_GPIO+0x90>)
 8001216:	4293      	cmp	r3, r2
 8001218:	dc24      	bgt.n	8001264 <setup_clock_for_GPIO+0x7c>
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <setup_clock_for_GPIO+0x94>)
 800121c:	4293      	cmp	r3, r2
 800121e:	d003      	beq.n	8001228 <setup_clock_for_GPIO+0x40>
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <setup_clock_for_GPIO+0x98>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d006      	beq.n	8001234 <setup_clock_for_GPIO+0x4c>
			break;
		case (int)GPIOE:
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, state); //APB1
			break;
		default:
			break;
 8001226:	e01d      	b.n	8001264 <setup_clock_for_GPIO+0x7c>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, state); //APB1
 8001228:	78fb      	ldrb	r3, [r7, #3]
 800122a:	4619      	mov	r1, r3
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff fca3 	bl	8000b78 <RCC_AHB1PeriphClockCmd>
			break;
 8001232:	e018      	b.n	8001266 <setup_clock_for_GPIO+0x7e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, state); //APB1
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	4619      	mov	r1, r3
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff fc9d 	bl	8000b78 <RCC_AHB1PeriphClockCmd>
			break;
 800123e:	e012      	b.n	8001266 <setup_clock_for_GPIO+0x7e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, state); //APB1
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	4619      	mov	r1, r3
 8001244:	2004      	movs	r0, #4
 8001246:	f7ff fc97 	bl	8000b78 <RCC_AHB1PeriphClockCmd>
			break;
 800124a:	e00c      	b.n	8001266 <setup_clock_for_GPIO+0x7e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, state); //APB1
 800124c:	78fb      	ldrb	r3, [r7, #3]
 800124e:	4619      	mov	r1, r3
 8001250:	2008      	movs	r0, #8
 8001252:	f7ff fc91 	bl	8000b78 <RCC_AHB1PeriphClockCmd>
			break;
 8001256:	e006      	b.n	8001266 <setup_clock_for_GPIO+0x7e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, state); //APB1
 8001258:	78fb      	ldrb	r3, [r7, #3]
 800125a:	4619      	mov	r1, r3
 800125c:	2010      	movs	r0, #16
 800125e:	f7ff fc8b 	bl	8000b78 <RCC_AHB1PeriphClockCmd>
			break;
 8001262:	e000      	b.n	8001266 <setup_clock_for_GPIO+0x7e>
			break;
 8001264:	bf00      	nop
	}
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40020800 	.word	0x40020800
 800127c:	40020000 	.word	0x40020000
 8001280:	40020400 	.word	0x40020400

08001284 <EXTI0_IRQHandler>:

volatile uint32_t usart3_buffer_iterrator;


void EXTI0_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) == SET)
 8001288:	2001      	movs	r0, #1
 800128a:	f7ff fad3 	bl	8000834 <EXTI_GetITStatus>
 800128e:	4603      	mov	r3, r0
 8001290:	2b01      	cmp	r3, #1
 8001292:	d108      	bne.n	80012a6 <EXTI0_IRQHandler+0x22>
	{
		//TODO USER_DISCO_BUTTON
		 USER_BUTTON_state =~ USER_BUTTON_state;
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <EXTI0_IRQHandler+0x28>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	43db      	mvns	r3, r3
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <EXTI0_IRQHandler+0x28>)
 800129e:	701a      	strb	r2, [r3, #0]
		 EXTI_ClearITPendingBit(EXTI_Line0);
 80012a0:	2001      	movs	r0, #1
 80012a2:	f7ff faeb 	bl	800087c <EXTI_ClearITPendingBit>

	}
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001c4 	.word	0x200001c4

080012b0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line6) == SET)
 80012b4:	2040      	movs	r0, #64	; 0x40
 80012b6:	f7ff fabd 	bl	8000834 <EXTI_GetITStatus>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <EXTI9_5_IRQHandler+0x22>
	{
		//TODO UP_BUTTON
		UP_BUTTON_state =~ UP_BUTTON_state;
 80012c0:	4b16      	ldr	r3, [pc, #88]	; (800131c <EXTI9_5_IRQHandler+0x6c>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <EXTI9_5_IRQHandler+0x6c>)
 80012ca:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line6);
 80012cc:	2040      	movs	r0, #64	; 0x40
 80012ce:	f7ff fad5 	bl	800087c <EXTI_ClearITPendingBit>

	}
	if(EXTI_GetITStatus(EXTI_Line8) == SET)
 80012d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012d6:	f7ff faad 	bl	8000834 <EXTI_GetITStatus>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d109      	bne.n	80012f4 <EXTI9_5_IRQHandler+0x44>
	{
		//TODO DOWN_BUTTON
		DOWN_BUTTON_state =~ DOWN_BUTTON_state;
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <EXTI9_5_IRQHandler+0x70>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <EXTI9_5_IRQHandler+0x70>)
 80012ea:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line8);
 80012ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012f0:	f7ff fac4 	bl	800087c <EXTI_ClearITPendingBit>

	}
	if(EXTI_GetITStatus(EXTI_Line9) == SET)
 80012f4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012f8:	f7ff fa9c 	bl	8000834 <EXTI_GetITStatus>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d109      	bne.n	8001316 <EXTI9_5_IRQHandler+0x66>
	{
		//TODO LEFT_BUTTON
		LEFT_BUTTON_state =~ LEFT_BUTTON_state;
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <EXTI9_5_IRQHandler+0x74>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	43db      	mvns	r3, r3
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4b06      	ldr	r3, [pc, #24]	; (8001324 <EXTI9_5_IRQHandler+0x74>)
 800130c:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line9);
 800130e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001312:	f7ff fab3 	bl	800087c <EXTI_ClearITPendingBit>
	}
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200001c2 	.word	0x200001c2
 8001320:	200001c1 	.word	0x200001c1
 8001324:	200001c5 	.word	0x200001c5

08001328 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line15) == SET)
 800132c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001330:	f7ff fa80 	bl	8000834 <EXTI_GetITStatus>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d109      	bne.n	800134e <EXTI15_10_IRQHandler+0x26>
	{
		//TODO OK BUTTON
		OK_BUTTON_state =~ OK_BUTTON_state;
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <EXTI15_10_IRQHandler+0x4c>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	43db      	mvns	r3, r3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <EXTI15_10_IRQHandler+0x4c>)
 8001344:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line15);
 8001346:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800134a:	f7ff fa97 	bl	800087c <EXTI_ClearITPendingBit>
	}
	if(EXTI_GetITStatus(EXTI_Line11) == SET)
 800134e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001352:	f7ff fa6f 	bl	8000834 <EXTI_GetITStatus>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d109      	bne.n	8001370 <EXTI15_10_IRQHandler+0x48>
	{
		//TODO RIGTH BUTTON
		RIGHT_BUTTON_state =~ RIGHT_BUTTON_state;
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <EXTI15_10_IRQHandler+0x50>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	43db      	mvns	r3, r3
 8001362:	b2da      	uxtb	r2, r3
 8001364:	4b04      	ldr	r3, [pc, #16]	; (8001378 <EXTI15_10_IRQHandler+0x50>)
 8001366:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line11);
 8001368:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800136c:	f7ff fa86 	bl	800087c <EXTI_ClearITPendingBit>
	}
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	200001c3 	.word	0x200001c3
 8001378:	200001c0 	.word	0x200001c0

0800137c <USART3_IRQHandler>:
  * @param  None
  * @retval None
  */

void USART3_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus(USART3, USART_FLAG_RXNE) == SET)
 8001382:	2120      	movs	r1, #32
 8001384:	4839      	ldr	r0, [pc, #228]	; (800146c <USART3_IRQHandler+0xf0>)
 8001386:	f7ff fc39 	bl	8000bfc <USART_GetFlagStatus>
 800138a:	4603      	mov	r3, r0
 800138c:	2b01      	cmp	r3, #1
 800138e:	d169      	bne.n	8001464 <USART3_IRQHandler+0xe8>
	{

		if (USART3_RX_DATA == ALREADY_SENT)
 8001390:	4b37      	ldr	r3, [pc, #220]	; (8001470 <USART3_IRQHandler+0xf4>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b02      	cmp	r3, #2
 8001396:	d102      	bne.n	800139e <USART3_IRQHandler+0x22>
		{
			usart3_buffer_iterrator = 0;
 8001398:	4b36      	ldr	r3, [pc, #216]	; (8001474 <USART3_IRQHandler+0xf8>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
		}
		USART3_RX_DATA = PREPARING;
 800139e:	4b34      	ldr	r3, [pc, #208]	; (8001470 <USART3_IRQHandler+0xf4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	701a      	strb	r2, [r3, #0]
		char ch;
		USART3_BUFFER[USART3_BUFF_MAX_SIZE-1] = '\0';
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <USART3_IRQHandler+0xfc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

		ch = USART_receive_character(USART3);
 80013ac:	482f      	ldr	r0, [pc, #188]	; (800146c <USART3_IRQHandler+0xf0>)
 80013ae:	f7ff fecd 	bl	800114c <USART_receive_character>
 80013b2:	4603      	mov	r3, r0
 80013b4:	72fb      	strb	r3, [r7, #11]
		if (ch == 0x0D) //pressed Enter
 80013b6:	7afb      	ldrb	r3, [r7, #11]
 80013b8:	2b0d      	cmp	r3, #13
 80013ba:	d10b      	bne.n	80013d4 <USART3_IRQHandler+0x58>
		{
			USART3_BUFFER[usart3_buffer_iterrator] = '\0';
 80013bc:	4b2d      	ldr	r3, [pc, #180]	; (8001474 <USART3_IRQHandler+0xf8>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a2d      	ldr	r2, [pc, #180]	; (8001478 <USART3_IRQHandler+0xfc>)
 80013c2:	2100      	movs	r1, #0
 80013c4:	54d1      	strb	r1, [r2, r3]
			usart3_buffer_iterrator = 0;
 80013c6:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <USART3_IRQHandler+0xf8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
			USART3_RX_DATA = READY;
 80013cc:	4b28      	ldr	r3, [pc, #160]	; (8001470 <USART3_IRQHandler+0xf4>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	701a      	strb	r2, [r3, #0]
			return;
 80013d2:	e047      	b.n	8001464 <USART3_IRQHandler+0xe8>
		}
		if (ch == 0x7F) //pressed Backspace
 80013d4:	7afb      	ldrb	r3, [r7, #11]
 80013d6:	2b7f      	cmp	r3, #127	; 0x7f
 80013d8:	d12b      	bne.n	8001432 <USART3_IRQHandler+0xb6>
		{
			if (usart3_buffer_iterrator > 0)
 80013da:	4b26      	ldr	r3, [pc, #152]	; (8001474 <USART3_IRQHandler+0xf8>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d027      	beq.n	8001432 <USART3_IRQHandler+0xb6>
			{
				//calculate current length
				uint32_t length;
				length = strlen(USART3_BUFFER);
 80013e2:	4825      	ldr	r0, [pc, #148]	; (8001478 <USART3_IRQHandler+0xfc>)
 80013e4:	f7fe fef4 	bl	80001d0 <strlen>
 80013e8:	6078      	str	r0, [r7, #4]
				usart3_buffer_iterrator--;
 80013ea:	4b22      	ldr	r3, [pc, #136]	; (8001474 <USART3_IRQHandler+0xf8>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	4a20      	ldr	r2, [pc, #128]	; (8001474 <USART3_IRQHandler+0xf8>)
 80013f2:	6013      	str	r3, [r2, #0]
				USART3_BUFFER[usart3_buffer_iterrator] = '\0';
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <USART3_IRQHandler+0xf8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1f      	ldr	r2, [pc, #124]	; (8001478 <USART3_IRQHandler+0xfc>)
 80013fa:	2100      	movs	r1, #0
 80013fc:	54d1      	strb	r1, [r2, r3]
				// fill current line spaces
				USART_send_character(USART3, '\r');
 80013fe:	210d      	movs	r1, #13
 8001400:	481a      	ldr	r0, [pc, #104]	; (800146c <USART3_IRQHandler+0xf0>)
 8001402:	f7ff fe74 	bl	80010ee <USART_send_character>
				for (uint32_t j = 0; j < length; ++j)
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	e006      	b.n	800141a <USART3_IRQHandler+0x9e>
				{
					USART_send_character(USART3, ' ');
 800140c:	2120      	movs	r1, #32
 800140e:	4817      	ldr	r0, [pc, #92]	; (800146c <USART3_IRQHandler+0xf0>)
 8001410:	f7ff fe6d 	bl	80010ee <USART_send_character>
				for (uint32_t j = 0; j < length; ++j)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3301      	adds	r3, #1
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d3f4      	bcc.n	800140c <USART3_IRQHandler+0x90>
				}
				//print new line without deleted character
				USART_send_character(USART3, '\r');
 8001422:	210d      	movs	r1, #13
 8001424:	4811      	ldr	r0, [pc, #68]	; (800146c <USART3_IRQHandler+0xf0>)
 8001426:	f7ff fe62 	bl	80010ee <USART_send_character>
				USART_send_string(USART3, USART3_BUFFER);
 800142a:	4913      	ldr	r1, [pc, #76]	; (8001478 <USART3_IRQHandler+0xfc>)
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <USART3_IRQHandler+0xf0>)
 800142e:	f7ff fe76 	bl	800111e <USART_send_string>
		}
		if (ch >= 0x0 && ch <= 0x1F) //processing ASCII control characters
		{
			//TODO
		}
		if (ch > 0x1F && ch < 0x7F)
 8001432:	7afb      	ldrb	r3, [r7, #11]
 8001434:	2b1f      	cmp	r3, #31
 8001436:	d915      	bls.n	8001464 <USART3_IRQHandler+0xe8>
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	2b7e      	cmp	r3, #126	; 0x7e
 800143c:	d812      	bhi.n	8001464 <USART3_IRQHandler+0xe8>
		{
			USART3_BUFFER[usart3_buffer_iterrator] = ch;
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <USART3_IRQHandler+0xf8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	490d      	ldr	r1, [pc, #52]	; (8001478 <USART3_IRQHandler+0xfc>)
 8001444:	7afa      	ldrb	r2, [r7, #11]
 8001446:	54ca      	strb	r2, [r1, r3]
			USART_send_character(USART3, ch); //echo
 8001448:	7afb      	ldrb	r3, [r7, #11]
 800144a:	4619      	mov	r1, r3
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <USART3_IRQHandler+0xf0>)
 800144e:	f7ff fe4e 	bl	80010ee <USART_send_character>
			if(usart3_buffer_iterrator < USART3_BUFF_MAX_SIZE)
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <USART3_IRQHandler+0xf8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2bff      	cmp	r3, #255	; 0xff
 8001458:	d804      	bhi.n	8001464 <USART3_IRQHandler+0xe8>
			{
				usart3_buffer_iterrator++;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <USART3_IRQHandler+0xf8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3301      	adds	r3, #1
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <USART3_IRQHandler+0xf8>)
 8001462:	6013      	str	r3, [r2, #0]
			}
		}

	}
}
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40004800 	.word	0x40004800
 8001470:	200001cc 	.word	0x200001cc
 8001474:	200002d0 	.word	0x200002d0
 8001478:	200001d0 	.word	0x200001d0

0800147c <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
	CanRxMsg RxMessage;
	memset(&RxMessage, 0, sizeof(RxMessage));
 8001482:	463b      	mov	r3, r7
 8001484:	2214      	movs	r2, #20
 8001486:	2100      	movs	r1, #0
 8001488:	4618      	mov	r0, r3
 800148a:	f000 fb2f 	bl	8001aec <memset>

	if (CAN_GetITStatus(CAN1, CAN_IT_FMP0) != RESET)
 800148e:	2102      	movs	r1, #2
 8001490:	481a      	ldr	r0, [pc, #104]	; (80014fc <CAN1_RX0_IRQHandler+0x80>)
 8001492:	f7ff f885 	bl	80005a0 <CAN_GetITStatus>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d02a      	beq.n	80014f2 <CAN1_RX0_IRQHandler+0x76>
	{
		CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
 800149c:	463b      	mov	r3, r7
 800149e:	461a      	mov	r2, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	4816      	ldr	r0, [pc, #88]	; (80014fc <CAN1_RX0_IRQHandler+0x80>)
 80014a4:	f7fe ffbd 	bl	8000422 <CAN_Receive>

		if (RxMessage.IDE == CAN_Id_Standard)
 80014a8:	7a3b      	ldrb	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d121      	bne.n	80014f2 <CAN1_RX0_IRQHandler+0x76>
		{
			if (RxMessage.StdId == CAN_MASSEGE_ID_REQ)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	2ba1      	cmp	r3, #161	; 0xa1
 80014b2:	d116      	bne.n	80014e2 <CAN1_RX0_IRQHandler+0x66>
			{
				CAN_transmit_data();
 80014b4:	f7ff fbbe 	bl	8000c34 <CAN_transmit_data>
				for (int i=0; i < RxMessage.DLC; i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e00c      	b.n	80014d8 <CAN1_RX0_IRQHandler+0x5c>
				USART_printf(USART3, "RxMessage.Data[%d] = %c\n\r", i,RxMessage.Data[i]);
 80014be:	f107 020b 	add.w	r2, r7, #11
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	4413      	add	r3, r2
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <CAN1_RX0_IRQHandler+0x84>)
 80014cc:	480d      	ldr	r0, [pc, #52]	; (8001504 <CAN1_RX0_IRQHandler+0x88>)
 80014ce:	f7ff fe4b 	bl	8001168 <USART_printf>
				for (int i=0; i < RxMessage.DLC; i++)
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	3301      	adds	r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	7abb      	ldrb	r3, [r7, #10]
 80014da:	461a      	mov	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	4293      	cmp	r3, r2
 80014e0:	dbed      	blt.n	80014be <CAN1_RX0_IRQHandler+0x42>

			}
			if (RxMessage.StdId == CAN_MASSEGE_ID_RESP)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2ba2      	cmp	r3, #162	; 0xa2
 80014e6:	d104      	bne.n	80014f2 <CAN1_RX0_IRQHandler+0x76>
			{
				GPIO_ToggleBits(LED_PORT, LED_PINS);
 80014e8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80014ec:	4806      	ldr	r0, [pc, #24]	; (8001508 <CAN1_RX0_IRQHandler+0x8c>)
 80014ee:	f7ff fa82 	bl	80009f6 <GPIO_ToggleBits>
			}
		}
	}
}
 80014f2:	bf00      	nop
 80014f4:	3718      	adds	r7, #24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40006400 	.word	0x40006400
 8001500:	0800238c 	.word	0x0800238c
 8001504:	40004800 	.word	0x40004800
 8001508:	40020c00 	.word	0x40020c00

0800150c <delay>:
#include <string.h>



void delay(void)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
	for(uint32_t i=0 ; i < 300000 ; i++);
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	e002      	b.n	800151e <delay+0x12>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3301      	adds	r3, #1
 800151c:	607b      	str	r3, [r7, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a04      	ldr	r2, [pc, #16]	; (8001534 <delay+0x28>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d9f8      	bls.n	8001518 <delay+0xc>
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	000493df 	.word	0x000493df

08001538 <setup_GPIO_for_keypad>:



void setup_GPIO_for_keypad() {
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0

	   //1.Enable the peripheral clock of GPIOD peripheral
		*pClockCtrlReg |= ( 1 << 3);
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <setup_GPIO_for_keypad+0x58>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a13      	ldr	r2, [pc, #76]	; (8001590 <setup_GPIO_for_keypad+0x58>)
 8001542:	f043 0308 	orr.w	r3, r3, #8
 8001546:	6013      	str	r3, [r2, #0]

	  // 2.configure PD0,PD1,PD2,PD3 as output (rows)
		*pGPIODModeReg &= ~(0xFF); //clear
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <setup_GPIO_for_keypad+0x5c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a11      	ldr	r2, [pc, #68]	; (8001594 <setup_GPIO_for_keypad+0x5c>)
 800154e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001552:	6013      	str	r3, [r2, #0]
		*pGPIODModeReg |= 0x55;   //set
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <setup_GPIO_for_keypad+0x5c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0e      	ldr	r2, [pc, #56]	; (8001594 <setup_GPIO_for_keypad+0x5c>)
 800155a:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 800155e:	6013      	str	r3, [r2, #0]

		// 3. configure PD8 , PD9, PD10, PD11 as input (columns)
	  *pGPIODModeReg &= ~(0xFF << 16);
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <setup_GPIO_for_keypad+0x5c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <setup_GPIO_for_keypad+0x5c>)
 8001566:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800156a:	6013      	str	r3, [r2, #0]

		// 4.Enable internal pull-up resistors for PD8 PD9 PD10 PD11
	  *pPullupDownReg &= ~(0xFF << 16);
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <setup_GPIO_for_keypad+0x60>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a09      	ldr	r2, [pc, #36]	; (8001598 <setup_GPIO_for_keypad+0x60>)
 8001572:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001576:	6013      	str	r3, [r2, #0]
	  *pPullupDownReg |=  (0x55 << 16);
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <setup_GPIO_for_keypad+0x60>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a06      	ldr	r2, [pc, #24]	; (8001598 <setup_GPIO_for_keypad+0x60>)
 800157e:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40023830 	.word	0x40023830
 8001594:	40020c00 	.word	0x40020c00
 8001598:	40020c0c 	.word	0x40020c0c

0800159c <convert_hex_to_bin>:
		*dest++ = *src++;
	}
}


void convert_hex_to_bin() {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
		long int count=0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
		while(data[count])
 80015a6:	e06e      	b.n	8001686 <convert_hex_to_bin+0xea>
		{
			switch(data[count])
 80015a8:	4a3c      	ldr	r2, [pc, #240]	; (800169c <convert_hex_to_bin+0x100>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	3b30      	subs	r3, #48	; 0x30
 80015b2:	2b14      	cmp	r3, #20
 80015b4:	d864      	bhi.n	8001680 <convert_hex_to_bin+0xe4>
 80015b6:	a201      	add	r2, pc, #4	; (adr r2, 80015bc <convert_hex_to_bin+0x20>)
 80015b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015bc:	08001611 	.word	0x08001611
 80015c0:	08001619 	.word	0x08001619
 80015c4:	08001621 	.word	0x08001621
 80015c8:	08001629 	.word	0x08001629
 80015cc:	08001631 	.word	0x08001631
 80015d0:	08001639 	.word	0x08001639
 80015d4:	08001641 	.word	0x08001641
 80015d8:	08001649 	.word	0x08001649
 80015dc:	08001651 	.word	0x08001651
 80015e0:	08001659 	.word	0x08001659
 80015e4:	08001681 	.word	0x08001681
 80015e8:	08001681 	.word	0x08001681
 80015ec:	08001681 	.word	0x08001681
 80015f0:	08001681 	.word	0x08001681
 80015f4:	08001681 	.word	0x08001681
 80015f8:	08001681 	.word	0x08001681
 80015fc:	08001681 	.word	0x08001681
 8001600:	08001661 	.word	0x08001661
 8001604:	08001669 	.word	0x08001669
 8001608:	08001671 	.word	0x08001671
 800160c:	08001679 	.word	0x08001679
			{
				case '0' : print_display_array("0000");
 8001610:	4823      	ldr	r0, [pc, #140]	; (80016a0 <convert_hex_to_bin+0x104>)
 8001612:	f7ff fd03 	bl	800101c <print_display_array>
					break;
 8001616:	e033      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '1' : print_display_array("0001");
 8001618:	4822      	ldr	r0, [pc, #136]	; (80016a4 <convert_hex_to_bin+0x108>)
 800161a:	f7ff fcff 	bl	800101c <print_display_array>
					break;
 800161e:	e02f      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '2' : print_display_array("0010");
 8001620:	4821      	ldr	r0, [pc, #132]	; (80016a8 <convert_hex_to_bin+0x10c>)
 8001622:	f7ff fcfb 	bl	800101c <print_display_array>
					break;
 8001626:	e02b      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '3' : print_display_array("0011");
 8001628:	4820      	ldr	r0, [pc, #128]	; (80016ac <convert_hex_to_bin+0x110>)
 800162a:	f7ff fcf7 	bl	800101c <print_display_array>
					break;
 800162e:	e027      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '4' : print_display_array("0100");
 8001630:	481f      	ldr	r0, [pc, #124]	; (80016b0 <convert_hex_to_bin+0x114>)
 8001632:	f7ff fcf3 	bl	800101c <print_display_array>
					break;
 8001636:	e023      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '5' : print_display_array("0101");
 8001638:	481e      	ldr	r0, [pc, #120]	; (80016b4 <convert_hex_to_bin+0x118>)
 800163a:	f7ff fcef 	bl	800101c <print_display_array>
					break;
 800163e:	e01f      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '6' : print_display_array("0110");
 8001640:	481d      	ldr	r0, [pc, #116]	; (80016b8 <convert_hex_to_bin+0x11c>)
 8001642:	f7ff fceb 	bl	800101c <print_display_array>
					break;
 8001646:	e01b      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '7' : print_display_array("0111");
 8001648:	481c      	ldr	r0, [pc, #112]	; (80016bc <convert_hex_to_bin+0x120>)
 800164a:	f7ff fce7 	bl	800101c <print_display_array>
					break;
 800164e:	e017      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '8' : print_display_array("1000");
 8001650:	481b      	ldr	r0, [pc, #108]	; (80016c0 <convert_hex_to_bin+0x124>)
 8001652:	f7ff fce3 	bl	800101c <print_display_array>
					break;
 8001656:	e013      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case '9' : print_display_array("1001");
 8001658:	481a      	ldr	r0, [pc, #104]	; (80016c4 <convert_hex_to_bin+0x128>)
 800165a:	f7ff fcdf 	bl	800101c <print_display_array>
					break;
 800165e:	e00f      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case 'A' : print_display_array("1010");
 8001660:	4819      	ldr	r0, [pc, #100]	; (80016c8 <convert_hex_to_bin+0x12c>)
 8001662:	f7ff fcdb 	bl	800101c <print_display_array>
					break;
 8001666:	e00b      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case 'B' : print_display_array("1011");
 8001668:	4818      	ldr	r0, [pc, #96]	; (80016cc <convert_hex_to_bin+0x130>)
 800166a:	f7ff fcd7 	bl	800101c <print_display_array>
					break;
 800166e:	e007      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case 'C' : print_display_array("1100");
 8001670:	4817      	ldr	r0, [pc, #92]	; (80016d0 <convert_hex_to_bin+0x134>)
 8001672:	f7ff fcd3 	bl	800101c <print_display_array>
					break;
 8001676:	e003      	b.n	8001680 <convert_hex_to_bin+0xe4>
				case 'D' : print_display_array("1101");
 8001678:	4816      	ldr	r0, [pc, #88]	; (80016d4 <convert_hex_to_bin+0x138>)
 800167a:	f7ff fccf 	bl	800101c <print_display_array>
					break;
 800167e:	bf00      	nop
			}
			++count;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3301      	adds	r3, #1
 8001684:	607b      	str	r3, [r7, #4]
		while(data[count])
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <convert_hex_to_bin+0x100>)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d18a      	bne.n	80015a8 <convert_hex_to_bin+0xc>
		}
}
 8001692:	bf00      	nop
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	200002d4 	.word	0x200002d4
 80016a0:	080023a8 	.word	0x080023a8
 80016a4:	080023b0 	.word	0x080023b0
 80016a8:	080023b8 	.word	0x080023b8
 80016ac:	080023c0 	.word	0x080023c0
 80016b0:	080023c8 	.word	0x080023c8
 80016b4:	080023d0 	.word	0x080023d0
 80016b8:	080023d8 	.word	0x080023d8
 80016bc:	080023e0 	.word	0x080023e0
 80016c0:	080023e8 	.word	0x080023e8
 80016c4:	080023f0 	.word	0x080023f0
 80016c8:	080023f8 	.word	0x080023f8
 80016cc:	08002400 	.word	0x08002400
 80016d0:	08002408 	.word	0x08002408
 80016d4:	08002410 	.word	0x08002410

080016d8 <Keypad_loop>:

char keypad_symbols[16] = {'1', '2', '3', 'A', '4', '5', '6', 'B', '7', '8', '9', 'C', '*', '0', '#', 'D'};

void Keypad_loop() {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
//		  	 if (n_chars == 15) {
//		  		 setup_second_line();
//		  	 }


			for (uint8_t i=0; i<4; ++i) {
 80016de:	2300      	movs	r3, #0
 80016e0:	71fb      	strb	r3, [r7, #7]
 80016e2:	e0b1      	b.n	8001848 <Keypad_loop+0x170>

				//make all rows HIGH
				*pOutPutDataReg |= 0x0f;
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <Keypad_loop+0x184>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5c      	ldr	r2, [pc, #368]	; (800185c <Keypad_loop+0x184>)
 80016ea:	f043 030f 	orr.w	r3, r3, #15
 80016ee:	6013      	str	r3, [r2, #0]

				//make Ri LOW(PD0)
				*pOutPutDataReg &= ~( 1 << i);
 80016f0:	4b5a      	ldr	r3, [pc, #360]	; (800185c <Keypad_loop+0x184>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	79fa      	ldrb	r2, [r7, #7]
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	43d2      	mvns	r2, r2
 80016fe:	4611      	mov	r1, r2
 8001700:	4a56      	ldr	r2, [pc, #344]	; (800185c <Keypad_loop+0x184>)
 8001702:	400b      	ands	r3, r1
 8001704:	6013      	str	r3, [r2, #0]

				 //scan the columns

				//check C1 of Ri is low or high
				if(!(*pInPutDataReg & ( 1 << 8))) {
 8001706:	4b56      	ldr	r3, [pc, #344]	; (8001860 <Keypad_loop+0x188>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	2b00      	cmp	r3, #0
 8001710:	d120      	bne.n	8001754 <Keypad_loop+0x7c>
					//key is pressed
					if (i != 3) {
 8001712:	79fb      	ldrb	r3, [r7, #7]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d018      	beq.n	800174a <Keypad_loop+0x72>
						delay();
 8001718:	f7ff fef8 	bl	800150c <delay>
						print_display(keypad_symbols[i*4]);
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4a50      	ldr	r2, [pc, #320]	; (8001864 <Keypad_loop+0x18c>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fc6c 	bl	8001002 <print_display>
						data[n_chars] = keypad_symbols[i*4];
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <Keypad_loop+0x190>)
 8001730:	7812      	ldrb	r2, [r2, #0]
 8001732:	4611      	mov	r1, r2
 8001734:	4a4b      	ldr	r2, [pc, #300]	; (8001864 <Keypad_loop+0x18c>)
 8001736:	5cd2      	ldrb	r2, [r2, r3]
 8001738:	4b4c      	ldr	r3, [pc, #304]	; (800186c <Keypad_loop+0x194>)
 800173a:	545a      	strb	r2, [r3, r1]
						++n_chars;
 800173c:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <Keypad_loop+0x190>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b48      	ldr	r3, [pc, #288]	; (8001868 <Keypad_loop+0x190>)
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	e004      	b.n	8001754 <Keypad_loop+0x7c>
					}
					else {
						Display_Write_Ins(GO_TO_START_SECOND_LINE);
 800174a:	20c0      	movs	r0, #192	; 0xc0
 800174c:	f7ff fac8 	bl	8000ce0 <Display_Write_Ins>
						convert_hex_to_bin();
 8001750:	f7ff ff24 	bl	800159c <convert_hex_to_bin>
					}
				}

				//check C2 of Ri is low or high
				if(!(*pInPutDataReg & ( 1 << 9))) {
 8001754:	4b42      	ldr	r3, [pc, #264]	; (8001860 <Keypad_loop+0x188>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800175c:	2b00      	cmp	r3, #0
 800175e:	d119      	bne.n	8001794 <Keypad_loop+0xbc>
					//key is pressed
					delay();
 8001760:	f7ff fed4 	bl	800150c <delay>
					print_display(keypad_symbols[i*4+1]);
 8001764:	79fb      	ldrb	r3, [r7, #7]
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	3301      	adds	r3, #1
 800176a:	4a3e      	ldr	r2, [pc, #248]	; (8001864 <Keypad_loop+0x18c>)
 800176c:	5cd3      	ldrb	r3, [r2, r3]
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fc47 	bl	8001002 <print_display>
					data[n_chars] = keypad_symbols[i*4+1];
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	3301      	adds	r3, #1
 800177a:	4a3b      	ldr	r2, [pc, #236]	; (8001868 <Keypad_loop+0x190>)
 800177c:	7812      	ldrb	r2, [r2, #0]
 800177e:	4611      	mov	r1, r2
 8001780:	4a38      	ldr	r2, [pc, #224]	; (8001864 <Keypad_loop+0x18c>)
 8001782:	5cd2      	ldrb	r2, [r2, r3]
 8001784:	4b39      	ldr	r3, [pc, #228]	; (800186c <Keypad_loop+0x194>)
 8001786:	545a      	strb	r2, [r3, r1]
					++n_chars;
 8001788:	4b37      	ldr	r3, [pc, #220]	; (8001868 <Keypad_loop+0x190>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b35      	ldr	r3, [pc, #212]	; (8001868 <Keypad_loop+0x190>)
 8001792:	701a      	strb	r2, [r3, #0]
				}

				//check C3 of Ri is low or high
				if(!(*pInPutDataReg & ( 1 << 10))) {
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <Keypad_loop+0x188>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800179c:	2b00      	cmp	r3, #0
 800179e:	d125      	bne.n	80017ec <Keypad_loop+0x114>
					//key is pressed
					if (i != 3) {
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d01a      	beq.n	80017dc <Keypad_loop+0x104>
						delay();
 80017a6:	f7ff feb1 	bl	800150c <delay>
						print_display(keypad_symbols[i*4+2]);
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	3302      	adds	r3, #2
 80017b0:	4a2c      	ldr	r2, [pc, #176]	; (8001864 <Keypad_loop+0x18c>)
 80017b2:	5cd3      	ldrb	r3, [r2, r3]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fc24 	bl	8001002 <print_display>
						data[n_chars] = keypad_symbols[i*4+2];
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	3302      	adds	r3, #2
 80017c0:	4a29      	ldr	r2, [pc, #164]	; (8001868 <Keypad_loop+0x190>)
 80017c2:	7812      	ldrb	r2, [r2, #0]
 80017c4:	4611      	mov	r1, r2
 80017c6:	4a27      	ldr	r2, [pc, #156]	; (8001864 <Keypad_loop+0x18c>)
 80017c8:	5cd2      	ldrb	r2, [r2, r3]
 80017ca:	4b28      	ldr	r3, [pc, #160]	; (800186c <Keypad_loop+0x194>)
 80017cc:	545a      	strb	r2, [r3, r1]
						++n_chars;
 80017ce:	4b26      	ldr	r3, [pc, #152]	; (8001868 <Keypad_loop+0x190>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	3301      	adds	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b24      	ldr	r3, [pc, #144]	; (8001868 <Keypad_loop+0x190>)
 80017d8:	701a      	strb	r2, [r3, #0]
 80017da:	e007      	b.n	80017ec <Keypad_loop+0x114>
					}
					else {
						Display_clear();
 80017dc:	f7ff fbf8 	bl	8000fd0 <Display_clear>
						Display_Write_Ins(GO_TO_START_FIRST_LINE);
 80017e0:	2080      	movs	r0, #128	; 0x80
 80017e2:	f7ff fa7d 	bl	8000ce0 <Display_Write_Ins>
						n_chars = 0;
 80017e6:	4b20      	ldr	r3, [pc, #128]	; (8001868 <Keypad_loop+0x190>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
					}
				}

				//check C4 of Ri is low or high
				if(!(*pInPutDataReg & ( 1 << 11))) {
 80017ec:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <Keypad_loop+0x188>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d122      	bne.n	800183e <Keypad_loop+0x166>
					//key is pressed
					if (i != 3) {
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b03      	cmp	r3, #3
 80017fc:	d01a      	beq.n	8001834 <Keypad_loop+0x15c>
						delay();
 80017fe:	f7ff fe85 	bl	800150c <delay>
						print_display(keypad_symbols[i*4+3]);
 8001802:	79fb      	ldrb	r3, [r7, #7]
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	3303      	adds	r3, #3
 8001808:	4a16      	ldr	r2, [pc, #88]	; (8001864 <Keypad_loop+0x18c>)
 800180a:	5cd3      	ldrb	r3, [r2, r3]
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fbf8 	bl	8001002 <print_display>
						data[n_chars] = keypad_symbols[i*4+3];
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	3303      	adds	r3, #3
 8001818:	4a13      	ldr	r2, [pc, #76]	; (8001868 <Keypad_loop+0x190>)
 800181a:	7812      	ldrb	r2, [r2, #0]
 800181c:	4611      	mov	r1, r2
 800181e:	4a11      	ldr	r2, [pc, #68]	; (8001864 <Keypad_loop+0x18c>)
 8001820:	5cd2      	ldrb	r2, [r2, r3]
 8001822:	4b12      	ldr	r3, [pc, #72]	; (800186c <Keypad_loop+0x194>)
 8001824:	545a      	strb	r2, [r3, r1]
						++n_chars;
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <Keypad_loop+0x190>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	3301      	adds	r3, #1
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <Keypad_loop+0x190>)
 8001830:	701a      	strb	r2, [r3, #0]
 8001832:	e004      	b.n	800183e <Keypad_loop+0x166>
					}
					else {
						Display_Write_Ins(GO_TO_START_SECOND_LINE);
 8001834:	20c0      	movs	r0, #192	; 0xc0
 8001836:	f7ff fa53 	bl	8000ce0 <Display_Write_Ins>
						convert_hex_to_bin();
 800183a:	f7ff feaf 	bl	800159c <convert_hex_to_bin>
					}
				}
				delay();
 800183e:	f7ff fe65 	bl	800150c <delay>
			for (uint8_t i=0; i<4; ++i) {
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	3301      	adds	r3, #1
 8001846:	71fb      	strb	r3, [r7, #7]
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	2b03      	cmp	r3, #3
 800184c:	f67f af4a 	bls.w	80016e4 <Keypad_loop+0xc>
			}
}
 8001850:	bf00      	nop
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40020c14 	.word	0x40020c14
 8001860:	40020c10 	.word	0x40020c10
 8001864:	20000010 	.word	0x20000010
 8001868:	200001b0 	.word	0x200001b0
 800186c:	200002d4 	.word	0x200002d4

08001870 <main>:
#include <stdint.h>
#include <stdio.h>


int main(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0

//  setup_clock();
//  setup_LED(LED_PORT, LED_PINS);
  setup_GPIO_for_keypad();
 8001874:	f7ff fe60 	bl	8001538 <setup_GPIO_for_keypad>

  Display_example();
 8001878:	f7ff fbe9 	bl	800104e <Display_example>
  delay();
 800187c:	f7ff fe46 	bl	800150c <delay>

  setup_Display();
 8001880:	f7ff fbb0 	bl	8000fe4 <setup_Display>
  setup_first_line();
 8001884:	f7ff fbb6 	bl	8000ff4 <setup_first_line>

//	  	 if (n_chars == 15) {
//	  		 setup_second_line();
//	  	 }

	    Keypad_loop();
 8001888:	f7ff ff26 	bl	80016d8 <Keypad_loop>
  {
 800188c:	e7fc      	b.n	8001888 <main+0x18>
	...

08001890 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001890:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001894:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001896:	e003      	b.n	80018a0 <LoopCopyDataInit>

08001898 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800189a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800189c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800189e:	3104      	adds	r1, #4

080018a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018a2:	4b0c      	ldr	r3, [pc, #48]	; (80018d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018a8:	d3f6      	bcc.n	8001898 <CopyDataInit>
  ldr  r2, =_sbss
 80018aa:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018ac:	e002      	b.n	80018b4 <LoopFillZerobss>

080018ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018b0:	f842 3b04 	str.w	r3, [r2], #4

080018b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018b8:	d3f9      	bcc.n	80018ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ba:	f000 f841 	bl	8001940 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018be:	f000 f8f1 	bl	8001aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c2:	f7ff ffd5 	bl	8001870 <main>
  bx  lr    
 80018c6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018cc:	08002450 	.word	0x08002450
  ldr  r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018d4:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80018d8:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 80018dc:	20000314 	.word	0x20000314

080018e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e0:	e7fe      	b.n	80018e0 <ADC_IRQHandler>

080018e2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <HardFault_Handler+0x4>

080018f6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80018fa:	e7fe      	b.n	80018fa <MemManage_Handler+0x4>

080018fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001900:	e7fe      	b.n	8001900 <BusFault_Handler+0x4>

08001902 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001902:	b480      	push	{r7}
 8001904:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001906:	e7fe      	b.n	8001906 <UsageFault_Handler+0x4>

08001908 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr

08001916 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001916:	b480      	push	{r7}
 8001918:	af00      	add	r7, sp, #0
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001944:	4b16      	ldr	r3, [pc, #88]	; (80019a0 <SystemInit+0x60>)
 8001946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800194a:	4a15      	ldr	r2, [pc, #84]	; (80019a0 <SystemInit+0x60>)
 800194c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001950:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001954:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <SystemInit+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a12      	ldr	r2, [pc, #72]	; (80019a4 <SystemInit+0x64>)
 800195a:	f043 0301 	orr.w	r3, r3, #1
 800195e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001960:	4b10      	ldr	r3, [pc, #64]	; (80019a4 <SystemInit+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001966:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <SystemInit+0x64>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <SystemInit+0x64>)
 800196c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001974:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <SystemInit+0x64>)
 8001978:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <SystemInit+0x68>)
 800197a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <SystemInit+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <SystemInit+0x64>)
 8001982:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001986:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <SystemInit+0x64>)
 800198a:	2200      	movs	r2, #0
 800198c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800198e:	f000 f80d 	bl	80019ac <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001992:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <SystemInit+0x60>)
 8001994:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001998:	609a      	str	r2, [r3, #8]
#endif
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	40023800 	.word	0x40023800
 80019a8:	24003010 	.word	0x24003010

080019ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80019ba:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <SetSysClock+0xe8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a35      	ldr	r2, [pc, #212]	; (8001a94 <SetSysClock+0xe8>)
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80019c6:	4b33      	ldr	r3, [pc, #204]	; (8001a94 <SetSysClock+0xe8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3301      	adds	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d103      	bne.n	80019e4 <SetSysClock+0x38>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80019e2:	d1f0      	bne.n	80019c6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80019e4:	4b2b      	ldr	r3, [pc, #172]	; (8001a94 <SetSysClock+0xe8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d002      	beq.n	80019f6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80019f0:	2301      	movs	r3, #1
 80019f2:	603b      	str	r3, [r7, #0]
 80019f4:	e001      	b.n	80019fa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d142      	bne.n	8001a86 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001a00:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <SetSysClock+0xe8>)
 8001a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <SetSysClock+0xe8>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <SetSysClock+0xec>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a21      	ldr	r2, [pc, #132]	; (8001a98 <SetSysClock+0xec>)
 8001a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a16:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <SetSysClock+0xe8>)
 8001a1a:	4a1e      	ldr	r2, [pc, #120]	; (8001a94 <SetSysClock+0xe8>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	; (8001a94 <SetSysClock+0xe8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a1b      	ldr	r2, [pc, #108]	; (8001a94 <SetSysClock+0xe8>)
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001a2c:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <SetSysClock+0xe8>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <SetSysClock+0xe8>)
 8001a32:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001a36:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001a38:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <SetSysClock+0xe8>)
 8001a3a:	4a18      	ldr	r2, [pc, #96]	; (8001a9c <SetSysClock+0xf0>)
 8001a3c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <SetSysClock+0xe8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <SetSysClock+0xe8>)
 8001a44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a48:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001a4a:	bf00      	nop
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <SetSysClock+0xe8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f9      	beq.n	8001a4c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <SetSysClock+0xf4>)
 8001a5a:	f240 7205 	movw	r2, #1797	; 0x705
 8001a5e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <SetSysClock+0xe8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	4a0b      	ldr	r2, [pc, #44]	; (8001a94 <SetSysClock+0xe8>)
 8001a66:	f023 0303 	bic.w	r3, r3, #3
 8001a6a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <SetSysClock+0xe8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <SetSysClock+0xe8>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001a78:	bf00      	nop
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <SetSysClock+0xe8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d1f9      	bne.n	8001a7a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	40007000 	.word	0x40007000
 8001a9c:	07405419 	.word	0x07405419
 8001aa0:	40023c00 	.word	0x40023c00

08001aa4 <__libc_init_array>:
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	4d0d      	ldr	r5, [pc, #52]	; (8001adc <__libc_init_array+0x38>)
 8001aa8:	4c0d      	ldr	r4, [pc, #52]	; (8001ae0 <__libc_init_array+0x3c>)
 8001aaa:	1b64      	subs	r4, r4, r5
 8001aac:	10a4      	asrs	r4, r4, #2
 8001aae:	2600      	movs	r6, #0
 8001ab0:	42a6      	cmp	r6, r4
 8001ab2:	d109      	bne.n	8001ac8 <__libc_init_array+0x24>
 8001ab4:	4d0b      	ldr	r5, [pc, #44]	; (8001ae4 <__libc_init_array+0x40>)
 8001ab6:	4c0c      	ldr	r4, [pc, #48]	; (8001ae8 <__libc_init_array+0x44>)
 8001ab8:	f000 fc5c 	bl	8002374 <_init>
 8001abc:	1b64      	subs	r4, r4, r5
 8001abe:	10a4      	asrs	r4, r4, #2
 8001ac0:	2600      	movs	r6, #0
 8001ac2:	42a6      	cmp	r6, r4
 8001ac4:	d105      	bne.n	8001ad2 <__libc_init_array+0x2e>
 8001ac6:	bd70      	pop	{r4, r5, r6, pc}
 8001ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001acc:	4798      	blx	r3
 8001ace:	3601      	adds	r6, #1
 8001ad0:	e7ee      	b.n	8001ab0 <__libc_init_array+0xc>
 8001ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad6:	4798      	blx	r3
 8001ad8:	3601      	adds	r6, #1
 8001ada:	e7f2      	b.n	8001ac2 <__libc_init_array+0x1e>
 8001adc:	08002448 	.word	0x08002448
 8001ae0:	08002448 	.word	0x08002448
 8001ae4:	08002448 	.word	0x08002448
 8001ae8:	0800244c 	.word	0x0800244c

08001aec <memset>:
 8001aec:	4402      	add	r2, r0
 8001aee:	4603      	mov	r3, r0
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d100      	bne.n	8001af6 <memset+0xa>
 8001af4:	4770      	bx	lr
 8001af6:	f803 1b01 	strb.w	r1, [r3], #1
 8001afa:	e7f9      	b.n	8001af0 <memset+0x4>

08001afc <_vsiprintf_r>:
 8001afc:	b500      	push	{lr}
 8001afe:	b09b      	sub	sp, #108	; 0x6c
 8001b00:	9100      	str	r1, [sp, #0]
 8001b02:	9104      	str	r1, [sp, #16]
 8001b04:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b08:	9105      	str	r1, [sp, #20]
 8001b0a:	9102      	str	r1, [sp, #8]
 8001b0c:	4905      	ldr	r1, [pc, #20]	; (8001b24 <_vsiprintf_r+0x28>)
 8001b0e:	9103      	str	r1, [sp, #12]
 8001b10:	4669      	mov	r1, sp
 8001b12:	f000 f86f 	bl	8001bf4 <_svfiprintf_r>
 8001b16:	9b00      	ldr	r3, [sp, #0]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
 8001b1c:	b01b      	add	sp, #108	; 0x6c
 8001b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b22:	bf00      	nop
 8001b24:	ffff0208 	.word	0xffff0208

08001b28 <vsiprintf>:
 8001b28:	4613      	mov	r3, r2
 8001b2a:	460a      	mov	r2, r1
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	4802      	ldr	r0, [pc, #8]	; (8001b38 <vsiprintf+0x10>)
 8001b30:	6800      	ldr	r0, [r0, #0]
 8001b32:	f7ff bfe3 	b.w	8001afc <_vsiprintf_r>
 8001b36:	bf00      	nop
 8001b38:	20000020 	.word	0x20000020

08001b3c <__ssputs_r>:
 8001b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b40:	688e      	ldr	r6, [r1, #8]
 8001b42:	429e      	cmp	r6, r3
 8001b44:	4682      	mov	sl, r0
 8001b46:	460c      	mov	r4, r1
 8001b48:	4690      	mov	r8, r2
 8001b4a:	461f      	mov	r7, r3
 8001b4c:	d838      	bhi.n	8001bc0 <__ssputs_r+0x84>
 8001b4e:	898a      	ldrh	r2, [r1, #12]
 8001b50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001b54:	d032      	beq.n	8001bbc <__ssputs_r+0x80>
 8001b56:	6825      	ldr	r5, [r4, #0]
 8001b58:	6909      	ldr	r1, [r1, #16]
 8001b5a:	eba5 0901 	sub.w	r9, r5, r1
 8001b5e:	6965      	ldr	r5, [r4, #20]
 8001b60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001b64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001b68:	3301      	adds	r3, #1
 8001b6a:	444b      	add	r3, r9
 8001b6c:	106d      	asrs	r5, r5, #1
 8001b6e:	429d      	cmp	r5, r3
 8001b70:	bf38      	it	cc
 8001b72:	461d      	movcc	r5, r3
 8001b74:	0553      	lsls	r3, r2, #21
 8001b76:	d531      	bpl.n	8001bdc <__ssputs_r+0xa0>
 8001b78:	4629      	mov	r1, r5
 8001b7a:	f000 fb47 	bl	800220c <_malloc_r>
 8001b7e:	4606      	mov	r6, r0
 8001b80:	b950      	cbnz	r0, 8001b98 <__ssputs_r+0x5c>
 8001b82:	230c      	movs	r3, #12
 8001b84:	f8ca 3000 	str.w	r3, [sl]
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b8e:	81a3      	strh	r3, [r4, #12]
 8001b90:	f04f 30ff 	mov.w	r0, #4294967295
 8001b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b98:	6921      	ldr	r1, [r4, #16]
 8001b9a:	464a      	mov	r2, r9
 8001b9c:	f000 fabe 	bl	800211c <memcpy>
 8001ba0:	89a3      	ldrh	r3, [r4, #12]
 8001ba2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001baa:	81a3      	strh	r3, [r4, #12]
 8001bac:	6126      	str	r6, [r4, #16]
 8001bae:	6165      	str	r5, [r4, #20]
 8001bb0:	444e      	add	r6, r9
 8001bb2:	eba5 0509 	sub.w	r5, r5, r9
 8001bb6:	6026      	str	r6, [r4, #0]
 8001bb8:	60a5      	str	r5, [r4, #8]
 8001bba:	463e      	mov	r6, r7
 8001bbc:	42be      	cmp	r6, r7
 8001bbe:	d900      	bls.n	8001bc2 <__ssputs_r+0x86>
 8001bc0:	463e      	mov	r6, r7
 8001bc2:	4632      	mov	r2, r6
 8001bc4:	6820      	ldr	r0, [r4, #0]
 8001bc6:	4641      	mov	r1, r8
 8001bc8:	f000 fab6 	bl	8002138 <memmove>
 8001bcc:	68a3      	ldr	r3, [r4, #8]
 8001bce:	6822      	ldr	r2, [r4, #0]
 8001bd0:	1b9b      	subs	r3, r3, r6
 8001bd2:	4432      	add	r2, r6
 8001bd4:	60a3      	str	r3, [r4, #8]
 8001bd6:	6022      	str	r2, [r4, #0]
 8001bd8:	2000      	movs	r0, #0
 8001bda:	e7db      	b.n	8001b94 <__ssputs_r+0x58>
 8001bdc:	462a      	mov	r2, r5
 8001bde:	f000 fb6f 	bl	80022c0 <_realloc_r>
 8001be2:	4606      	mov	r6, r0
 8001be4:	2800      	cmp	r0, #0
 8001be6:	d1e1      	bne.n	8001bac <__ssputs_r+0x70>
 8001be8:	6921      	ldr	r1, [r4, #16]
 8001bea:	4650      	mov	r0, sl
 8001bec:	f000 fabe 	bl	800216c <_free_r>
 8001bf0:	e7c7      	b.n	8001b82 <__ssputs_r+0x46>
	...

08001bf4 <_svfiprintf_r>:
 8001bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bf8:	4698      	mov	r8, r3
 8001bfa:	898b      	ldrh	r3, [r1, #12]
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	b09d      	sub	sp, #116	; 0x74
 8001c00:	4607      	mov	r7, r0
 8001c02:	460d      	mov	r5, r1
 8001c04:	4614      	mov	r4, r2
 8001c06:	d50e      	bpl.n	8001c26 <_svfiprintf_r+0x32>
 8001c08:	690b      	ldr	r3, [r1, #16]
 8001c0a:	b963      	cbnz	r3, 8001c26 <_svfiprintf_r+0x32>
 8001c0c:	2140      	movs	r1, #64	; 0x40
 8001c0e:	f000 fafd 	bl	800220c <_malloc_r>
 8001c12:	6028      	str	r0, [r5, #0]
 8001c14:	6128      	str	r0, [r5, #16]
 8001c16:	b920      	cbnz	r0, 8001c22 <_svfiprintf_r+0x2e>
 8001c18:	230c      	movs	r3, #12
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c20:	e0d1      	b.n	8001dc6 <_svfiprintf_r+0x1d2>
 8001c22:	2340      	movs	r3, #64	; 0x40
 8001c24:	616b      	str	r3, [r5, #20]
 8001c26:	2300      	movs	r3, #0
 8001c28:	9309      	str	r3, [sp, #36]	; 0x24
 8001c2a:	2320      	movs	r3, #32
 8001c2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001c30:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c34:	2330      	movs	r3, #48	; 0x30
 8001c36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001de0 <_svfiprintf_r+0x1ec>
 8001c3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001c3e:	f04f 0901 	mov.w	r9, #1
 8001c42:	4623      	mov	r3, r4
 8001c44:	469a      	mov	sl, r3
 8001c46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c4a:	b10a      	cbz	r2, 8001c50 <_svfiprintf_r+0x5c>
 8001c4c:	2a25      	cmp	r2, #37	; 0x25
 8001c4e:	d1f9      	bne.n	8001c44 <_svfiprintf_r+0x50>
 8001c50:	ebba 0b04 	subs.w	fp, sl, r4
 8001c54:	d00b      	beq.n	8001c6e <_svfiprintf_r+0x7a>
 8001c56:	465b      	mov	r3, fp
 8001c58:	4622      	mov	r2, r4
 8001c5a:	4629      	mov	r1, r5
 8001c5c:	4638      	mov	r0, r7
 8001c5e:	f7ff ff6d 	bl	8001b3c <__ssputs_r>
 8001c62:	3001      	adds	r0, #1
 8001c64:	f000 80aa 	beq.w	8001dbc <_svfiprintf_r+0x1c8>
 8001c68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c6a:	445a      	add	r2, fp
 8001c6c:	9209      	str	r2, [sp, #36]	; 0x24
 8001c6e:	f89a 3000 	ldrb.w	r3, [sl]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80a2 	beq.w	8001dbc <_svfiprintf_r+0x1c8>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c82:	f10a 0a01 	add.w	sl, sl, #1
 8001c86:	9304      	str	r3, [sp, #16]
 8001c88:	9307      	str	r3, [sp, #28]
 8001c8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001c8e:	931a      	str	r3, [sp, #104]	; 0x68
 8001c90:	4654      	mov	r4, sl
 8001c92:	2205      	movs	r2, #5
 8001c94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c98:	4851      	ldr	r0, [pc, #324]	; (8001de0 <_svfiprintf_r+0x1ec>)
 8001c9a:	f7fe faa1 	bl	80001e0 <memchr>
 8001c9e:	9a04      	ldr	r2, [sp, #16]
 8001ca0:	b9d8      	cbnz	r0, 8001cda <_svfiprintf_r+0xe6>
 8001ca2:	06d0      	lsls	r0, r2, #27
 8001ca4:	bf44      	itt	mi
 8001ca6:	2320      	movmi	r3, #32
 8001ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cac:	0711      	lsls	r1, r2, #28
 8001cae:	bf44      	itt	mi
 8001cb0:	232b      	movmi	r3, #43	; 0x2b
 8001cb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8001cba:	2b2a      	cmp	r3, #42	; 0x2a
 8001cbc:	d015      	beq.n	8001cea <_svfiprintf_r+0xf6>
 8001cbe:	9a07      	ldr	r2, [sp, #28]
 8001cc0:	4654      	mov	r4, sl
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	f04f 0c0a 	mov.w	ip, #10
 8001cc8:	4621      	mov	r1, r4
 8001cca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cce:	3b30      	subs	r3, #48	; 0x30
 8001cd0:	2b09      	cmp	r3, #9
 8001cd2:	d94e      	bls.n	8001d72 <_svfiprintf_r+0x17e>
 8001cd4:	b1b0      	cbz	r0, 8001d04 <_svfiprintf_r+0x110>
 8001cd6:	9207      	str	r2, [sp, #28]
 8001cd8:	e014      	b.n	8001d04 <_svfiprintf_r+0x110>
 8001cda:	eba0 0308 	sub.w	r3, r0, r8
 8001cde:	fa09 f303 	lsl.w	r3, r9, r3
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	9304      	str	r3, [sp, #16]
 8001ce6:	46a2      	mov	sl, r4
 8001ce8:	e7d2      	b.n	8001c90 <_svfiprintf_r+0x9c>
 8001cea:	9b03      	ldr	r3, [sp, #12]
 8001cec:	1d19      	adds	r1, r3, #4
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	9103      	str	r1, [sp, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	bfbb      	ittet	lt
 8001cf6:	425b      	neglt	r3, r3
 8001cf8:	f042 0202 	orrlt.w	r2, r2, #2
 8001cfc:	9307      	strge	r3, [sp, #28]
 8001cfe:	9307      	strlt	r3, [sp, #28]
 8001d00:	bfb8      	it	lt
 8001d02:	9204      	strlt	r2, [sp, #16]
 8001d04:	7823      	ldrb	r3, [r4, #0]
 8001d06:	2b2e      	cmp	r3, #46	; 0x2e
 8001d08:	d10c      	bne.n	8001d24 <_svfiprintf_r+0x130>
 8001d0a:	7863      	ldrb	r3, [r4, #1]
 8001d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8001d0e:	d135      	bne.n	8001d7c <_svfiprintf_r+0x188>
 8001d10:	9b03      	ldr	r3, [sp, #12]
 8001d12:	1d1a      	adds	r2, r3, #4
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	9203      	str	r2, [sp, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	bfb8      	it	lt
 8001d1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d20:	3402      	adds	r4, #2
 8001d22:	9305      	str	r3, [sp, #20]
 8001d24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8001df0 <_svfiprintf_r+0x1fc>
 8001d28:	7821      	ldrb	r1, [r4, #0]
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	4650      	mov	r0, sl
 8001d2e:	f7fe fa57 	bl	80001e0 <memchr>
 8001d32:	b140      	cbz	r0, 8001d46 <_svfiprintf_r+0x152>
 8001d34:	2340      	movs	r3, #64	; 0x40
 8001d36:	eba0 000a 	sub.w	r0, r0, sl
 8001d3a:	fa03 f000 	lsl.w	r0, r3, r0
 8001d3e:	9b04      	ldr	r3, [sp, #16]
 8001d40:	4303      	orrs	r3, r0
 8001d42:	3401      	adds	r4, #1
 8001d44:	9304      	str	r3, [sp, #16]
 8001d46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d4a:	4826      	ldr	r0, [pc, #152]	; (8001de4 <_svfiprintf_r+0x1f0>)
 8001d4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001d50:	2206      	movs	r2, #6
 8001d52:	f7fe fa45 	bl	80001e0 <memchr>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	d038      	beq.n	8001dcc <_svfiprintf_r+0x1d8>
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <_svfiprintf_r+0x1f4>)
 8001d5c:	bb1b      	cbnz	r3, 8001da6 <_svfiprintf_r+0x1b2>
 8001d5e:	9b03      	ldr	r3, [sp, #12]
 8001d60:	3307      	adds	r3, #7
 8001d62:	f023 0307 	bic.w	r3, r3, #7
 8001d66:	3308      	adds	r3, #8
 8001d68:	9303      	str	r3, [sp, #12]
 8001d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001d6c:	4433      	add	r3, r6
 8001d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d70:	e767      	b.n	8001c42 <_svfiprintf_r+0x4e>
 8001d72:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d76:	460c      	mov	r4, r1
 8001d78:	2001      	movs	r0, #1
 8001d7a:	e7a5      	b.n	8001cc8 <_svfiprintf_r+0xd4>
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	3401      	adds	r4, #1
 8001d80:	9305      	str	r3, [sp, #20]
 8001d82:	4619      	mov	r1, r3
 8001d84:	f04f 0c0a 	mov.w	ip, #10
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d8e:	3a30      	subs	r2, #48	; 0x30
 8001d90:	2a09      	cmp	r2, #9
 8001d92:	d903      	bls.n	8001d9c <_svfiprintf_r+0x1a8>
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0c5      	beq.n	8001d24 <_svfiprintf_r+0x130>
 8001d98:	9105      	str	r1, [sp, #20]
 8001d9a:	e7c3      	b.n	8001d24 <_svfiprintf_r+0x130>
 8001d9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001da0:	4604      	mov	r4, r0
 8001da2:	2301      	movs	r3, #1
 8001da4:	e7f0      	b.n	8001d88 <_svfiprintf_r+0x194>
 8001da6:	ab03      	add	r3, sp, #12
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	462a      	mov	r2, r5
 8001dac:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <_svfiprintf_r+0x1f8>)
 8001dae:	a904      	add	r1, sp, #16
 8001db0:	4638      	mov	r0, r7
 8001db2:	f3af 8000 	nop.w
 8001db6:	1c42      	adds	r2, r0, #1
 8001db8:	4606      	mov	r6, r0
 8001dba:	d1d6      	bne.n	8001d6a <_svfiprintf_r+0x176>
 8001dbc:	89ab      	ldrh	r3, [r5, #12]
 8001dbe:	065b      	lsls	r3, r3, #25
 8001dc0:	f53f af2c 	bmi.w	8001c1c <_svfiprintf_r+0x28>
 8001dc4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001dc6:	b01d      	add	sp, #116	; 0x74
 8001dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dcc:	ab03      	add	r3, sp, #12
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	462a      	mov	r2, r5
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <_svfiprintf_r+0x1f8>)
 8001dd4:	a904      	add	r1, sp, #16
 8001dd6:	4638      	mov	r0, r7
 8001dd8:	f000 f87a 	bl	8001ed0 <_printf_i>
 8001ddc:	e7eb      	b.n	8001db6 <_svfiprintf_r+0x1c2>
 8001dde:	bf00      	nop
 8001de0:	08002415 	.word	0x08002415
 8001de4:	0800241f 	.word	0x0800241f
 8001de8:	00000000 	.word	0x00000000
 8001dec:	08001b3d 	.word	0x08001b3d
 8001df0:	0800241b 	.word	0x0800241b

08001df4 <_printf_common>:
 8001df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001df8:	4616      	mov	r6, r2
 8001dfa:	4699      	mov	r9, r3
 8001dfc:	688a      	ldr	r2, [r1, #8]
 8001dfe:	690b      	ldr	r3, [r1, #16]
 8001e00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e04:	4293      	cmp	r3, r2
 8001e06:	bfb8      	it	lt
 8001e08:	4613      	movlt	r3, r2
 8001e0a:	6033      	str	r3, [r6, #0]
 8001e0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e10:	4607      	mov	r7, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	b10a      	cbz	r2, 8001e1a <_printf_common+0x26>
 8001e16:	3301      	adds	r3, #1
 8001e18:	6033      	str	r3, [r6, #0]
 8001e1a:	6823      	ldr	r3, [r4, #0]
 8001e1c:	0699      	lsls	r1, r3, #26
 8001e1e:	bf42      	ittt	mi
 8001e20:	6833      	ldrmi	r3, [r6, #0]
 8001e22:	3302      	addmi	r3, #2
 8001e24:	6033      	strmi	r3, [r6, #0]
 8001e26:	6825      	ldr	r5, [r4, #0]
 8001e28:	f015 0506 	ands.w	r5, r5, #6
 8001e2c:	d106      	bne.n	8001e3c <_printf_common+0x48>
 8001e2e:	f104 0a19 	add.w	sl, r4, #25
 8001e32:	68e3      	ldr	r3, [r4, #12]
 8001e34:	6832      	ldr	r2, [r6, #0]
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	42ab      	cmp	r3, r5
 8001e3a:	dc26      	bgt.n	8001e8a <_printf_common+0x96>
 8001e3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001e40:	1e13      	subs	r3, r2, #0
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	bf18      	it	ne
 8001e46:	2301      	movne	r3, #1
 8001e48:	0692      	lsls	r2, r2, #26
 8001e4a:	d42b      	bmi.n	8001ea4 <_printf_common+0xb0>
 8001e4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001e50:	4649      	mov	r1, r9
 8001e52:	4638      	mov	r0, r7
 8001e54:	47c0      	blx	r8
 8001e56:	3001      	adds	r0, #1
 8001e58:	d01e      	beq.n	8001e98 <_printf_common+0xa4>
 8001e5a:	6823      	ldr	r3, [r4, #0]
 8001e5c:	68e5      	ldr	r5, [r4, #12]
 8001e5e:	6832      	ldr	r2, [r6, #0]
 8001e60:	f003 0306 	and.w	r3, r3, #6
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	bf08      	it	eq
 8001e68:	1aad      	subeq	r5, r5, r2
 8001e6a:	68a3      	ldr	r3, [r4, #8]
 8001e6c:	6922      	ldr	r2, [r4, #16]
 8001e6e:	bf0c      	ite	eq
 8001e70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e74:	2500      	movne	r5, #0
 8001e76:	4293      	cmp	r3, r2
 8001e78:	bfc4      	itt	gt
 8001e7a:	1a9b      	subgt	r3, r3, r2
 8001e7c:	18ed      	addgt	r5, r5, r3
 8001e7e:	2600      	movs	r6, #0
 8001e80:	341a      	adds	r4, #26
 8001e82:	42b5      	cmp	r5, r6
 8001e84:	d11a      	bne.n	8001ebc <_printf_common+0xc8>
 8001e86:	2000      	movs	r0, #0
 8001e88:	e008      	b.n	8001e9c <_printf_common+0xa8>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	4652      	mov	r2, sl
 8001e8e:	4649      	mov	r1, r9
 8001e90:	4638      	mov	r0, r7
 8001e92:	47c0      	blx	r8
 8001e94:	3001      	adds	r0, #1
 8001e96:	d103      	bne.n	8001ea0 <_printf_common+0xac>
 8001e98:	f04f 30ff 	mov.w	r0, #4294967295
 8001e9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ea0:	3501      	adds	r5, #1
 8001ea2:	e7c6      	b.n	8001e32 <_printf_common+0x3e>
 8001ea4:	18e1      	adds	r1, r4, r3
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	2030      	movs	r0, #48	; 0x30
 8001eaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001eae:	4422      	add	r2, r4
 8001eb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001eb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001eb8:	3302      	adds	r3, #2
 8001eba:	e7c7      	b.n	8001e4c <_printf_common+0x58>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	4622      	mov	r2, r4
 8001ec0:	4649      	mov	r1, r9
 8001ec2:	4638      	mov	r0, r7
 8001ec4:	47c0      	blx	r8
 8001ec6:	3001      	adds	r0, #1
 8001ec8:	d0e6      	beq.n	8001e98 <_printf_common+0xa4>
 8001eca:	3601      	adds	r6, #1
 8001ecc:	e7d9      	b.n	8001e82 <_printf_common+0x8e>
	...

08001ed0 <_printf_i>:
 8001ed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed4:	460c      	mov	r4, r1
 8001ed6:	4691      	mov	r9, r2
 8001ed8:	7e27      	ldrb	r7, [r4, #24]
 8001eda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001edc:	2f78      	cmp	r7, #120	; 0x78
 8001ede:	4680      	mov	r8, r0
 8001ee0:	469a      	mov	sl, r3
 8001ee2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ee6:	d807      	bhi.n	8001ef8 <_printf_i+0x28>
 8001ee8:	2f62      	cmp	r7, #98	; 0x62
 8001eea:	d80a      	bhi.n	8001f02 <_printf_i+0x32>
 8001eec:	2f00      	cmp	r7, #0
 8001eee:	f000 80d8 	beq.w	80020a2 <_printf_i+0x1d2>
 8001ef2:	2f58      	cmp	r7, #88	; 0x58
 8001ef4:	f000 80a3 	beq.w	800203e <_printf_i+0x16e>
 8001ef8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001efc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001f00:	e03a      	b.n	8001f78 <_printf_i+0xa8>
 8001f02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001f06:	2b15      	cmp	r3, #21
 8001f08:	d8f6      	bhi.n	8001ef8 <_printf_i+0x28>
 8001f0a:	a001      	add	r0, pc, #4	; (adr r0, 8001f10 <_printf_i+0x40>)
 8001f0c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001f10:	08001f69 	.word	0x08001f69
 8001f14:	08001f7d 	.word	0x08001f7d
 8001f18:	08001ef9 	.word	0x08001ef9
 8001f1c:	08001ef9 	.word	0x08001ef9
 8001f20:	08001ef9 	.word	0x08001ef9
 8001f24:	08001ef9 	.word	0x08001ef9
 8001f28:	08001f7d 	.word	0x08001f7d
 8001f2c:	08001ef9 	.word	0x08001ef9
 8001f30:	08001ef9 	.word	0x08001ef9
 8001f34:	08001ef9 	.word	0x08001ef9
 8001f38:	08001ef9 	.word	0x08001ef9
 8001f3c:	08002089 	.word	0x08002089
 8001f40:	08001fad 	.word	0x08001fad
 8001f44:	0800206b 	.word	0x0800206b
 8001f48:	08001ef9 	.word	0x08001ef9
 8001f4c:	08001ef9 	.word	0x08001ef9
 8001f50:	080020ab 	.word	0x080020ab
 8001f54:	08001ef9 	.word	0x08001ef9
 8001f58:	08001fad 	.word	0x08001fad
 8001f5c:	08001ef9 	.word	0x08001ef9
 8001f60:	08001ef9 	.word	0x08001ef9
 8001f64:	08002073 	.word	0x08002073
 8001f68:	680b      	ldr	r3, [r1, #0]
 8001f6a:	1d1a      	adds	r2, r3, #4
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	600a      	str	r2, [r1, #0]
 8001f70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001f74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e0a3      	b.n	80020c4 <_printf_i+0x1f4>
 8001f7c:	6825      	ldr	r5, [r4, #0]
 8001f7e:	6808      	ldr	r0, [r1, #0]
 8001f80:	062e      	lsls	r6, r5, #24
 8001f82:	f100 0304 	add.w	r3, r0, #4
 8001f86:	d50a      	bpl.n	8001f9e <_printf_i+0xce>
 8001f88:	6805      	ldr	r5, [r0, #0]
 8001f8a:	600b      	str	r3, [r1, #0]
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	da03      	bge.n	8001f98 <_printf_i+0xc8>
 8001f90:	232d      	movs	r3, #45	; 0x2d
 8001f92:	426d      	negs	r5, r5
 8001f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001f98:	485e      	ldr	r0, [pc, #376]	; (8002114 <_printf_i+0x244>)
 8001f9a:	230a      	movs	r3, #10
 8001f9c:	e019      	b.n	8001fd2 <_printf_i+0x102>
 8001f9e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001fa2:	6805      	ldr	r5, [r0, #0]
 8001fa4:	600b      	str	r3, [r1, #0]
 8001fa6:	bf18      	it	ne
 8001fa8:	b22d      	sxthne	r5, r5
 8001faa:	e7ef      	b.n	8001f8c <_printf_i+0xbc>
 8001fac:	680b      	ldr	r3, [r1, #0]
 8001fae:	6825      	ldr	r5, [r4, #0]
 8001fb0:	1d18      	adds	r0, r3, #4
 8001fb2:	6008      	str	r0, [r1, #0]
 8001fb4:	0628      	lsls	r0, r5, #24
 8001fb6:	d501      	bpl.n	8001fbc <_printf_i+0xec>
 8001fb8:	681d      	ldr	r5, [r3, #0]
 8001fba:	e002      	b.n	8001fc2 <_printf_i+0xf2>
 8001fbc:	0669      	lsls	r1, r5, #25
 8001fbe:	d5fb      	bpl.n	8001fb8 <_printf_i+0xe8>
 8001fc0:	881d      	ldrh	r5, [r3, #0]
 8001fc2:	4854      	ldr	r0, [pc, #336]	; (8002114 <_printf_i+0x244>)
 8001fc4:	2f6f      	cmp	r7, #111	; 0x6f
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2308      	moveq	r3, #8
 8001fca:	230a      	movne	r3, #10
 8001fcc:	2100      	movs	r1, #0
 8001fce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001fd2:	6866      	ldr	r6, [r4, #4]
 8001fd4:	60a6      	str	r6, [r4, #8]
 8001fd6:	2e00      	cmp	r6, #0
 8001fd8:	bfa2      	ittt	ge
 8001fda:	6821      	ldrge	r1, [r4, #0]
 8001fdc:	f021 0104 	bicge.w	r1, r1, #4
 8001fe0:	6021      	strge	r1, [r4, #0]
 8001fe2:	b90d      	cbnz	r5, 8001fe8 <_printf_i+0x118>
 8001fe4:	2e00      	cmp	r6, #0
 8001fe6:	d04d      	beq.n	8002084 <_printf_i+0x1b4>
 8001fe8:	4616      	mov	r6, r2
 8001fea:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fee:	fb03 5711 	mls	r7, r3, r1, r5
 8001ff2:	5dc7      	ldrb	r7, [r0, r7]
 8001ff4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001ff8:	462f      	mov	r7, r5
 8001ffa:	42bb      	cmp	r3, r7
 8001ffc:	460d      	mov	r5, r1
 8001ffe:	d9f4      	bls.n	8001fea <_printf_i+0x11a>
 8002000:	2b08      	cmp	r3, #8
 8002002:	d10b      	bne.n	800201c <_printf_i+0x14c>
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	07df      	lsls	r7, r3, #31
 8002008:	d508      	bpl.n	800201c <_printf_i+0x14c>
 800200a:	6923      	ldr	r3, [r4, #16]
 800200c:	6861      	ldr	r1, [r4, #4]
 800200e:	4299      	cmp	r1, r3
 8002010:	bfde      	ittt	le
 8002012:	2330      	movle	r3, #48	; 0x30
 8002014:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002018:	f106 36ff 	addle.w	r6, r6, #4294967295
 800201c:	1b92      	subs	r2, r2, r6
 800201e:	6122      	str	r2, [r4, #16]
 8002020:	f8cd a000 	str.w	sl, [sp]
 8002024:	464b      	mov	r3, r9
 8002026:	aa03      	add	r2, sp, #12
 8002028:	4621      	mov	r1, r4
 800202a:	4640      	mov	r0, r8
 800202c:	f7ff fee2 	bl	8001df4 <_printf_common>
 8002030:	3001      	adds	r0, #1
 8002032:	d14c      	bne.n	80020ce <_printf_i+0x1fe>
 8002034:	f04f 30ff 	mov.w	r0, #4294967295
 8002038:	b004      	add	sp, #16
 800203a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800203e:	4835      	ldr	r0, [pc, #212]	; (8002114 <_printf_i+0x244>)
 8002040:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002044:	6823      	ldr	r3, [r4, #0]
 8002046:	680e      	ldr	r6, [r1, #0]
 8002048:	061f      	lsls	r7, r3, #24
 800204a:	f856 5b04 	ldr.w	r5, [r6], #4
 800204e:	600e      	str	r6, [r1, #0]
 8002050:	d514      	bpl.n	800207c <_printf_i+0x1ac>
 8002052:	07d9      	lsls	r1, r3, #31
 8002054:	bf44      	itt	mi
 8002056:	f043 0320 	orrmi.w	r3, r3, #32
 800205a:	6023      	strmi	r3, [r4, #0]
 800205c:	b91d      	cbnz	r5, 8002066 <_printf_i+0x196>
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	f023 0320 	bic.w	r3, r3, #32
 8002064:	6023      	str	r3, [r4, #0]
 8002066:	2310      	movs	r3, #16
 8002068:	e7b0      	b.n	8001fcc <_printf_i+0xfc>
 800206a:	6823      	ldr	r3, [r4, #0]
 800206c:	f043 0320 	orr.w	r3, r3, #32
 8002070:	6023      	str	r3, [r4, #0]
 8002072:	2378      	movs	r3, #120	; 0x78
 8002074:	4828      	ldr	r0, [pc, #160]	; (8002118 <_printf_i+0x248>)
 8002076:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800207a:	e7e3      	b.n	8002044 <_printf_i+0x174>
 800207c:	065e      	lsls	r6, r3, #25
 800207e:	bf48      	it	mi
 8002080:	b2ad      	uxthmi	r5, r5
 8002082:	e7e6      	b.n	8002052 <_printf_i+0x182>
 8002084:	4616      	mov	r6, r2
 8002086:	e7bb      	b.n	8002000 <_printf_i+0x130>
 8002088:	680b      	ldr	r3, [r1, #0]
 800208a:	6826      	ldr	r6, [r4, #0]
 800208c:	6960      	ldr	r0, [r4, #20]
 800208e:	1d1d      	adds	r5, r3, #4
 8002090:	600d      	str	r5, [r1, #0]
 8002092:	0635      	lsls	r5, r6, #24
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	d501      	bpl.n	800209c <_printf_i+0x1cc>
 8002098:	6018      	str	r0, [r3, #0]
 800209a:	e002      	b.n	80020a2 <_printf_i+0x1d2>
 800209c:	0671      	lsls	r1, r6, #25
 800209e:	d5fb      	bpl.n	8002098 <_printf_i+0x1c8>
 80020a0:	8018      	strh	r0, [r3, #0]
 80020a2:	2300      	movs	r3, #0
 80020a4:	6123      	str	r3, [r4, #16]
 80020a6:	4616      	mov	r6, r2
 80020a8:	e7ba      	b.n	8002020 <_printf_i+0x150>
 80020aa:	680b      	ldr	r3, [r1, #0]
 80020ac:	1d1a      	adds	r2, r3, #4
 80020ae:	600a      	str	r2, [r1, #0]
 80020b0:	681e      	ldr	r6, [r3, #0]
 80020b2:	6862      	ldr	r2, [r4, #4]
 80020b4:	2100      	movs	r1, #0
 80020b6:	4630      	mov	r0, r6
 80020b8:	f7fe f892 	bl	80001e0 <memchr>
 80020bc:	b108      	cbz	r0, 80020c2 <_printf_i+0x1f2>
 80020be:	1b80      	subs	r0, r0, r6
 80020c0:	6060      	str	r0, [r4, #4]
 80020c2:	6863      	ldr	r3, [r4, #4]
 80020c4:	6123      	str	r3, [r4, #16]
 80020c6:	2300      	movs	r3, #0
 80020c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80020cc:	e7a8      	b.n	8002020 <_printf_i+0x150>
 80020ce:	6923      	ldr	r3, [r4, #16]
 80020d0:	4632      	mov	r2, r6
 80020d2:	4649      	mov	r1, r9
 80020d4:	4640      	mov	r0, r8
 80020d6:	47d0      	blx	sl
 80020d8:	3001      	adds	r0, #1
 80020da:	d0ab      	beq.n	8002034 <_printf_i+0x164>
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	079b      	lsls	r3, r3, #30
 80020e0:	d413      	bmi.n	800210a <_printf_i+0x23a>
 80020e2:	68e0      	ldr	r0, [r4, #12]
 80020e4:	9b03      	ldr	r3, [sp, #12]
 80020e6:	4298      	cmp	r0, r3
 80020e8:	bfb8      	it	lt
 80020ea:	4618      	movlt	r0, r3
 80020ec:	e7a4      	b.n	8002038 <_printf_i+0x168>
 80020ee:	2301      	movs	r3, #1
 80020f0:	4632      	mov	r2, r6
 80020f2:	4649      	mov	r1, r9
 80020f4:	4640      	mov	r0, r8
 80020f6:	47d0      	blx	sl
 80020f8:	3001      	adds	r0, #1
 80020fa:	d09b      	beq.n	8002034 <_printf_i+0x164>
 80020fc:	3501      	adds	r5, #1
 80020fe:	68e3      	ldr	r3, [r4, #12]
 8002100:	9903      	ldr	r1, [sp, #12]
 8002102:	1a5b      	subs	r3, r3, r1
 8002104:	42ab      	cmp	r3, r5
 8002106:	dcf2      	bgt.n	80020ee <_printf_i+0x21e>
 8002108:	e7eb      	b.n	80020e2 <_printf_i+0x212>
 800210a:	2500      	movs	r5, #0
 800210c:	f104 0619 	add.w	r6, r4, #25
 8002110:	e7f5      	b.n	80020fe <_printf_i+0x22e>
 8002112:	bf00      	nop
 8002114:	08002426 	.word	0x08002426
 8002118:	08002437 	.word	0x08002437

0800211c <memcpy>:
 800211c:	440a      	add	r2, r1
 800211e:	4291      	cmp	r1, r2
 8002120:	f100 33ff 	add.w	r3, r0, #4294967295
 8002124:	d100      	bne.n	8002128 <memcpy+0xc>
 8002126:	4770      	bx	lr
 8002128:	b510      	push	{r4, lr}
 800212a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800212e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002132:	4291      	cmp	r1, r2
 8002134:	d1f9      	bne.n	800212a <memcpy+0xe>
 8002136:	bd10      	pop	{r4, pc}

08002138 <memmove>:
 8002138:	4288      	cmp	r0, r1
 800213a:	b510      	push	{r4, lr}
 800213c:	eb01 0402 	add.w	r4, r1, r2
 8002140:	d902      	bls.n	8002148 <memmove+0x10>
 8002142:	4284      	cmp	r4, r0
 8002144:	4623      	mov	r3, r4
 8002146:	d807      	bhi.n	8002158 <memmove+0x20>
 8002148:	1e43      	subs	r3, r0, #1
 800214a:	42a1      	cmp	r1, r4
 800214c:	d008      	beq.n	8002160 <memmove+0x28>
 800214e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002156:	e7f8      	b.n	800214a <memmove+0x12>
 8002158:	4402      	add	r2, r0
 800215a:	4601      	mov	r1, r0
 800215c:	428a      	cmp	r2, r1
 800215e:	d100      	bne.n	8002162 <memmove+0x2a>
 8002160:	bd10      	pop	{r4, pc}
 8002162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800216a:	e7f7      	b.n	800215c <memmove+0x24>

0800216c <_free_r>:
 800216c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800216e:	2900      	cmp	r1, #0
 8002170:	d048      	beq.n	8002204 <_free_r+0x98>
 8002172:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002176:	9001      	str	r0, [sp, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f1a1 0404 	sub.w	r4, r1, #4
 800217e:	bfb8      	it	lt
 8002180:	18e4      	addlt	r4, r4, r3
 8002182:	f000 f8d3 	bl	800232c <__malloc_lock>
 8002186:	4a20      	ldr	r2, [pc, #128]	; (8002208 <_free_r+0x9c>)
 8002188:	9801      	ldr	r0, [sp, #4]
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	4615      	mov	r5, r2
 800218e:	b933      	cbnz	r3, 800219e <_free_r+0x32>
 8002190:	6063      	str	r3, [r4, #4]
 8002192:	6014      	str	r4, [r2, #0]
 8002194:	b003      	add	sp, #12
 8002196:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800219a:	f000 b8cd 	b.w	8002338 <__malloc_unlock>
 800219e:	42a3      	cmp	r3, r4
 80021a0:	d90b      	bls.n	80021ba <_free_r+0x4e>
 80021a2:	6821      	ldr	r1, [r4, #0]
 80021a4:	1862      	adds	r2, r4, r1
 80021a6:	4293      	cmp	r3, r2
 80021a8:	bf04      	itt	eq
 80021aa:	681a      	ldreq	r2, [r3, #0]
 80021ac:	685b      	ldreq	r3, [r3, #4]
 80021ae:	6063      	str	r3, [r4, #4]
 80021b0:	bf04      	itt	eq
 80021b2:	1852      	addeq	r2, r2, r1
 80021b4:	6022      	streq	r2, [r4, #0]
 80021b6:	602c      	str	r4, [r5, #0]
 80021b8:	e7ec      	b.n	8002194 <_free_r+0x28>
 80021ba:	461a      	mov	r2, r3
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	b10b      	cbz	r3, 80021c4 <_free_r+0x58>
 80021c0:	42a3      	cmp	r3, r4
 80021c2:	d9fa      	bls.n	80021ba <_free_r+0x4e>
 80021c4:	6811      	ldr	r1, [r2, #0]
 80021c6:	1855      	adds	r5, r2, r1
 80021c8:	42a5      	cmp	r5, r4
 80021ca:	d10b      	bne.n	80021e4 <_free_r+0x78>
 80021cc:	6824      	ldr	r4, [r4, #0]
 80021ce:	4421      	add	r1, r4
 80021d0:	1854      	adds	r4, r2, r1
 80021d2:	42a3      	cmp	r3, r4
 80021d4:	6011      	str	r1, [r2, #0]
 80021d6:	d1dd      	bne.n	8002194 <_free_r+0x28>
 80021d8:	681c      	ldr	r4, [r3, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	6053      	str	r3, [r2, #4]
 80021de:	4421      	add	r1, r4
 80021e0:	6011      	str	r1, [r2, #0]
 80021e2:	e7d7      	b.n	8002194 <_free_r+0x28>
 80021e4:	d902      	bls.n	80021ec <_free_r+0x80>
 80021e6:	230c      	movs	r3, #12
 80021e8:	6003      	str	r3, [r0, #0]
 80021ea:	e7d3      	b.n	8002194 <_free_r+0x28>
 80021ec:	6825      	ldr	r5, [r4, #0]
 80021ee:	1961      	adds	r1, r4, r5
 80021f0:	428b      	cmp	r3, r1
 80021f2:	bf04      	itt	eq
 80021f4:	6819      	ldreq	r1, [r3, #0]
 80021f6:	685b      	ldreq	r3, [r3, #4]
 80021f8:	6063      	str	r3, [r4, #4]
 80021fa:	bf04      	itt	eq
 80021fc:	1949      	addeq	r1, r1, r5
 80021fe:	6021      	streq	r1, [r4, #0]
 8002200:	6054      	str	r4, [r2, #4]
 8002202:	e7c7      	b.n	8002194 <_free_r+0x28>
 8002204:	b003      	add	sp, #12
 8002206:	bd30      	pop	{r4, r5, pc}
 8002208:	200001b4 	.word	0x200001b4

0800220c <_malloc_r>:
 800220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220e:	1ccd      	adds	r5, r1, #3
 8002210:	f025 0503 	bic.w	r5, r5, #3
 8002214:	3508      	adds	r5, #8
 8002216:	2d0c      	cmp	r5, #12
 8002218:	bf38      	it	cc
 800221a:	250c      	movcc	r5, #12
 800221c:	2d00      	cmp	r5, #0
 800221e:	4606      	mov	r6, r0
 8002220:	db01      	blt.n	8002226 <_malloc_r+0x1a>
 8002222:	42a9      	cmp	r1, r5
 8002224:	d903      	bls.n	800222e <_malloc_r+0x22>
 8002226:	230c      	movs	r3, #12
 8002228:	6033      	str	r3, [r6, #0]
 800222a:	2000      	movs	r0, #0
 800222c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800222e:	f000 f87d 	bl	800232c <__malloc_lock>
 8002232:	4921      	ldr	r1, [pc, #132]	; (80022b8 <_malloc_r+0xac>)
 8002234:	680a      	ldr	r2, [r1, #0]
 8002236:	4614      	mov	r4, r2
 8002238:	b99c      	cbnz	r4, 8002262 <_malloc_r+0x56>
 800223a:	4f20      	ldr	r7, [pc, #128]	; (80022bc <_malloc_r+0xb0>)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	b923      	cbnz	r3, 800224a <_malloc_r+0x3e>
 8002240:	4621      	mov	r1, r4
 8002242:	4630      	mov	r0, r6
 8002244:	f000 f862 	bl	800230c <_sbrk_r>
 8002248:	6038      	str	r0, [r7, #0]
 800224a:	4629      	mov	r1, r5
 800224c:	4630      	mov	r0, r6
 800224e:	f000 f85d 	bl	800230c <_sbrk_r>
 8002252:	1c43      	adds	r3, r0, #1
 8002254:	d123      	bne.n	800229e <_malloc_r+0x92>
 8002256:	230c      	movs	r3, #12
 8002258:	6033      	str	r3, [r6, #0]
 800225a:	4630      	mov	r0, r6
 800225c:	f000 f86c 	bl	8002338 <__malloc_unlock>
 8002260:	e7e3      	b.n	800222a <_malloc_r+0x1e>
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	1b5b      	subs	r3, r3, r5
 8002266:	d417      	bmi.n	8002298 <_malloc_r+0x8c>
 8002268:	2b0b      	cmp	r3, #11
 800226a:	d903      	bls.n	8002274 <_malloc_r+0x68>
 800226c:	6023      	str	r3, [r4, #0]
 800226e:	441c      	add	r4, r3
 8002270:	6025      	str	r5, [r4, #0]
 8002272:	e004      	b.n	800227e <_malloc_r+0x72>
 8002274:	6863      	ldr	r3, [r4, #4]
 8002276:	42a2      	cmp	r2, r4
 8002278:	bf0c      	ite	eq
 800227a:	600b      	streq	r3, [r1, #0]
 800227c:	6053      	strne	r3, [r2, #4]
 800227e:	4630      	mov	r0, r6
 8002280:	f000 f85a 	bl	8002338 <__malloc_unlock>
 8002284:	f104 000b 	add.w	r0, r4, #11
 8002288:	1d23      	adds	r3, r4, #4
 800228a:	f020 0007 	bic.w	r0, r0, #7
 800228e:	1ac2      	subs	r2, r0, r3
 8002290:	d0cc      	beq.n	800222c <_malloc_r+0x20>
 8002292:	1a1b      	subs	r3, r3, r0
 8002294:	50a3      	str	r3, [r4, r2]
 8002296:	e7c9      	b.n	800222c <_malloc_r+0x20>
 8002298:	4622      	mov	r2, r4
 800229a:	6864      	ldr	r4, [r4, #4]
 800229c:	e7cc      	b.n	8002238 <_malloc_r+0x2c>
 800229e:	1cc4      	adds	r4, r0, #3
 80022a0:	f024 0403 	bic.w	r4, r4, #3
 80022a4:	42a0      	cmp	r0, r4
 80022a6:	d0e3      	beq.n	8002270 <_malloc_r+0x64>
 80022a8:	1a21      	subs	r1, r4, r0
 80022aa:	4630      	mov	r0, r6
 80022ac:	f000 f82e 	bl	800230c <_sbrk_r>
 80022b0:	3001      	adds	r0, #1
 80022b2:	d1dd      	bne.n	8002270 <_malloc_r+0x64>
 80022b4:	e7cf      	b.n	8002256 <_malloc_r+0x4a>
 80022b6:	bf00      	nop
 80022b8:	200001b4 	.word	0x200001b4
 80022bc:	200001b8 	.word	0x200001b8

080022c0 <_realloc_r>:
 80022c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022c2:	4607      	mov	r7, r0
 80022c4:	4614      	mov	r4, r2
 80022c6:	460e      	mov	r6, r1
 80022c8:	b921      	cbnz	r1, 80022d4 <_realloc_r+0x14>
 80022ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80022ce:	4611      	mov	r1, r2
 80022d0:	f7ff bf9c 	b.w	800220c <_malloc_r>
 80022d4:	b922      	cbnz	r2, 80022e0 <_realloc_r+0x20>
 80022d6:	f7ff ff49 	bl	800216c <_free_r>
 80022da:	4625      	mov	r5, r4
 80022dc:	4628      	mov	r0, r5
 80022de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022e0:	f000 f830 	bl	8002344 <_malloc_usable_size_r>
 80022e4:	42a0      	cmp	r0, r4
 80022e6:	d20f      	bcs.n	8002308 <_realloc_r+0x48>
 80022e8:	4621      	mov	r1, r4
 80022ea:	4638      	mov	r0, r7
 80022ec:	f7ff ff8e 	bl	800220c <_malloc_r>
 80022f0:	4605      	mov	r5, r0
 80022f2:	2800      	cmp	r0, #0
 80022f4:	d0f2      	beq.n	80022dc <_realloc_r+0x1c>
 80022f6:	4631      	mov	r1, r6
 80022f8:	4622      	mov	r2, r4
 80022fa:	f7ff ff0f 	bl	800211c <memcpy>
 80022fe:	4631      	mov	r1, r6
 8002300:	4638      	mov	r0, r7
 8002302:	f7ff ff33 	bl	800216c <_free_r>
 8002306:	e7e9      	b.n	80022dc <_realloc_r+0x1c>
 8002308:	4635      	mov	r5, r6
 800230a:	e7e7      	b.n	80022dc <_realloc_r+0x1c>

0800230c <_sbrk_r>:
 800230c:	b538      	push	{r3, r4, r5, lr}
 800230e:	4d06      	ldr	r5, [pc, #24]	; (8002328 <_sbrk_r+0x1c>)
 8002310:	2300      	movs	r3, #0
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	602b      	str	r3, [r5, #0]
 8002318:	f000 f81e 	bl	8002358 <_sbrk>
 800231c:	1c43      	adds	r3, r0, #1
 800231e:	d102      	bne.n	8002326 <_sbrk_r+0x1a>
 8002320:	682b      	ldr	r3, [r5, #0]
 8002322:	b103      	cbz	r3, 8002326 <_sbrk_r+0x1a>
 8002324:	6023      	str	r3, [r4, #0]
 8002326:	bd38      	pop	{r3, r4, r5, pc}
 8002328:	20000304 	.word	0x20000304

0800232c <__malloc_lock>:
 800232c:	4801      	ldr	r0, [pc, #4]	; (8002334 <__malloc_lock+0x8>)
 800232e:	f000 b811 	b.w	8002354 <__retarget_lock_acquire_recursive>
 8002332:	bf00      	nop
 8002334:	2000030c 	.word	0x2000030c

08002338 <__malloc_unlock>:
 8002338:	4801      	ldr	r0, [pc, #4]	; (8002340 <__malloc_unlock+0x8>)
 800233a:	f000 b80c 	b.w	8002356 <__retarget_lock_release_recursive>
 800233e:	bf00      	nop
 8002340:	2000030c 	.word	0x2000030c

08002344 <_malloc_usable_size_r>:
 8002344:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002348:	1f18      	subs	r0, r3, #4
 800234a:	2b00      	cmp	r3, #0
 800234c:	bfbc      	itt	lt
 800234e:	580b      	ldrlt	r3, [r1, r0]
 8002350:	18c0      	addlt	r0, r0, r3
 8002352:	4770      	bx	lr

08002354 <__retarget_lock_acquire_recursive>:
 8002354:	4770      	bx	lr

08002356 <__retarget_lock_release_recursive>:
 8002356:	4770      	bx	lr

08002358 <_sbrk>:
 8002358:	4b04      	ldr	r3, [pc, #16]	; (800236c <_sbrk+0x14>)
 800235a:	6819      	ldr	r1, [r3, #0]
 800235c:	4602      	mov	r2, r0
 800235e:	b909      	cbnz	r1, 8002364 <_sbrk+0xc>
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <_sbrk+0x18>)
 8002362:	6019      	str	r1, [r3, #0]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	4402      	add	r2, r0
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	4770      	bx	lr
 800236c:	200001bc 	.word	0x200001bc
 8002370:	20000314 	.word	0x20000314

08002374 <_init>:
 8002374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002376:	bf00      	nop
 8002378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800237a:	bc08      	pop	{r3}
 800237c:	469e      	mov	lr, r3
 800237e:	4770      	bx	lr

08002380 <_fini>:
 8002380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002382:	bf00      	nop
 8002384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002386:	bc08      	pop	{r3}
 8002388:	469e      	mov	lr, r3
 800238a:	4770      	bx	lr
