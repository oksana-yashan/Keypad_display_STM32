
03_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080028a4  080028a4  000128a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080028a8  080028a8  000128a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000078  20000000  080028ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
  7 .bss          00000284  20000078  20000078  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200002fc  200002fc  00020078  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   000098a3  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001cda  00000000  00000000  0002994b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000790  00000000  00000000  0002b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000698  00000000  00000000  0002bdb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00004312  00000000  00000000  0002c450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00009895  00000000  00000000  00030762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00062da5  00000000  00000000  00039ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0009cd9c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002118  00000000  00000000  0009cdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stabstr      0000003f  00000000  00000000  0009ef08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080027d0 	.word	0x080027d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080027d0 	.word	0x080027d0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <CAN_Transmit>:
  * @param  TxMessage: pointer to a structure which contains CAN Id, CAN DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission or
  *         CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 800028a:	2300      	movs	r3, #0
 800028c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800029a:	d102      	bne.n	80002a2 <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 800029c:	2300      	movs	r3, #0
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e015      	b.n	80002ce <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	689b      	ldr	r3, [r3, #8]
 80002a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80002aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80002ae:	d102      	bne.n	80002b6 <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	73fb      	strb	r3, [r7, #15]
 80002b4:	e00b      	b.n	80002ce <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80002c2:	d102      	bne.n	80002ca <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 80002c4:	2302      	movs	r3, #2
 80002c6:	73fb      	strb	r3, [r7, #15]
 80002c8:	e001      	b.n	80002ce <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 80002ca:	2304      	movs	r3, #4
 80002cc:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 80002ce:	7bfb      	ldrb	r3, [r7, #15]
 80002d0:	2b04      	cmp	r3, #4
 80002d2:	f000 809f 	beq.w	8000414 <CAN_Transmit+0x194>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	687a      	ldr	r2, [r7, #4]
 80002da:	3318      	adds	r3, #24
 80002dc:	011b      	lsls	r3, r3, #4
 80002de:	4413      	add	r3, r2
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	7bfb      	ldrb	r3, [r7, #15]
 80002e4:	f002 0201 	and.w	r2, r2, #1
 80002e8:	6879      	ldr	r1, [r7, #4]
 80002ea:	3318      	adds	r3, #24
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	440b      	add	r3, r1
 80002f0:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 80002f2:	683b      	ldr	r3, [r7, #0]
 80002f4:	7a1b      	ldrb	r3, [r3, #8]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d113      	bne.n	8000322 <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	3318      	adds	r3, #24
 8000300:	011b      	lsls	r3, r3, #4
 8000302:	4413      	add	r3, r2
 8000304:	6819      	ldr	r1, [r3, #0]
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
 800030c:	683a      	ldr	r2, [r7, #0]
 800030e:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8000310:	431a      	orrs	r2, r3
 8000312:	7bfb      	ldrb	r3, [r7, #15]
 8000314:	430a      	orrs	r2, r1
 8000316:	6879      	ldr	r1, [r7, #4]
 8000318:	3318      	adds	r3, #24
 800031a:	011b      	lsls	r3, r3, #4
 800031c:	440b      	add	r3, r1
 800031e:	601a      	str	r2, [r3, #0]
 8000320:	e015      	b.n	800034e <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000322:	7bfb      	ldrb	r3, [r7, #15]
 8000324:	687a      	ldr	r2, [r7, #4]
 8000326:	3318      	adds	r3, #24
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	4413      	add	r3, r2
 800032c:	6819      	ldr	r1, [r3, #0]
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	685b      	ldr	r3, [r3, #4]
 8000332:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
 8000334:	683a      	ldr	r2, [r7, #0]
 8000336:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000338:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
 800033a:	683a      	ldr	r2, [r7, #0]
 800033c:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
 800033e:	431a      	orrs	r2, r3
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8000340:	7bfb      	ldrb	r3, [r7, #15]
 8000342:	430a      	orrs	r2, r1
 8000344:	6879      	ldr	r1, [r7, #4]
 8000346:	3318      	adds	r3, #24
 8000348:	011b      	lsls	r3, r3, #4
 800034a:	440b      	add	r3, r1
 800034c:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	7a9b      	ldrb	r3, [r3, #10]
 8000352:	f003 030f 	and.w	r3, r3, #15
 8000356:	b2da      	uxtb	r2, r3
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	3318      	adds	r3, #24
 8000362:	011b      	lsls	r3, r3, #4
 8000364:	4413      	add	r3, r2
 8000366:	3304      	adds	r3, #4
 8000368:	681a      	ldr	r2, [r3, #0]
 800036a:	7bfb      	ldrb	r3, [r7, #15]
 800036c:	f022 020f 	bic.w	r2, r2, #15
 8000370:	6879      	ldr	r1, [r7, #4]
 8000372:	3318      	adds	r3, #24
 8000374:	011b      	lsls	r3, r3, #4
 8000376:	440b      	add	r3, r1
 8000378:	3304      	adds	r3, #4
 800037a:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	687a      	ldr	r2, [r7, #4]
 8000380:	3318      	adds	r3, #24
 8000382:	011b      	lsls	r3, r3, #4
 8000384:	4413      	add	r3, r2
 8000386:	3304      	adds	r3, #4
 8000388:	681a      	ldr	r2, [r3, #0]
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	7a9b      	ldrb	r3, [r3, #10]
 800038e:	4619      	mov	r1, r3
 8000390:	7bfb      	ldrb	r3, [r7, #15]
 8000392:	430a      	orrs	r2, r1
 8000394:	6879      	ldr	r1, [r7, #4]
 8000396:	3318      	adds	r3, #24
 8000398:	011b      	lsls	r3, r3, #4
 800039a:	440b      	add	r3, r1
 800039c:	3304      	adds	r3, #4
 800039e:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80003a0:	683b      	ldr	r3, [r7, #0]
 80003a2:	7b9b      	ldrb	r3, [r3, #14]
 80003a4:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80003a6:	683b      	ldr	r3, [r7, #0]
 80003a8:	7b5b      	ldrb	r3, [r3, #13]
 80003aa:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80003ac:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80003ae:	683b      	ldr	r3, [r7, #0]
 80003b0:	7b1b      	ldrb	r3, [r3, #12]
 80003b2:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80003b4:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[0]));
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	7adb      	ldrb	r3, [r3, #11]
 80003ba:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80003be:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80003c0:	6879      	ldr	r1, [r7, #4]
 80003c2:	011b      	lsls	r3, r3, #4
 80003c4:	440b      	add	r3, r1
 80003c6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80003ca:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80003cc:	683b      	ldr	r3, [r7, #0]
 80003ce:	7c9b      	ldrb	r3, [r3, #18]
 80003d0:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	7c5b      	ldrb	r3, [r3, #17]
 80003d6:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80003d8:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80003da:	683b      	ldr	r3, [r7, #0]
 80003dc:	7c1b      	ldrb	r3, [r3, #16]
 80003de:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 80003e0:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[4]));
 80003e2:	683b      	ldr	r3, [r7, #0]
 80003e4:	7bdb      	ldrb	r3, [r3, #15]
 80003e6:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80003e8:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 80003ea:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 80003ec:	6879      	ldr	r1, [r7, #4]
 80003ee:	011b      	lsls	r3, r3, #4
 80003f0:	440b      	add	r3, r1
 80003f2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80003f6:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 80003f8:	7bfb      	ldrb	r3, [r7, #15]
 80003fa:	687a      	ldr	r2, [r7, #4]
 80003fc:	3318      	adds	r3, #24
 80003fe:	011b      	lsls	r3, r3, #4
 8000400:	4413      	add	r3, r2
 8000402:	681a      	ldr	r2, [r3, #0]
 8000404:	7bfb      	ldrb	r3, [r7, #15]
 8000406:	f042 0201 	orr.w	r2, r2, #1
 800040a:	6879      	ldr	r1, [r7, #4]
 800040c:	3318      	adds	r3, #24
 800040e:	011b      	lsls	r3, r3, #4
 8000410:	440b      	add	r3, r1
 8000412:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8000414:	7bfb      	ldrb	r3, [r7, #15]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <CAN_Receive>:
  * @param  RxMessage: pointer to a structure receive frame which contains CAN Id,
  *         CAN DLC, CAN data and FMI number.
  * @retval None
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000422:	b480      	push	{r7}
 8000424:	b085      	sub	sp, #20
 8000426:	af00      	add	r7, sp, #0
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	460b      	mov	r3, r1
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000430:	7afb      	ldrb	r3, [r7, #11]
 8000432:	68fa      	ldr	r2, [r7, #12]
 8000434:	331b      	adds	r3, #27
 8000436:	011b      	lsls	r3, r3, #4
 8000438:	4413      	add	r3, r2
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	b2db      	uxtb	r3, r3
 800043e:	f003 0304 	and.w	r3, r3, #4
 8000442:	b2da      	uxtb	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	7a1b      	ldrb	r3, [r3, #8]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d10b      	bne.n	8000468 <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000450:	7afb      	ldrb	r3, [r7, #11]
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	331b      	adds	r3, #27
 8000456:	011b      	lsls	r3, r3, #4
 8000458:	4413      	add	r3, r2
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	0d5b      	lsrs	r3, r3, #21
 800045e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	e00a      	b.n	800047e <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000468:	7afb      	ldrb	r3, [r7, #11]
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	331b      	adds	r3, #27
 800046e:	011b      	lsls	r3, r3, #4
 8000470:	4413      	add	r3, r2
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	08db      	lsrs	r3, r3, #3
 8000476:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 800047e:	7afb      	ldrb	r3, [r7, #11]
 8000480:	68fa      	ldr	r2, [r7, #12]
 8000482:	331b      	adds	r3, #27
 8000484:	011b      	lsls	r3, r3, #4
 8000486:	4413      	add	r3, r2
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	f003 0302 	and.w	r3, r3, #2
 8000490:	b2da      	uxtb	r2, r3
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000496:	7afb      	ldrb	r3, [r7, #11]
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	331b      	adds	r3, #27
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	4413      	add	r3, r2
 80004a0:	3304      	adds	r3, #4
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	b2db      	uxtb	r3, r3
 80004a6:	f003 030f 	and.w	r3, r3, #15
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80004b0:	7afb      	ldrb	r3, [r7, #11]
 80004b2:	68fa      	ldr	r2, [r7, #12]
 80004b4:	331b      	adds	r3, #27
 80004b6:	011b      	lsls	r3, r3, #4
 80004b8:	4413      	add	r3, r2
 80004ba:	3304      	adds	r3, #4
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	0a1b      	lsrs	r3, r3, #8
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 80004c6:	7afb      	ldrb	r3, [r7, #11]
 80004c8:	68fa      	ldr	r2, [r7, #12]
 80004ca:	011b      	lsls	r3, r3, #4
 80004cc:	4413      	add	r3, r2
 80004ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 80004da:	7afb      	ldrb	r3, [r7, #11]
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	4413      	add	r3, r2
 80004e2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	0a1b      	lsrs	r3, r3, #8
 80004ea:	b2da      	uxtb	r2, r3
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 80004f0:	7afb      	ldrb	r3, [r7, #11]
 80004f2:	68fa      	ldr	r2, [r7, #12]
 80004f4:	011b      	lsls	r3, r3, #4
 80004f6:	4413      	add	r3, r2
 80004f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	0c1b      	lsrs	r3, r3, #16
 8000500:	b2da      	uxtb	r2, r3
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000506:	7afb      	ldrb	r3, [r7, #11]
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	4413      	add	r3, r2
 800050e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	0e1b      	lsrs	r3, r3, #24
 8000516:	b2da      	uxtb	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 800051c:	7afb      	ldrb	r3, [r7, #11]
 800051e:	68fa      	ldr	r2, [r7, #12]
 8000520:	011b      	lsls	r3, r3, #4
 8000522:	4413      	add	r3, r2
 8000524:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	b2da      	uxtb	r2, r3
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000530:	7afb      	ldrb	r3, [r7, #11]
 8000532:	68fa      	ldr	r2, [r7, #12]
 8000534:	011b      	lsls	r3, r3, #4
 8000536:	4413      	add	r3, r2
 8000538:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	0a1b      	lsrs	r3, r3, #8
 8000540:	b2da      	uxtb	r2, r3
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	68fa      	ldr	r2, [r7, #12]
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4413      	add	r3, r2
 800054e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	0c1b      	lsrs	r3, r3, #16
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 800055c:	7afb      	ldrb	r3, [r7, #11]
 800055e:	68fa      	ldr	r2, [r7, #12]
 8000560:	011b      	lsls	r3, r3, #4
 8000562:	4413      	add	r3, r2
 8000564:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	0e1b      	lsrs	r3, r3, #24
 800056c:	b2da      	uxtb	r2, r3
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000572:	7afb      	ldrb	r3, [r7, #11]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d106      	bne.n	8000586 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f043 0220 	orr.w	r2, r3, #32
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8000584:	e005      	b.n	8000592 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	691b      	ldr	r3, [r3, #16]
 800058a:	f043 0220 	orr.w	r2, r3, #32
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	611a      	str	r2, [r3, #16]
}
 8000592:	bf00      	nop
 8000594:	3714      	adds	r7, #20
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
	...

080005a0 <CAN_GetITStatus>:
  *            @arg CAN_IT_LEC: Last error code Interrupt
  *            @arg CAN_IT_ERR: Error Interrupt
  * @retval The current state of CAN_IT (SET or RESET).
  */
ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	6039      	str	r1, [r7, #0]
  ITStatus itstatus = RESET;
 80005aa:	2300      	movs	r3, #0
 80005ac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  
  /* check the interrupt enable bit */
 if((CANx->IER & CAN_IT) != RESET)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	683b      	ldr	r3, [r7, #0]
 80005b4:	4013      	ands	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	f000 811b 	beq.w	80007f2 <CAN_GetITStatus+0x252>
 {
   /* in case the Interrupt is enabled, .... */
    switch (CAN_IT)
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80005c2:	f000 80dd 	beq.w	8000780 <CAN_GetITStatus+0x1e0>
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80005cc:	f200 810e 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005d6:	f000 80ca 	beq.w	800076e <CAN_GetITStatus+0x1ce>
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005e0:	f200 8104 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005ea:	f000 80f6 	beq.w	80007da <CAN_GetITStatus+0x23a>
 80005ee:	683b      	ldr	r3, [r7, #0]
 80005f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80005f4:	f200 80fa 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80005fe:	f000 80e3 	beq.w	80007c8 <CAN_GetITStatus+0x228>
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000608:	f200 80f0 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000612:	f000 80d0 	beq.w	80007b6 <CAN_GetITStatus+0x216>
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800061c:	f200 80e6 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000626:	f000 80bd 	beq.w	80007a4 <CAN_GetITStatus+0x204>
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000630:	f200 80dc 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800063a:	f000 80aa 	beq.w	8000792 <CAN_GetITStatus+0x1f2>
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000644:	f200 80d2 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	2b20      	cmp	r3, #32
 800064c:	d84c      	bhi.n	80006e8 <CAN_GetITStatus+0x148>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	f000 80cb 	beq.w	80007ec <CAN_GetITStatus+0x24c>
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	3b01      	subs	r3, #1
 800065a:	2b1f      	cmp	r3, #31
 800065c:	f200 80c6 	bhi.w	80007ec <CAN_GetITStatus+0x24c>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <CAN_GetITStatus+0xc8>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	080006f1 	.word	0x080006f1
 800066c:	08000703 	.word	0x08000703
 8000670:	080007ed 	.word	0x080007ed
 8000674:	08000715 	.word	0x08000715
 8000678:	080007ed 	.word	0x080007ed
 800067c:	080007ed 	.word	0x080007ed
 8000680:	080007ed 	.word	0x080007ed
 8000684:	08000727 	.word	0x08000727
 8000688:	080007ed 	.word	0x080007ed
 800068c:	080007ed 	.word	0x080007ed
 8000690:	080007ed 	.word	0x080007ed
 8000694:	080007ed 	.word	0x080007ed
 8000698:	080007ed 	.word	0x080007ed
 800069c:	080007ed 	.word	0x080007ed
 80006a0:	080007ed 	.word	0x080007ed
 80006a4:	08000739 	.word	0x08000739
 80006a8:	080007ed 	.word	0x080007ed
 80006ac:	080007ed 	.word	0x080007ed
 80006b0:	080007ed 	.word	0x080007ed
 80006b4:	080007ed 	.word	0x080007ed
 80006b8:	080007ed 	.word	0x080007ed
 80006bc:	080007ed 	.word	0x080007ed
 80006c0:	080007ed 	.word	0x080007ed
 80006c4:	080007ed 	.word	0x080007ed
 80006c8:	080007ed 	.word	0x080007ed
 80006cc:	080007ed 	.word	0x080007ed
 80006d0:	080007ed 	.word	0x080007ed
 80006d4:	080007ed 	.word	0x080007ed
 80006d8:	080007ed 	.word	0x080007ed
 80006dc:	080007ed 	.word	0x080007ed
 80006e0:	080007ed 	.word	0x080007ed
 80006e4:	0800074b 	.word	0x0800074b
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	2b40      	cmp	r3, #64	; 0x40
 80006ec:	d036      	beq.n	800075c <CAN_GetITStatus+0x1bc>
 80006ee:	e07d      	b.n	80007ec <CAN_GetITStatus+0x24c>
    {
      case CAN_IT_TME:
        /* Check CAN_TSR_RQCPx bits */
        itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	689b      	ldr	r3, [r3, #8]
 80006f4:	4942      	ldr	r1, [pc, #264]	; (8000800 <CAN_GetITStatus+0x260>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f000 f884 	bl	8000804 <CheckITStatus>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]
        break;
 8000700:	e079      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FMP0:
        /* Check CAN_RF0R_FMP0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	2103      	movs	r1, #3
 8000708:	4618      	mov	r0, r3
 800070a:	f000 f87b 	bl	8000804 <CheckITStatus>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]
        break;
 8000712:	e070      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FF0:
        /* Check CAN_RF0R_FULL0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	68db      	ldr	r3, [r3, #12]
 8000718:	2108      	movs	r1, #8
 800071a:	4618      	mov	r0, r3
 800071c:	f000 f872 	bl	8000804 <CheckITStatus>
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]
        break;
 8000724:	e067      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FOV0:
        /* Check CAN_RF0R_FOVR0 bit */
        itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	2110      	movs	r1, #16
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f869 	bl	8000804 <CheckITStatus>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
        break;
 8000736:	e05e      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FMP1:
        /* Check CAN_RF1R_FMP1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	691b      	ldr	r3, [r3, #16]
 800073c:	2103      	movs	r1, #3
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f860 	bl	8000804 <CheckITStatus>
 8000744:	4603      	mov	r3, r0
 8000746:	73fb      	strb	r3, [r7, #15]
        break;
 8000748:	e055      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FF1:
        /* Check CAN_RF1R_FULL1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	691b      	ldr	r3, [r3, #16]
 800074e:	2108      	movs	r1, #8
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f857 	bl	8000804 <CheckITStatus>
 8000756:	4603      	mov	r3, r0
 8000758:	73fb      	strb	r3, [r7, #15]
        break;
 800075a:	e04c      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_FOV1:
        /* Check CAN_RF1R_FOVR1 bit */
        itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	2110      	movs	r1, #16
 8000762:	4618      	mov	r0, r3
 8000764:	f000 f84e 	bl	8000804 <CheckITStatus>
 8000768:	4603      	mov	r3, r0
 800076a:	73fb      	strb	r3, [r7, #15]
        break;
 800076c:	e043      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_WKU:
        /* Check CAN_MSR_WKUI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	2108      	movs	r1, #8
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f845 	bl	8000804 <CheckITStatus>
 800077a:	4603      	mov	r3, r0
 800077c:	73fb      	strb	r3, [r7, #15]
        break;
 800077e:	e03a      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_SLK:
        /* Check CAN_MSR_SLAKI bit */
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	2110      	movs	r1, #16
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f83c 	bl	8000804 <CheckITStatus>
 800078c:	4603      	mov	r3, r0
 800078e:	73fb      	strb	r3, [r7, #15]
        break;
 8000790:	e031      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_EWG:
        /* Check CAN_ESR_EWGF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	2101      	movs	r1, #1
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f833 	bl	8000804 <CheckITStatus>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]
        break;
 80007a2:	e028      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_EPV:
        /* Check CAN_ESR_EPVF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	2102      	movs	r1, #2
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 f82a 	bl	8000804 <CheckITStatus>
 80007b0:	4603      	mov	r3, r0
 80007b2:	73fb      	strb	r3, [r7, #15]
        break;
 80007b4:	e01f      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_BOF:
        /* Check CAN_ESR_BOFF bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	2104      	movs	r1, #4
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f821 	bl	8000804 <CheckITStatus>
 80007c2:	4603      	mov	r3, r0
 80007c4:	73fb      	strb	r3, [r7, #15]
        break;
 80007c6:	e016      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_LEC:
        /* Check CAN_ESR_LEC bit */
        itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	2170      	movs	r1, #112	; 0x70
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f818 	bl	8000804 <CheckITStatus>
 80007d4:	4603      	mov	r3, r0
 80007d6:	73fb      	strb	r3, [r7, #15]
        break;
 80007d8:	e00d      	b.n	80007f6 <CAN_GetITStatus+0x256>
      case CAN_IT_ERR:
        /* Check CAN_MSR_ERRI bit */ 
        itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	2104      	movs	r1, #4
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f80f 	bl	8000804 <CheckITStatus>
 80007e6:	4603      	mov	r3, r0
 80007e8:	73fb      	strb	r3, [r7, #15]
        break;
 80007ea:	e004      	b.n	80007f6 <CAN_GetITStatus+0x256>
      default:
        /* in case of error, return RESET */
        itstatus = RESET;
 80007ec:	2300      	movs	r3, #0
 80007ee:	73fb      	strb	r3, [r7, #15]
        break;
 80007f0:	e001      	b.n	80007f6 <CAN_GetITStatus+0x256>
    }
  }
  else
  {
   /* in case the Interrupt is not enabled, return RESET */
    itstatus  = RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return the CAN_IT status */
  return  itstatus;
 80007f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	00010101 	.word	0x00010101

08000804 <CheckITStatus>:
  * @param  CAN_Reg: specifies the CAN interrupt register to check.
  * @param  It_Bit: specifies the interrupt source bit to check.
  * @retval The new state of the CAN Interrupt (SET or RESET).
  */
static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
{
 8000804:	b480      	push	{r7}
 8000806:	b085      	sub	sp, #20
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
  ITStatus pendingbitstatus = RESET;
 800080e:	2300      	movs	r3, #0
 8000810:	73fb      	strb	r3, [r7, #15]
  
  if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	4013      	ands	r3, r2
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <CheckITStatus+0x1e>
  {
    /* CAN_IT is set */
    pendingbitstatus = SET;
 800081c:	2301      	movs	r3, #1
 800081e:	73fb      	strb	r3, [r7, #15]
 8000820:	e001      	b.n	8000826 <CheckITStatus+0x22>
  }
  else
  {
    /* CAN_IT is reset */
    pendingbitstatus = RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
  }
  return pendingbitstatus;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
}
 8000828:	4618      	mov	r0, r3
 800082a:	3714      	adds	r7, #20
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <EXTI_GetITStatus+0x44>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	687a      	ldr	r2, [r7, #4]
 800084a:	4013      	ands	r3, r2
 800084c:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800084e:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <EXTI_GetITStatus+0x44>)
 8000850:	695a      	ldr	r2, [r3, #20]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4013      	ands	r3, r2
 8000856:	2b00      	cmp	r3, #0
 8000858:	d005      	beq.n	8000866 <EXTI_GetITStatus+0x32>
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d002      	beq.n	8000866 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000860:	2301      	movs	r3, #1
 8000862:	73fb      	strb	r3, [r7, #15]
 8000864:	e001      	b.n	800086a <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800086a:	7bfb      	ldrb	r3, [r7, #15]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	40013c00 	.word	0x40013c00

0800087c <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <EXTI_ClearITPendingBit+0x1c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6153      	str	r3, [r2, #20]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40013c00 	.word	0x40013c00

0800089c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800089c:	b480      	push	{r7}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80008a6:	2300      	movs	r3, #0
 80008a8:	617b      	str	r3, [r7, #20]
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e076      	b.n	80009a6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80008b8:	2201      	movs	r2, #1
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	693a      	ldr	r2, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	693b      	ldr	r3, [r7, #16]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d165      	bne.n	80009a0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	005b      	lsls	r3, r3, #1
 80008dc:	2103      	movs	r1, #3
 80008de:	fa01 f303 	lsl.w	r3, r1, r3
 80008e2:	43db      	mvns	r3, r3
 80008e4:	401a      	ands	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681a      	ldr	r2, [r3, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	4619      	mov	r1, r3
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	fa01 f303 	lsl.w	r3, r1, r3
 80008fc:	431a      	orrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	791b      	ldrb	r3, [r3, #4]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d003      	beq.n	8000912 <GPIO_Init+0x76>
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	791b      	ldrb	r3, [r3, #4]
 800090e:	2b02      	cmp	r3, #2
 8000910:	d12e      	bne.n	8000970 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2103      	movs	r1, #3
 800091c:	fa01 f303 	lsl.w	r3, r1, r3
 8000920:	43db      	mvns	r3, r3
 8000922:	401a      	ands	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	689a      	ldr	r2, [r3, #8]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	4619      	mov	r1, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	431a      	orrs	r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685a      	ldr	r2, [r3, #4]
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	b29b      	uxth	r3, r3
 8000948:	4619      	mov	r1, r3
 800094a:	2301      	movs	r3, #1
 800094c:	408b      	lsls	r3, r1
 800094e:	43db      	mvns	r3, r3
 8000950:	401a      	ands	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	683a      	ldr	r2, [r7, #0]
 800095c:	7992      	ldrb	r2, [r2, #6]
 800095e:	4611      	mov	r1, r2
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	b292      	uxth	r2, r2
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	b292      	uxth	r2, r2
 800096a:	431a      	orrs	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68da      	ldr	r2, [r3, #12]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	b29b      	uxth	r3, r3
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2103      	movs	r1, #3
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	401a      	ands	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	68da      	ldr	r2, [r3, #12]
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	79db      	ldrb	r3, [r3, #7]
 8000990:	4619      	mov	r1, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	fa01 f303 	lsl.w	r3, r1, r3
 800099a:	431a      	orrs	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2b0f      	cmp	r3, #15
 80009aa:	d985      	bls.n	80008b8 <GPIO_Init+0x1c>
    }
  }
}
 80009ac:	bf00      	nop
 80009ae:	bf00      	nop
 80009b0:	371c      	adds	r7, #28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	887a      	ldrh	r2, [r7, #2]
 80009ca:	831a      	strh	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	460b      	mov	r3, r1
 80009e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	887a      	ldrh	r2, [r7, #2]
 80009e8:	835a      	strh	r2, [r3, #26]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	695a      	ldr	r2, [r3, #20]
 8000a06:	887b      	ldrh	r3, [r7, #2]
 8000a08:	405a      	eors	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	615a      	str	r2, [r3, #20]
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <RCC_HSEConfig+0x24>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <RCC_HSEConfig+0x24>)
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	7013      	strb	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40023802 	.word	0x40023802

08000a44 <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 8000a56:	2031      	movs	r0, #49	; 0x31
 8000a58:	f000 f98c 	bl	8000d74 <RCC_GetFlagStatus>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	3301      	adds	r3, #1
 8000a64:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000a6c:	d002      	beq.n	8000a74 <RCC_WaitForHSEStartUp+0x30>
 8000a6e:	79bb      	ldrb	r3, [r7, #6]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d0f0      	beq.n	8000a56 <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000a74:	2031      	movs	r0, #49	; 0x31
 8000a76:	f000 f97d 	bl	8000d74 <RCC_GetFlagStatus>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000a80:	2301      	movs	r3, #1
 8000a82:	71fb      	strb	r3, [r7, #7]
 8000a84:	e001      	b.n	8000a8a <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 8000a86:	2300      	movs	r3, #0
 8000a88:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <RCC_PLLConfig>:
  *         correctly.
  *   
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP, uint32_t PLLQ)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
 8000aa0:	603b      	str	r3, [r7, #0]
  assert_param(IS_RCC_PLLM_VALUE(PLLM));
  assert_param(IS_RCC_PLLN_VALUE(PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLP));
  assert_param(IS_RCC_PLLQ_VALUE(PLLQ));

  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	019a      	lsls	r2, r3, #6
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	431a      	orrs	r2, r3
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	085b      	lsrs	r3, r3, #1
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	041b      	lsls	r3, r3, #16
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	431a      	orrs	r2, r3
                 (PLLQ << 24);
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	061b      	lsls	r3, r3, #24
  RCC->PLLCFGR = PLLM | (PLLN << 6) | (((PLLP >> 1) -1) << 16) | (RCC_PLLSource) |
 8000abc:	4904      	ldr	r1, [pc, #16]	; (8000ad0 <RCC_PLLConfig+0x3c>)
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	604b      	str	r3, [r1, #4]
}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <RCC_PLLCmd>:
  * @note   The main PLL is disabled by hardware when entering STOP and STANDBY modes.
  * @param  NewState: new state of the main PLL. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_PLLON_BB = (uint32_t)NewState;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <RCC_PLLCmd+0x1c>)
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	6013      	str	r3, [r2, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	370c      	adds	r7, #12
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	42470060 	.word	0x42470060

08000af4 <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_HSE:    HSE selected as system clock source
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <RCC_SYSCLKConfig+0x34>)
 8000b02:	689b      	ldr	r3, [r3, #8]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f023 0303 	bic.w	r3, r3, #3
 8000b0c:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <RCC_SYSCLKConfig+0x34>)
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	6093      	str	r3, [r2, #8]
}
 8000b1c:	bf00      	nop
 8000b1e:	3714      	adds	r7, #20
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr
 8000b28:	40023800 	.word	0x40023800

08000b2c <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <RCC_HCLKConfig+0x34>)
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <RCC_HCLKConfig+0x34>)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6093      	str	r3, [r2, #8]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40023800 	.word	0x40023800

08000b64 <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <RCC_PCLK1Config+0x34>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000b7c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4313      	orrs	r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000b86:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <RCC_PCLK1Config+0x34>)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6093      	str	r3, [r2, #8]
}
 8000b8c:	bf00      	nop
 8000b8e:	3714      	adds	r7, #20
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40023800 	.word	0x40023800

08000b9c <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <RCC_PCLK2Config+0x38>)
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000bb4:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <RCC_PCLK2Config+0x38>)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	6093      	str	r3, [r2, #8]
}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b089      	sub	sp, #36	; 0x24
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61bb      	str	r3, [r7, #24]
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
 8000bec:	2302      	movs	r3, #2
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000bf8:	4b4a      	ldr	r3, [pc, #296]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000bfa:	689b      	ldr	r3, [r3, #8]
 8000bfc:	f003 030c 	and.w	r3, r3, #12
 8000c00:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8000c02:	69bb      	ldr	r3, [r7, #24]
 8000c04:	2b08      	cmp	r3, #8
 8000c06:	d011      	beq.n	8000c2c <RCC_GetClocksFreq+0x54>
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	d844      	bhi.n	8000c98 <RCC_GetClocksFreq+0xc0>
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d003      	beq.n	8000c1c <RCC_GetClocksFreq+0x44>
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	d004      	beq.n	8000c24 <RCC_GetClocksFreq+0x4c>
 8000c1a:	e03d      	b.n	8000c98 <RCC_GetClocksFreq+0xc0>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a42      	ldr	r2, [pc, #264]	; (8000d28 <RCC_GetClocksFreq+0x150>)
 8000c20:	601a      	str	r2, [r3, #0]
      break;
 8000c22:	e03d      	b.n	8000ca0 <RCC_GetClocksFreq+0xc8>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <RCC_GetClocksFreq+0x154>)
 8000c28:	601a      	str	r2, [r3, #0]
      break;
 8000c2a:	e039      	b.n	8000ca0 <RCC_GetClocksFreq+0xc8>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	0d9b      	lsrs	r3, r3, #22
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c38:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c40:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00c      	beq.n	8000c62 <RCC_GetClocksFreq+0x8a>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000c48:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <RCC_GetClocksFreq+0x154>)
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c50:	4a34      	ldr	r2, [pc, #208]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000c52:	6852      	ldr	r2, [r2, #4]
 8000c54:	0992      	lsrs	r2, r2, #6
 8000c56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c5a:	fb02 f303 	mul.w	r3, r2, r3
 8000c5e:	61fb      	str	r3, [r7, #28]
 8000c60:	e00b      	b.n	8000c7a <RCC_GetClocksFreq+0xa2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000c62:	4a31      	ldr	r2, [pc, #196]	; (8000d28 <RCC_GetClocksFreq+0x150>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6a:	4a2e      	ldr	r2, [pc, #184]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000c6c:	6852      	ldr	r2, [r2, #4]
 8000c6e:	0992      	lsrs	r2, r2, #6
 8000c70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c74:	fb02 f303 	mul.w	r3, r2, r3
 8000c78:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	0c1b      	lsrs	r3, r3, #16
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	3301      	adds	r3, #1
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	693b      	ldr	r3, [r7, #16]
 8000c8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	601a      	str	r2, [r3, #0]
      break;
 8000c96:	e003      	b.n	8000ca0 <RCC_GetClocksFreq+0xc8>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <RCC_GetClocksFreq+0x150>)
 8000c9c:	601a      	str	r2, [r3, #0]
      break;
 8000c9e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ca8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	091b      	lsrs	r3, r3, #4
 8000cae:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cb0:	4a1f      	ldr	r2, [pc, #124]	; (8000d30 <RCC_GetClocksFreq+0x158>)
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	40da      	lsrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000cc8:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000cd0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	0a9b      	lsrs	r3, r3, #10
 8000cd6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000cd8:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <RCC_GetClocksFreq+0x158>)
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	4413      	add	r3, r2
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2db      	uxtb	r3, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	685a      	ldr	r2, [r3, #4]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	40da      	lsrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <RCC_GetClocksFreq+0x14c>)
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000cf8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	0b5b      	lsrs	r3, r3, #13
 8000cfe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <RCC_GetClocksFreq+0x158>)
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	40da      	lsrs	r2, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	60da      	str	r2, [r3, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	3724      	adds	r7, #36	; 0x24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr
 8000d24:	40023800 	.word	0x40023800
 8000d28:	00f42400 	.word	0x00f42400
 8000d2c:	007a1200 	.word	0x007a1200
 8000d30:	20000000 	.word	0x20000000

08000d34 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	460b      	mov	r3, r1
 8000d3e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d40:	78fb      	ldrb	r3, [r7, #3]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d006      	beq.n	8000d54 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d4a:	4909      	ldr	r1, [pc, #36]	; (8000d70 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000d52:	e006      	b.n	8000d62 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	4904      	ldr	r1, [pc, #16]	; (8000d70 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000d5e:	4013      	ands	r3, r2
 8000d60:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800

08000d74 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b087      	sub	sp, #28
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000d86:	2300      	movs	r3, #0
 8000d88:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	095b      	lsrs	r3, r3, #5
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d103      	bne.n	8000da0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <RCC_GetFlagStatus+0x70>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	e009      	b.n	8000db4 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d103      	bne.n	8000dae <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <RCC_GetFlagStatus+0x70>)
 8000da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	e002      	b.n	8000db4 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000dae:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <RCC_GetFlagStatus+0x70>)
 8000db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db2:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 031f 	and.w	r3, r3, #31
 8000dba:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d002      	beq.n	8000dd2 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	74fb      	strb	r3, [r7, #19]
 8000dd0:	e001      	b.n	8000dd6 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000dd6:	7cfb      	ldrb	r3, [r7, #19]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	371c      	adds	r7, #28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	40023800 	.word	0x40023800

08000de8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000df4:	887b      	ldrh	r3, [r7, #2]
 8000df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000dfa:	b29a      	uxth	r2, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	809a      	strh	r2, [r3, #4]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <USART_ReceiveData>:
  * @param  USARTx: where x can be 1, 2, 3, 4, 5, 6, 7 or 8 to select the USART or 
  *         UART peripheral.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	889b      	ldrh	r3, [r3, #4]
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e1e:	b29b      	uxth	r3, r3
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	370c      	adds	r7, #12
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr

08000e2c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	887b      	ldrh	r3, [r7, #2]
 8000e44:	4013      	ands	r3, r2
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d002      	beq.n	8000e52 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	73fb      	strb	r3, [r7, #15]
 8000e50:	e001      	b.n	8000e56 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <CAN_transmit_data>:
//	NVIC_Init(&NVIC_InitStructure);

}

void CAN_transmit_data(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
	CanTxMsg TxMessage;
	TxMessage.StdId = CAN_MASSEGE_ID_REQ;
 8000e6a:	23a1      	movs	r3, #161	; 0xa1
 8000e6c:	607b      	str	r3, [r7, #4]

	TxMessage.ExtId = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]

	TxMessage.IDE = CAN_Id_Standard;
 8000e72:	2300      	movs	r3, #0
 8000e74:	733b      	strb	r3, [r7, #12]
	TxMessage.RTR = CAN_RTR_DATA;
 8000e76:	2300      	movs	r3, #0
 8000e78:	737b      	strb	r3, [r7, #13]
	TxMessage.DLC = 3;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	73bb      	strb	r3, [r7, #14]

	TxMessage.Data[0] = 0x31;
 8000e7e:	2331      	movs	r3, #49	; 0x31
 8000e80:	73fb      	strb	r3, [r7, #15]
	TxMessage.Data[1] = 0x32;
 8000e82:	2332      	movs	r3, #50	; 0x32
 8000e84:	743b      	strb	r3, [r7, #16]
	TxMessage.Data[2] = 0x33;
 8000e86:	2333      	movs	r3, #51	; 0x33
 8000e88:	747b      	strb	r3, [r7, #17]

	CAN_Transmit(CAN1, &TxMessage);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4803      	ldr	r0, [pc, #12]	; (8000e9c <CAN_transmit_data+0x38>)
 8000e90:	f7ff f9f6 	bl	8000280 <CAN_Transmit>

}
 8000e94:	bf00      	nop
 8000e96:	3718      	adds	r7, #24
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40006400 	.word	0x40006400

08000ea0 <Display_Init>:
#include "DISPLAY_WH1602B_4Bit.h"
//#include <stdio.h>

static char empty_field[] = "                                ";
void Display_Init()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	delay_milis(40);
 8000ea4:	2028      	movs	r0, #40	; 0x28
 8000ea6:	f000 fac9 	bl	800143c <delay_milis>

	Display_Write_Ins(0x02); 	//as per documentation set 4-bit mode
 8000eaa:	2002      	movs	r0, #2
 8000eac:	f000 f81e 	bl	8000eec <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 fac3 	bl	800143c <delay_milis>

//	Display_Write_Ins(0x28);
	Display_Write_Ins(TWO_LINE_MODE);
 8000eb6:	2028      	movs	r0, #40	; 0x28
 8000eb8:	f000 f818 	bl	8000eec <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f000 fabd 	bl	800143c <delay_milis>

//	Display_Write_Ins(0x0F);
	Display_Write_Ins(DISPLAY_ON | CURSOR_OFF | CURSOR_BLINK_OFF);
 8000ec2:	200c      	movs	r0, #12
 8000ec4:	f000 f812 	bl	8000eec <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 fab7 	bl	800143c <delay_milis>

//	Display_Write_Ins(0x01);
	Display_Write_Ins(DISPLAY_CLEAR);
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f000 f80c 	bl	8000eec <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f000 fab1 	bl	800143c <delay_milis>

//	Display_Write_Ins(0x06);
	Display_Write_Ins(INCREMENT_MODE | ENTIRE_SHIFT_OFF);
 8000eda:	2006      	movs	r0, #6
 8000edc:	f000 f806 	bl	8000eec <Display_Write_Ins>
	delay_milis(DISPLAY_DELAY);
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 faab 	bl	800143c <delay_milis>

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <Display_Write_Ins>:

void Display_Write_Ins(char instruction)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RS);
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	484a      	ldr	r0, [pc, #296]	; (8001024 <Display_Write_Ins+0x138>)
 8000efa:	f7ff fd6d 	bl	80009d8 <GPIO_ResetBits>
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RW);
 8000efe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f02:	4848      	ldr	r0, [pc, #288]	; (8001024 <Display_Write_Ins+0x138>)
 8000f04:	f7ff fd68 	bl	80009d8 <GPIO_ResetBits>

	instruction & DISPLAY_BIT_7_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	da05      	bge.n	8000f1c <Display_Write_Ins+0x30>
 8000f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f14:	4843      	ldr	r0, [pc, #268]	; (8001024 <Display_Write_Ins+0x138>)
 8000f16:	f7ff fd50 	bl	80009ba <GPIO_SetBits>
 8000f1a:	e004      	b.n	8000f26 <Display_Write_Ins+0x3a>
 8000f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f20:	4840      	ldr	r0, [pc, #256]	; (8001024 <Display_Write_Ins+0x138>)
 8000f22:	f7ff fd59 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_6_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <Display_Write_Ins+0x50>
 8000f30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f34:	483b      	ldr	r0, [pc, #236]	; (8001024 <Display_Write_Ins+0x138>)
 8000f36:	f7ff fd40 	bl	80009ba <GPIO_SetBits>
 8000f3a:	e004      	b.n	8000f46 <Display_Write_Ins+0x5a>
 8000f3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f40:	4838      	ldr	r0, [pc, #224]	; (8001024 <Display_Write_Ins+0x138>)
 8000f42:	f7ff fd49 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_5_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 0320 	and.w	r3, r3, #32
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d005      	beq.n	8000f5c <Display_Write_Ins+0x70>
 8000f50:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f54:	4833      	ldr	r0, [pc, #204]	; (8001024 <Display_Write_Ins+0x138>)
 8000f56:	f7ff fd30 	bl	80009ba <GPIO_SetBits>
 8000f5a:	e004      	b.n	8000f66 <Display_Write_Ins+0x7a>
 8000f5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f60:	4830      	ldr	r0, [pc, #192]	; (8001024 <Display_Write_Ins+0x138>)
 8000f62:	f7ff fd39 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_4_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	f003 0310 	and.w	r3, r3, #16
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d005      	beq.n	8000f7c <Display_Write_Ins+0x90>
 8000f70:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f74:	482b      	ldr	r0, [pc, #172]	; (8001024 <Display_Write_Ins+0x138>)
 8000f76:	f7ff fd20 	bl	80009ba <GPIO_SetBits>
 8000f7a:	e004      	b.n	8000f86 <Display_Write_Ins+0x9a>
 8000f7c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f80:	4828      	ldr	r0, [pc, #160]	; (8001024 <Display_Write_Ins+0x138>)
 8000f82:	f7ff fd29 	bl	80009d8 <GPIO_ResetBits>

	Display_RW_pusle();
 8000f86:	f000 f915 	bl	80011b4 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 fa56 	bl	800143c <delay_milis>

	instruction & DISPLAY_BIT_3_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <Display_Write_Ins+0xba>
 8000f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f9e:	4821      	ldr	r0, [pc, #132]	; (8001024 <Display_Write_Ins+0x138>)
 8000fa0:	f7ff fd0b 	bl	80009ba <GPIO_SetBits>
 8000fa4:	e004      	b.n	8000fb0 <Display_Write_Ins+0xc4>
 8000fa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000faa:	481e      	ldr	r0, [pc, #120]	; (8001024 <Display_Write_Ins+0x138>)
 8000fac:	f7ff fd14 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_2_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 0304 	and.w	r3, r3, #4
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d005      	beq.n	8000fc6 <Display_Write_Ins+0xda>
 8000fba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fbe:	4819      	ldr	r0, [pc, #100]	; (8001024 <Display_Write_Ins+0x138>)
 8000fc0:	f7ff fcfb 	bl	80009ba <GPIO_SetBits>
 8000fc4:	e004      	b.n	8000fd0 <Display_Write_Ins+0xe4>
 8000fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fca:	4816      	ldr	r0, [pc, #88]	; (8001024 <Display_Write_Ins+0x138>)
 8000fcc:	f7ff fd04 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_1_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d005      	beq.n	8000fe6 <Display_Write_Ins+0xfa>
 8000fda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fde:	4811      	ldr	r0, [pc, #68]	; (8001024 <Display_Write_Ins+0x138>)
 8000fe0:	f7ff fceb 	bl	80009ba <GPIO_SetBits>
 8000fe4:	e004      	b.n	8000ff0 <Display_Write_Ins+0x104>
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	480e      	ldr	r0, [pc, #56]	; (8001024 <Display_Write_Ins+0x138>)
 8000fec:	f7ff fcf4 	bl	80009d8 <GPIO_ResetBits>
	instruction & DISPLAY_BIT_0_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d005      	beq.n	8001006 <Display_Write_Ins+0x11a>
 8000ffa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ffe:	4809      	ldr	r0, [pc, #36]	; (8001024 <Display_Write_Ins+0x138>)
 8001000:	f7ff fcdb 	bl	80009ba <GPIO_SetBits>
 8001004:	e004      	b.n	8001010 <Display_Write_Ins+0x124>
 8001006:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100a:	4806      	ldr	r0, [pc, #24]	; (8001024 <Display_Write_Ins+0x138>)
 800100c:	f7ff fce4 	bl	80009d8 <GPIO_ResetBits>

	Display_RW_pusle();
 8001010:	f000 f8d0 	bl	80011b4 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8001014:	2001      	movs	r0, #1
 8001016:	f000 fa11 	bl	800143c <delay_milis>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40021000 	.word	0x40021000

08001028 <Display_Write_Data>:

void Display_Write_Data(char data)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
	GPIO_SetBits(DISPLAY_PORT, DISPLAY_RS);
 8001032:	2180      	movs	r1, #128	; 0x80
 8001034:	484a      	ldr	r0, [pc, #296]	; (8001160 <Display_Write_Data+0x138>)
 8001036:	f7ff fcc0 	bl	80009ba <GPIO_SetBits>
	GPIO_ResetBits(DISPLAY_PORT, DISPLAY_RW);
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	4848      	ldr	r0, [pc, #288]	; (8001160 <Display_Write_Data+0x138>)
 8001040:	f7ff fcca 	bl	80009d8 <GPIO_ResetBits>

	data & DISPLAY_BIT_7_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	2b00      	cmp	r3, #0
 800104a:	da05      	bge.n	8001058 <Display_Write_Data+0x30>
 800104c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001050:	4843      	ldr	r0, [pc, #268]	; (8001160 <Display_Write_Data+0x138>)
 8001052:	f7ff fcb2 	bl	80009ba <GPIO_SetBits>
 8001056:	e004      	b.n	8001062 <Display_Write_Data+0x3a>
 8001058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800105c:	4840      	ldr	r0, [pc, #256]	; (8001160 <Display_Write_Data+0x138>)
 800105e:	f7ff fcbb 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_6_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <Display_Write_Data+0x50>
 800106c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001070:	483b      	ldr	r0, [pc, #236]	; (8001160 <Display_Write_Data+0x138>)
 8001072:	f7ff fca2 	bl	80009ba <GPIO_SetBits>
 8001076:	e004      	b.n	8001082 <Display_Write_Data+0x5a>
 8001078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107c:	4838      	ldr	r0, [pc, #224]	; (8001160 <Display_Write_Data+0x138>)
 800107e:	f7ff fcab 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_5_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 0320 	and.w	r3, r3, #32
 8001088:	2b00      	cmp	r3, #0
 800108a:	d005      	beq.n	8001098 <Display_Write_Data+0x70>
 800108c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001090:	4833      	ldr	r0, [pc, #204]	; (8001160 <Display_Write_Data+0x138>)
 8001092:	f7ff fc92 	bl	80009ba <GPIO_SetBits>
 8001096:	e004      	b.n	80010a2 <Display_Write_Data+0x7a>
 8001098:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109c:	4830      	ldr	r0, [pc, #192]	; (8001160 <Display_Write_Data+0x138>)
 800109e:	f7ff fc9b 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_4_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 0310 	and.w	r3, r3, #16
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d005      	beq.n	80010b8 <Display_Write_Data+0x90>
 80010ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b0:	482b      	ldr	r0, [pc, #172]	; (8001160 <Display_Write_Data+0x138>)
 80010b2:	f7ff fc82 	bl	80009ba <GPIO_SetBits>
 80010b6:	e004      	b.n	80010c2 <Display_Write_Data+0x9a>
 80010b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010bc:	4828      	ldr	r0, [pc, #160]	; (8001160 <Display_Write_Data+0x138>)
 80010be:	f7ff fc8b 	bl	80009d8 <GPIO_ResetBits>

	Display_RW_pusle();
 80010c2:	f000 f877 	bl	80011b4 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 80010c6:	2001      	movs	r0, #1
 80010c8:	f000 f9b8 	bl	800143c <delay_milis>

	data & DISPLAY_BIT_3_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB7) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB7);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <Display_Write_Data+0xba>
 80010d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <Display_Write_Data+0x138>)
 80010dc:	f7ff fc6d 	bl	80009ba <GPIO_SetBits>
 80010e0:	e004      	b.n	80010ec <Display_Write_Data+0xc4>
 80010e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e6:	481e      	ldr	r0, [pc, #120]	; (8001160 <Display_Write_Data+0x138>)
 80010e8:	f7ff fc76 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_2_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB6) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB6);
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d005      	beq.n	8001102 <Display_Write_Data+0xda>
 80010f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010fa:	4819      	ldr	r0, [pc, #100]	; (8001160 <Display_Write_Data+0x138>)
 80010fc:	f7ff fc5d 	bl	80009ba <GPIO_SetBits>
 8001100:	e004      	b.n	800110c <Display_Write_Data+0xe4>
 8001102:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001106:	4816      	ldr	r0, [pc, #88]	; (8001160 <Display_Write_Data+0x138>)
 8001108:	f7ff fc66 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_1_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB5) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB5);
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 0302 	and.w	r3, r3, #2
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <Display_Write_Data+0xfa>
 8001116:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <Display_Write_Data+0x138>)
 800111c:	f7ff fc4d 	bl	80009ba <GPIO_SetBits>
 8001120:	e004      	b.n	800112c <Display_Write_Data+0x104>
 8001122:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <Display_Write_Data+0x138>)
 8001128:	f7ff fc56 	bl	80009d8 <GPIO_ResetBits>
	data & DISPLAY_BIT_0_MASK ? GPIO_SetBits(DISPLAY_PORT, DISPLAY_DB4) : GPIO_ResetBits(DISPLAY_PORT, DISPLAY_DB4);
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d005      	beq.n	8001142 <Display_Write_Data+0x11a>
 8001136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113a:	4809      	ldr	r0, [pc, #36]	; (8001160 <Display_Write_Data+0x138>)
 800113c:	f7ff fc3d 	bl	80009ba <GPIO_SetBits>
 8001140:	e004      	b.n	800114c <Display_Write_Data+0x124>
 8001142:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001146:	4806      	ldr	r0, [pc, #24]	; (8001160 <Display_Write_Data+0x138>)
 8001148:	f7ff fc46 	bl	80009d8 <GPIO_ResetBits>

	Display_RW_pusle();
 800114c:	f000 f832 	bl	80011b4 <Display_RW_pusle>
	delay_milis(DISPLAY_DELAY);
 8001150:	2001      	movs	r0, #1
 8001152:	f000 f973 	bl	800143c <delay_milis>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40021000 	.word	0x40021000

08001164 <Display_init_GPIO>:
	}
	delay_milis(DISPLAY_DELAY);
}

void Display_init_GPIO(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	delay_milis(400);
 800116a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800116e:	f000 f965 	bl	800143c <delay_milis>
	setup_clock_for_GPIO(DISPLAY_PORT, ENABLE);
 8001172:	2101      	movs	r1, #1
 8001174:	480e      	ldr	r0, [pc, #56]	; (80011b0 <Display_init_GPIO+0x4c>)
 8001176:	f000 f987 	bl	8001488 <setup_clock_for_GPIO>
	GPIO_InitTypeDef DISPLAY_GPIO;
	DISPLAY_GPIO.GPIO_Mode = GPIO_Mode_OUT;
 800117a:	2301      	movs	r3, #1
 800117c:	713b      	strb	r3, [r7, #4]
	DISPLAY_GPIO.GPIO_Speed = GPIO_Speed_50MHz;
 800117e:	2302      	movs	r3, #2
 8001180:	717b      	strb	r3, [r7, #5]
	DISPLAY_GPIO.GPIO_OType = GPIO_OType_PP;
 8001182:	2300      	movs	r3, #0
 8001184:	71bb      	strb	r3, [r7, #6]
	DISPLAY_GPIO.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	71fb      	strb	r3, [r7, #7]

	DISPLAY_GPIO.GPIO_Pin = DISPLAY_RS |  DISPLAY_RW | DISPLAY_ENA | DISPLAY_DB7 | DISPLAY_DB6 | DISPLAY_DB5 | DISPLAY_DB4;
 800118a:	f64f 4380 	movw	r3, #64640	; 0xfc80
 800118e:	603b      	str	r3, [r7, #0]
	GPIO_Init(DISPLAY_PORT, &DISPLAY_GPIO);
 8001190:	463b      	mov	r3, r7
 8001192:	4619      	mov	r1, r3
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <Display_init_GPIO+0x4c>)
 8001196:	f7ff fb81 	bl	800089c <GPIO_Init>
	GPIO_SetBits(DISPLAY_PORT, DISPLAY_GPIO.GPIO_Pin);
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	b29b      	uxth	r3, r3
 800119e:	4619      	mov	r1, r3
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <Display_init_GPIO+0x4c>)
 80011a2:	f7ff fc0a 	bl	80009ba <GPIO_SetBits>
}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <Display_RW_pusle>:

//pulse
void Display_RW_pusle(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
    GPIO_SetBits(DISPLAY_PORT, DISPLAY_ENA);
 80011b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011bc:	4806      	ldr	r0, [pc, #24]	; (80011d8 <Display_RW_pusle+0x24>)
 80011be:	f7ff fbfc 	bl	80009ba <GPIO_SetBits>
    delay_milis(DISPLAY_DELAY);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f000 f93a 	bl	800143c <delay_milis>
    GPIO_ResetBits(DISPLAY_PORT, DISPLAY_ENA);
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <Display_RW_pusle+0x24>)
 80011ce:	f7ff fc03 	bl	80009d8 <GPIO_ResetBits>
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <setup_Display>:
		Display_Write_Data(' ');
	}
}

void setup_Display(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	Display_init_GPIO();
 80011e0:	f7ff ffc0 	bl	8001164 <Display_init_GPIO>
	Display_Init();
 80011e4:	f7ff fe5c 	bl	8000ea0 <Display_Init>
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <setup_first_line>:

void setup_first_line() {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	Display_Write_Ins(GO_TO_START_FIRST_LINE);
 80011f0:	2080      	movs	r0, #128	; 0x80
 80011f2:	f7ff fe7b 	bl	8000eec <Display_Write_Ins>
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}

080011fa <setup_second_line>:

void setup_second_line() {
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
	Display_Write_Ins(GO_TO_START_SECOND_LINE);
 80011fe:	20c0      	movs	r0, #192	; 0xc0
 8001200:	f7ff fe74 	bl	8000eec <Display_Write_Ins>
}
 8001204:	bf00      	nop
 8001206:	bd80      	pop	{r7, pc}

08001208 <print_display>:

void print_display(char ch) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
	Display_Write_Data(ch);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff07 	bl	8001028 <Display_Write_Data>
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <print_display_array>:

void print_display_array(char array[4]) {
 8001222:	b580      	push	{r7, lr}
 8001224:	b084      	sub	sp, #16
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
	for (int i=0; i<4; ++i) {
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	e009      	b.n	8001244 <print_display_array+0x22>
		Display_Write_Data(array[i]);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fef5 	bl	8001028 <Display_Write_Data>
	for (int i=0; i<4; ++i) {
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	3301      	adds	r3, #1
 8001242:	60fb      	str	r3, [r7, #12]
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2b03      	cmp	r3, #3
 8001248:	ddf2      	ble.n	8001230 <print_display_array+0xe>
	}
}
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <Display_example>:

void Display_example(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	Display_init_GPIO();
 8001258:	f7ff ff84 	bl	8001164 <Display_init_GPIO>

	Display_Init();
 800125c:	f7ff fe20 	bl	8000ea0 <Display_Init>

	Display_Write_Ins(GO_TO_START_FIRST_LINE);
 8001260:	2080      	movs	r0, #128	; 0x80
 8001262:	f7ff fe43 	bl	8000eec <Display_Write_Ins>
	Display_Write_Data('H');
 8001266:	2048      	movs	r0, #72	; 0x48
 8001268:	f7ff fede 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('e');
 800126c:	2065      	movs	r0, #101	; 0x65
 800126e:	f7ff fedb 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('l');
 8001272:	206c      	movs	r0, #108	; 0x6c
 8001274:	f7ff fed8 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('l');
 8001278:	206c      	movs	r0, #108	; 0x6c
 800127a:	f7ff fed5 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('o');
 800127e:	206f      	movs	r0, #111	; 0x6f
 8001280:	f7ff fed2 	bl	8001028 <Display_Write_Data>
	Display_Write_Data(',');
 8001284:	202c      	movs	r0, #44	; 0x2c
 8001286:	f7ff fecf 	bl	8001028 <Display_Write_Data>
	Display_Write_Data(' ');
 800128a:	2020      	movs	r0, #32
 800128c:	f7ff fecc 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('E');
 8001290:	2045      	movs	r0, #69	; 0x45
 8001292:	f7ff fec9 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('m');
 8001296:	206d      	movs	r0, #109	; 0x6d
 8001298:	f7ff fec6 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('b');
 800129c:	2062      	movs	r0, #98	; 0x62
 800129e:	f7ff fec3 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('e');
 80012a2:	2065      	movs	r0, #101	; 0x65
 80012a4:	f7ff fec0 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('d');
 80012a8:	2064      	movs	r0, #100	; 0x64
 80012aa:	f7ff febd 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('d');
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f7ff feba 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('e');
 80012b4:	2065      	movs	r0, #101	; 0x65
 80012b6:	f7ff feb7 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('d');
 80012ba:	2064      	movs	r0, #100	; 0x64
 80012bc:	f7ff feb4 	bl	8001028 <Display_Write_Data>


	delay_milis(1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f000 f8bb 	bl	800143c <delay_milis>

	Display_Write_Ins(GO_TO_START_SECOND_LINE+5);
 80012c6:	20c5      	movs	r0, #197	; 0xc5
 80012c8:	f7ff fe10 	bl	8000eec <Display_Write_Ins>
	Display_Write_Data('N');
 80012cc:	204e      	movs	r0, #78	; 0x4e
 80012ce:	f7ff feab 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('U');
 80012d2:	2055      	movs	r0, #85	; 0x55
 80012d4:	f7ff fea8 	bl	8001028 <Display_Write_Data>
	Display_Write_Data(' ');
 80012d8:	2020      	movs	r0, #32
 80012da:	f7ff fea5 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('K');
 80012de:	204b      	movs	r0, #75	; 0x4b
 80012e0:	f7ff fea2 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('P');
 80012e4:	2050      	movs	r0, #80	; 0x50
 80012e6:	f7ff fe9f 	bl	8001028 <Display_Write_Data>
	Display_Write_Data('I');
 80012ea:	2049      	movs	r0, #73	; 0x49
 80012ec:	f7ff fe9c 	bl	8001028 <Display_Write_Data>
//	Display_Write_Data('E');
//	Display_Write_Data('R');
//	Display_Write_Data('!');
//	Display_Write_Data('!');
//	Display_Write_Data('!');
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <setup_LED>:
#include "clock_config.h"
#include "LEDs.h"


void setup_LED(GPIO_TypeDef* GPIOx, uint16_t pin_for_LEDx)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	460b      	mov	r3, r1
 80012fe:	807b      	strh	r3, [r7, #2]
	setup_clock_for_GPIO(GPIOx, ENABLE);
 8001300:	2101      	movs	r1, #1
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8c0 	bl	8001488 <setup_clock_for_GPIO>
	GPIO_InitTypeDef gpio_led;
	gpio_led.GPIO_Pin = pin_for_LEDx;
 8001308:	887b      	ldrh	r3, [r7, #2]
 800130a:	60bb      	str	r3, [r7, #8]
	gpio_led.GPIO_OType = GPIO_OType_PP;
 800130c:	2300      	movs	r3, #0
 800130e:	73bb      	strb	r3, [r7, #14]
	gpio_led.GPIO_Mode = GPIO_Mode_OUT;
 8001310:	2301      	movs	r3, #1
 8001312:	733b      	strb	r3, [r7, #12]
	gpio_led.GPIO_PuPd = GPIO_PuPd_UP;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
	gpio_led.GPIO_Speed = GPIO_Speed_50MHz;
 8001318:	2302      	movs	r3, #2
 800131a:	737b      	strb	r3, [r7, #13]
	GPIO_Init(GPIOx, &gpio_led);
 800131c:	f107 0308 	add.w	r3, r7, #8
 8001320:	4619      	mov	r1, r3
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff faba 	bl	800089c <GPIO_Init>
	GPIO_ResetBits(GPIOx, pin_for_LEDx);
 8001328:	887b      	ldrh	r3, [r7, #2]
 800132a:	4619      	mov	r1, r3
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff fb53 	bl	80009d8 <GPIO_ResetBits>
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <USART_send_character>:
	USART_Cmd(USARTx, ENABLE);

}

void USART_send_character(USART_TypeDef *USARTx, char ch)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
 8001342:	460b      	mov	r3, r1
 8001344:	70fb      	strb	r3, [r7, #3]
	while (USART_GetFlagStatus(USARTx, USART_FLAG_TC) == RESET){}
 8001346:	bf00      	nop
 8001348:	2140      	movs	r1, #64	; 0x40
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fd6e 	bl	8000e2c <USART_GetFlagStatus>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f8      	beq.n	8001348 <USART_send_character+0xe>
	USART_SendData(USARTx, (uint16_t)ch);
 8001356:	78fb      	ldrb	r3, [r7, #3]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4619      	mov	r1, r3
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff fd43 	bl	8000de8 <USART_SendData>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <USART_send_string>:

void USART_send_string(USART_TypeDef *USARTx, char *str)
{
 800136a:	b580      	push	{r7, lr}
 800136c:	b082      	sub	sp, #8
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
 8001372:	6039      	str	r1, [r7, #0]
	while(*str != '\0')
 8001374:	e007      	b.n	8001386 <USART_send_string+0x1c>
	{
		USART_send_character(USARTx, *str++);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	603a      	str	r2, [r7, #0]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ffda 	bl	800133a <USART_send_character>
	while(*str != '\0')
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f3      	bne.n	8001376 <USART_send_string+0xc>
	}
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <USART_receive_character>:
	USART_send_character(USARTx, '\n');
	USART_send_character(USARTx, '\r');
}

char USART_receive_character(USART_TypeDef *USARTx)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	return USART_ReceiveData(USARTx);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff fd33 	bl	8000e0c <USART_ReceiveData>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b2db      	uxtb	r3, r3
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <USART_printf>:
{
	memset(USART_printf_buffer, 0, USART3_BUFF_MAX_SIZE);
}

void USART_printf(USART_TypeDef *USARTx, char *formater, ...)
{
 80013b4:	b40e      	push	{r1, r2, r3}
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
	va_list argumerts_list;
	va_start (argumerts_list, formater);
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	60fb      	str	r3, [r7, #12]
	vsprintf(USART_printf_buffer, formater, argumerts_list);
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	69f9      	ldr	r1, [r7, #28]
 80013c8:	4806      	ldr	r0, [pc, #24]	; (80013e4 <USART_printf+0x30>)
 80013ca:	f000 fddb 	bl	8001f84 <vsiprintf>
	USART_send_string(USARTx, USART_printf_buffer);
 80013ce:	4905      	ldr	r1, [pc, #20]	; (80013e4 <USART_printf+0x30>)
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff ffca 	bl	800136a <USART_send_string>

}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013e0:	b003      	add	sp, #12
 80013e2:	4770      	bx	lr
 80013e4:	20000094 	.word	0x20000094

080013e8 <setup_clock>:
#include "clock_config.h"
static RCC_ClocksTypeDef RCC_Clocks;

void setup_clock(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af02      	add	r7, sp, #8
//        while (1);
//    }
//
//    SystemCoreClockUpdate();

	RCC_HSEConfig(RCC_HSE_ON);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f7ff fb14 	bl	8000a1c <RCC_HSEConfig>
	while( RCC_WaitForHSEStartUp() == ERROR ){}
 80013f4:	bf00      	nop
 80013f6:	f7ff fb25 	bl	8000a44 <RCC_WaitForHSEStartUp>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0fa      	beq.n	80013f6 <setup_clock+0xe>
	RCC_PLLConfig(RCC_PLLSource_HSE, M_DIVIDER, N_MULIPLICATOR, P_DIVIDER, Q_DIVIDER);
 8001400:	2308      	movs	r3, #8
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	2302      	movs	r3, #2
 8001406:	22a8      	movs	r2, #168	; 0xa8
 8001408:	2104      	movs	r1, #4
 800140a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800140e:	f7ff fb41 	bl	8000a94 <RCC_PLLConfig>
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 8001412:	2001      	movs	r0, #1
 8001414:	f7ff fb6e 	bl	8000af4 <RCC_SYSCLKConfig>
	RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fb87 	bl	8000b2c <RCC_HCLKConfig>
	RCC_PCLK1Config(RCC_HCLK_Div4);
 800141e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001422:	f7ff fb9f 	bl	8000b64 <RCC_PCLK1Config>
	RCC_PCLK2Config(RCC_HCLK_Div2);
 8001426:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800142a:	f7ff fbb7 	bl	8000b9c <RCC_PCLK2Config>
	RCC_PLLCmd(ENABLE);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff fb50 	bl	8000ad4 <RCC_PLLCmd>
//	RCC_ClocksTypeDef RCC_Clocks;
//	RCC_GetClocksFreq(&RCC_Clocks);
//	SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000);

	/*SysTick config*/
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
	...

0800143c <delay_milis>:
//	timing_dalay = RCC_Clocks.HCLK_Frequency/1000 * milisecond;
//	while(timing_dalay--);
}

void delay_milis(uint32_t milisecond)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
//	timing_dalay = RCC_Clocks.HCLK_Frequency/10000000 * microsecond;
//	while(timing_dalay--);
//	timing_dalay = microsecond;
//	while(timing_dalay);

	RCC_GetClocksFreq(&RCC_Clocks);
 8001444:	480d      	ldr	r0, [pc, #52]	; (800147c <delay_milis+0x40>)
 8001446:	f7ff fbc7 	bl	8000bd8 <RCC_GetClocksFreq>
	timing_dalay = RCC_Clocks.HCLK_Frequency/10000 * milisecond;
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <delay_milis+0x40>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4a0c      	ldr	r2, [pc, #48]	; (8001480 <delay_milis+0x44>)
 8001450:	fba2 2303 	umull	r2, r3, r2, r3
 8001454:	0b5b      	lsrs	r3, r3, #13
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	4a09      	ldr	r2, [pc, #36]	; (8001484 <delay_milis+0x48>)
 800145e:	6013      	str	r3, [r2, #0]
	while(timing_dalay--);
 8001460:	bf00      	nop
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <delay_milis+0x48>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	4906      	ldr	r1, [pc, #24]	; (8001484 <delay_milis+0x48>)
 800146a:	600a      	str	r2, [r1, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f8      	bne.n	8001462 <delay_milis+0x26>

//	milisecond*=800000;
//	while(milisecond--);
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000194 	.word	0x20000194
 8001480:	d1b71759 	.word	0xd1b71759
 8001484:	200001bc 	.word	0x200001bc

08001488 <setup_clock_for_GPIO>:

void setup_clock_for_GPIO(GPIO_TypeDef* GPIOx, FunctionalState state)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
	switch ((int)GPIOx) {
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <setup_clock_for_GPIO+0x88>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d02d      	beq.n	80014f8 <setup_clock_for_GPIO+0x70>
 800149c:	4a1c      	ldr	r2, [pc, #112]	; (8001510 <setup_clock_for_GPIO+0x88>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	dc30      	bgt.n	8001504 <setup_clock_for_GPIO+0x7c>
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <setup_clock_for_GPIO+0x8c>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d021      	beq.n	80014ec <setup_clock_for_GPIO+0x64>
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <setup_clock_for_GPIO+0x8c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	dc2a      	bgt.n	8001504 <setup_clock_for_GPIO+0x7c>
 80014ae:	4a1a      	ldr	r2, [pc, #104]	; (8001518 <setup_clock_for_GPIO+0x90>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d015      	beq.n	80014e0 <setup_clock_for_GPIO+0x58>
 80014b4:	4a18      	ldr	r2, [pc, #96]	; (8001518 <setup_clock_for_GPIO+0x90>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	dc24      	bgt.n	8001504 <setup_clock_for_GPIO+0x7c>
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <setup_clock_for_GPIO+0x94>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d003      	beq.n	80014c8 <setup_clock_for_GPIO+0x40>
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <setup_clock_for_GPIO+0x98>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d006      	beq.n	80014d4 <setup_clock_for_GPIO+0x4c>
			break;
		case (int)GPIOE:
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, state); //APB1
			break;
		default:
			break;
 80014c6:	e01d      	b.n	8001504 <setup_clock_for_GPIO+0x7c>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, state); //APB1
 80014c8:	78fb      	ldrb	r3, [r7, #3]
 80014ca:	4619      	mov	r1, r3
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fc31 	bl	8000d34 <RCC_AHB1PeriphClockCmd>
			break;
 80014d2:	e018      	b.n	8001506 <setup_clock_for_GPIO+0x7e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, state); //APB1
 80014d4:	78fb      	ldrb	r3, [r7, #3]
 80014d6:	4619      	mov	r1, r3
 80014d8:	2002      	movs	r0, #2
 80014da:	f7ff fc2b 	bl	8000d34 <RCC_AHB1PeriphClockCmd>
			break;
 80014de:	e012      	b.n	8001506 <setup_clock_for_GPIO+0x7e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, state); //APB1
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	4619      	mov	r1, r3
 80014e4:	2004      	movs	r0, #4
 80014e6:	f7ff fc25 	bl	8000d34 <RCC_AHB1PeriphClockCmd>
			break;
 80014ea:	e00c      	b.n	8001506 <setup_clock_for_GPIO+0x7e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, state); //APB1
 80014ec:	78fb      	ldrb	r3, [r7, #3]
 80014ee:	4619      	mov	r1, r3
 80014f0:	2008      	movs	r0, #8
 80014f2:	f7ff fc1f 	bl	8000d34 <RCC_AHB1PeriphClockCmd>
			break;
 80014f6:	e006      	b.n	8001506 <setup_clock_for_GPIO+0x7e>
			RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, state); //APB1
 80014f8:	78fb      	ldrb	r3, [r7, #3]
 80014fa:	4619      	mov	r1, r3
 80014fc:	2010      	movs	r0, #16
 80014fe:	f7ff fc19 	bl	8000d34 <RCC_AHB1PeriphClockCmd>
			break;
 8001502:	e000      	b.n	8001506 <setup_clock_for_GPIO+0x7e>
			break;
 8001504:	bf00      	nop
	}
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000
 8001514:	40020c00 	.word	0x40020c00
 8001518:	40020800 	.word	0x40020800
 800151c:	40020000 	.word	0x40020000
 8001520:	40020400 	.word	0x40020400

08001524 <EXTI0_IRQHandler>:

volatile uint32_t usart3_buffer_iterrator;


void EXTI0_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) == SET)
 8001528:	2001      	movs	r0, #1
 800152a:	f7ff f983 	bl	8000834 <EXTI_GetITStatus>
 800152e:	4603      	mov	r3, r0
 8001530:	2b01      	cmp	r3, #1
 8001532:	d108      	bne.n	8001546 <EXTI0_IRQHandler+0x22>
	{
		//TODO USER_DISCO_BUTTON
		 USER_BUTTON_state =~ USER_BUTTON_state;
 8001534:	4b05      	ldr	r3, [pc, #20]	; (800154c <EXTI0_IRQHandler+0x28>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	43db      	mvns	r3, r3
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b03      	ldr	r3, [pc, #12]	; (800154c <EXTI0_IRQHandler+0x28>)
 800153e:	701a      	strb	r2, [r3, #0]
		 EXTI_ClearITPendingBit(EXTI_Line0);
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff f99b 	bl	800087c <EXTI_ClearITPendingBit>

	}
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001b8 	.word	0x200001b8

08001550 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line6) == SET)
 8001554:	2040      	movs	r0, #64	; 0x40
 8001556:	f7ff f96d 	bl	8000834 <EXTI_GetITStatus>
 800155a:	4603      	mov	r3, r0
 800155c:	2b01      	cmp	r3, #1
 800155e:	d108      	bne.n	8001572 <EXTI9_5_IRQHandler+0x22>
	{
		//TODO UP_BUTTON
		UP_BUTTON_state =~ UP_BUTTON_state;
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <EXTI9_5_IRQHandler+0x6c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	43db      	mvns	r3, r3
 8001566:	b2da      	uxtb	r2, r3
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <EXTI9_5_IRQHandler+0x6c>)
 800156a:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line6);
 800156c:	2040      	movs	r0, #64	; 0x40
 800156e:	f7ff f985 	bl	800087c <EXTI_ClearITPendingBit>

	}
	if(EXTI_GetITStatus(EXTI_Line8) == SET)
 8001572:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001576:	f7ff f95d 	bl	8000834 <EXTI_GetITStatus>
 800157a:	4603      	mov	r3, r0
 800157c:	2b01      	cmp	r3, #1
 800157e:	d109      	bne.n	8001594 <EXTI9_5_IRQHandler+0x44>
	{
		//TODO DOWN_BUTTON
		DOWN_BUTTON_state =~ DOWN_BUTTON_state;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <EXTI9_5_IRQHandler+0x70>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	43db      	mvns	r3, r3
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <EXTI9_5_IRQHandler+0x70>)
 800158a:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line8);
 800158c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001590:	f7ff f974 	bl	800087c <EXTI_ClearITPendingBit>

	}
	if(EXTI_GetITStatus(EXTI_Line9) == SET)
 8001594:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001598:	f7ff f94c 	bl	8000834 <EXTI_GetITStatus>
 800159c:	4603      	mov	r3, r0
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d109      	bne.n	80015b6 <EXTI9_5_IRQHandler+0x66>
	{
		//TODO LEFT_BUTTON
		LEFT_BUTTON_state =~ LEFT_BUTTON_state;
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <EXTI9_5_IRQHandler+0x74>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <EXTI9_5_IRQHandler+0x74>)
 80015ac:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line9);
 80015ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015b2:	f7ff f963 	bl	800087c <EXTI_ClearITPendingBit>
	}
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	200001b6 	.word	0x200001b6
 80015c0:	200001b5 	.word	0x200001b5
 80015c4:	200001b9 	.word	0x200001b9

080015c8 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line15) == SET)
 80015cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015d0:	f7ff f930 	bl	8000834 <EXTI_GetITStatus>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d109      	bne.n	80015ee <EXTI15_10_IRQHandler+0x26>
	{
		//TODO OK BUTTON
		OK_BUTTON_state =~ OK_BUTTON_state;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <EXTI15_10_IRQHandler+0x4c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	43db      	mvns	r3, r3
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <EXTI15_10_IRQHandler+0x4c>)
 80015e4:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line15);
 80015e6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80015ea:	f7ff f947 	bl	800087c <EXTI_ClearITPendingBit>
	}
	if(EXTI_GetITStatus(EXTI_Line11) == SET)
 80015ee:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80015f2:	f7ff f91f 	bl	8000834 <EXTI_GetITStatus>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d109      	bne.n	8001610 <EXTI15_10_IRQHandler+0x48>
	{
		//TODO RIGTH BUTTON
		RIGHT_BUTTON_state =~ RIGHT_BUTTON_state;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <EXTI15_10_IRQHandler+0x50>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	43db      	mvns	r3, r3
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <EXTI15_10_IRQHandler+0x50>)
 8001606:	701a      	strb	r2, [r3, #0]
		EXTI_ClearITPendingBit(EXTI_Line11);
 8001608:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800160c:	f7ff f936 	bl	800087c <EXTI_ClearITPendingBit>
	}
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200001b7 	.word	0x200001b7
 8001618:	200001b4 	.word	0x200001b4

0800161c <USART3_IRQHandler>:
  * @param  None
  * @retval None
  */

void USART3_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
	if (USART_GetFlagStatus(USART3, USART_FLAG_RXNE) == SET)
 8001622:	2120      	movs	r1, #32
 8001624:	4839      	ldr	r0, [pc, #228]	; (800170c <USART3_IRQHandler+0xf0>)
 8001626:	f7ff fc01 	bl	8000e2c <USART_GetFlagStatus>
 800162a:	4603      	mov	r3, r0
 800162c:	2b01      	cmp	r3, #1
 800162e:	d169      	bne.n	8001704 <USART3_IRQHandler+0xe8>
	{

		if (USART3_RX_DATA == ALREADY_SENT)
 8001630:	4b37      	ldr	r3, [pc, #220]	; (8001710 <USART3_IRQHandler+0xf4>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d102      	bne.n	800163e <USART3_IRQHandler+0x22>
		{
			usart3_buffer_iterrator = 0;
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <USART3_IRQHandler+0xf8>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
		}
		USART3_RX_DATA = PREPARING;
 800163e:	4b34      	ldr	r3, [pc, #208]	; (8001710 <USART3_IRQHandler+0xf4>)
 8001640:	2200      	movs	r2, #0
 8001642:	701a      	strb	r2, [r3, #0]
		char ch;
		USART3_BUFFER[USART3_BUFF_MAX_SIZE-1] = '\0';
 8001644:	4b34      	ldr	r3, [pc, #208]	; (8001718 <USART3_IRQHandler+0xfc>)
 8001646:	2200      	movs	r2, #0
 8001648:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

		ch = USART_receive_character(USART3);
 800164c:	482f      	ldr	r0, [pc, #188]	; (800170c <USART3_IRQHandler+0xf0>)
 800164e:	f7ff fea3 	bl	8001398 <USART_receive_character>
 8001652:	4603      	mov	r3, r0
 8001654:	72fb      	strb	r3, [r7, #11]
		if (ch == 0x0D) //pressed Enter
 8001656:	7afb      	ldrb	r3, [r7, #11]
 8001658:	2b0d      	cmp	r3, #13
 800165a:	d10b      	bne.n	8001674 <USART3_IRQHandler+0x58>
		{
			USART3_BUFFER[usart3_buffer_iterrator] = '\0';
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <USART3_IRQHandler+0xf8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a2d      	ldr	r2, [pc, #180]	; (8001718 <USART3_IRQHandler+0xfc>)
 8001662:	2100      	movs	r1, #0
 8001664:	54d1      	strb	r1, [r2, r3]
			usart3_buffer_iterrator = 0;
 8001666:	4b2b      	ldr	r3, [pc, #172]	; (8001714 <USART3_IRQHandler+0xf8>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
			USART3_RX_DATA = READY;
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <USART3_IRQHandler+0xf4>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
			return;
 8001672:	e047      	b.n	8001704 <USART3_IRQHandler+0xe8>
		}
		if (ch == 0x7F) //pressed Backspace
 8001674:	7afb      	ldrb	r3, [r7, #11]
 8001676:	2b7f      	cmp	r3, #127	; 0x7f
 8001678:	d12b      	bne.n	80016d2 <USART3_IRQHandler+0xb6>
		{
			if (usart3_buffer_iterrator > 0)
 800167a:	4b26      	ldr	r3, [pc, #152]	; (8001714 <USART3_IRQHandler+0xf8>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d027      	beq.n	80016d2 <USART3_IRQHandler+0xb6>
			{
				//calculate current length
				uint32_t length;
				length = strlen(USART3_BUFFER);
 8001682:	4825      	ldr	r0, [pc, #148]	; (8001718 <USART3_IRQHandler+0xfc>)
 8001684:	f7fe fda4 	bl	80001d0 <strlen>
 8001688:	6078      	str	r0, [r7, #4]
				usart3_buffer_iterrator--;
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <USART3_IRQHandler+0xf8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	3b01      	subs	r3, #1
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <USART3_IRQHandler+0xf8>)
 8001692:	6013      	str	r3, [r2, #0]
				USART3_BUFFER[usart3_buffer_iterrator] = '\0';
 8001694:	4b1f      	ldr	r3, [pc, #124]	; (8001714 <USART3_IRQHandler+0xf8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <USART3_IRQHandler+0xfc>)
 800169a:	2100      	movs	r1, #0
 800169c:	54d1      	strb	r1, [r2, r3]
				// fill current line spaces
				USART_send_character(USART3, '\r');
 800169e:	210d      	movs	r1, #13
 80016a0:	481a      	ldr	r0, [pc, #104]	; (800170c <USART3_IRQHandler+0xf0>)
 80016a2:	f7ff fe4a 	bl	800133a <USART_send_character>
				for (uint32_t j = 0; j < length; ++j)
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	e006      	b.n	80016ba <USART3_IRQHandler+0x9e>
				{
					USART_send_character(USART3, ' ');
 80016ac:	2120      	movs	r1, #32
 80016ae:	4817      	ldr	r0, [pc, #92]	; (800170c <USART3_IRQHandler+0xf0>)
 80016b0:	f7ff fe43 	bl	800133a <USART_send_character>
				for (uint32_t j = 0; j < length; ++j)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	3301      	adds	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3f4      	bcc.n	80016ac <USART3_IRQHandler+0x90>
				}
				//print new line without deleted character
				USART_send_character(USART3, '\r');
 80016c2:	210d      	movs	r1, #13
 80016c4:	4811      	ldr	r0, [pc, #68]	; (800170c <USART3_IRQHandler+0xf0>)
 80016c6:	f7ff fe38 	bl	800133a <USART_send_character>
				USART_send_string(USART3, USART3_BUFFER);
 80016ca:	4913      	ldr	r1, [pc, #76]	; (8001718 <USART3_IRQHandler+0xfc>)
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <USART3_IRQHandler+0xf0>)
 80016ce:	f7ff fe4c 	bl	800136a <USART_send_string>
		}
		if (ch >= 0x0 && ch <= 0x1F) //processing ASCII control characters
		{
			//TODO
		}
		if (ch > 0x1F && ch < 0x7F)
 80016d2:	7afb      	ldrb	r3, [r7, #11]
 80016d4:	2b1f      	cmp	r3, #31
 80016d6:	d915      	bls.n	8001704 <USART3_IRQHandler+0xe8>
 80016d8:	7afb      	ldrb	r3, [r7, #11]
 80016da:	2b7e      	cmp	r3, #126	; 0x7e
 80016dc:	d812      	bhi.n	8001704 <USART3_IRQHandler+0xe8>
		{
			USART3_BUFFER[usart3_buffer_iterrator] = ch;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <USART3_IRQHandler+0xf8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	490d      	ldr	r1, [pc, #52]	; (8001718 <USART3_IRQHandler+0xfc>)
 80016e4:	7afa      	ldrb	r2, [r7, #11]
 80016e6:	54ca      	strb	r2, [r1, r3]
			USART_send_character(USART3, ch); //echo
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4807      	ldr	r0, [pc, #28]	; (800170c <USART3_IRQHandler+0xf0>)
 80016ee:	f7ff fe24 	bl	800133a <USART_send_character>
			if(usart3_buffer_iterrator < USART3_BUFF_MAX_SIZE)
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <USART3_IRQHandler+0xf8>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2bff      	cmp	r3, #255	; 0xff
 80016f8:	d804      	bhi.n	8001704 <USART3_IRQHandler+0xe8>
			{
				usart3_buffer_iterrator++;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <USART3_IRQHandler+0xf8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a04      	ldr	r2, [pc, #16]	; (8001714 <USART3_IRQHandler+0xf8>)
 8001702:	6013      	str	r3, [r2, #0]
			}
		}

	}
}
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40004800 	.word	0x40004800
 8001710:	200001c0 	.word	0x200001c0
 8001714:	200002c4 	.word	0x200002c4
 8001718:	200001c4 	.word	0x200001c4

0800171c <CAN1_RX0_IRQHandler>:

void CAN1_RX0_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
	CanRxMsg RxMessage;
	memset(&RxMessage, 0, sizeof(RxMessage));
 8001722:	463b      	mov	r3, r7
 8001724:	2214      	movs	r2, #20
 8001726:	2100      	movs	r1, #0
 8001728:	4618      	mov	r0, r3
 800172a:	f000 fc0d 	bl	8001f48 <memset>

	if (CAN_GetITStatus(CAN1, CAN_IT_FMP0) != RESET)
 800172e:	2102      	movs	r1, #2
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <CAN1_RX0_IRQHandler+0x80>)
 8001732:	f7fe ff35 	bl	80005a0 <CAN_GetITStatus>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02a      	beq.n	8001792 <CAN1_RX0_IRQHandler+0x76>
	{
		CAN_Receive(CAN1, CAN_FIFO0, &RxMessage);
 800173c:	463b      	mov	r3, r7
 800173e:	461a      	mov	r2, r3
 8001740:	2100      	movs	r1, #0
 8001742:	4816      	ldr	r0, [pc, #88]	; (800179c <CAN1_RX0_IRQHandler+0x80>)
 8001744:	f7fe fe6d 	bl	8000422 <CAN_Receive>

		if (RxMessage.IDE == CAN_Id_Standard)
 8001748:	7a3b      	ldrb	r3, [r7, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d121      	bne.n	8001792 <CAN1_RX0_IRQHandler+0x76>
		{
			if (RxMessage.StdId == CAN_MASSEGE_ID_REQ)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	2ba1      	cmp	r3, #161	; 0xa1
 8001752:	d116      	bne.n	8001782 <CAN1_RX0_IRQHandler+0x66>
			{
				CAN_transmit_data();
 8001754:	f7ff fb86 	bl	8000e64 <CAN_transmit_data>
				for (int i=0; i < RxMessage.DLC; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	e00c      	b.n	8001778 <CAN1_RX0_IRQHandler+0x5c>
				USART_printf(USART3, "RxMessage.Data[%d] = %c\n\r", i,RxMessage.Data[i]);
 800175e:	f107 020b 	add.w	r2, r7, #11
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	4413      	add	r3, r2
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	490d      	ldr	r1, [pc, #52]	; (80017a0 <CAN1_RX0_IRQHandler+0x84>)
 800176c:	480d      	ldr	r0, [pc, #52]	; (80017a4 <CAN1_RX0_IRQHandler+0x88>)
 800176e:	f7ff fe21 	bl	80013b4 <USART_printf>
				for (int i=0; i < RxMessage.DLC; i++)
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
 8001778:	7abb      	ldrb	r3, [r7, #10]
 800177a:	461a      	mov	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	4293      	cmp	r3, r2
 8001780:	dbed      	blt.n	800175e <CAN1_RX0_IRQHandler+0x42>

			}
			if (RxMessage.StdId == CAN_MASSEGE_ID_RESP)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2ba2      	cmp	r3, #162	; 0xa2
 8001786:	d104      	bne.n	8001792 <CAN1_RX0_IRQHandler+0x76>
			{
				GPIO_ToggleBits(LED_PORT, LED_PINS);
 8001788:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800178c:	4806      	ldr	r0, [pc, #24]	; (80017a8 <CAN1_RX0_IRQHandler+0x8c>)
 800178e:	f7ff f932 	bl	80009f6 <GPIO_ToggleBits>
			}
		}
	}
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40006400 	.word	0x40006400
 80017a0:	080027e8 	.word	0x080027e8
 80017a4:	40004800 	.word	0x40004800
 80017a8:	40020c00 	.word	0x40020c00

080017ac <delay>:
uint32_t volatile *const pPullupDownReg =  (uint32_t*)(0x40020C00 + 0x0C);



void delay(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
	for(uint32_t i =0 ; i < 600000 ; i++);
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	e002      	b.n	80017be <delay+0x12>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3301      	adds	r3, #1
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a04      	ldr	r2, [pc, #16]	; (80017d4 <delay+0x28>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d9f8      	bls.n	80017b8 <delay+0xc>
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	000927bf 	.word	0x000927bf

080017d8 <setup_GPIO_for_keypad>:


void setup_GPIO_for_keypad() {
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0

	   //1.Enable the peripheral clock of GPIOD peripheral
		*pClockCtrlReg |= ( 1 << 3);
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <setup_GPIO_for_keypad+0x58>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <setup_GPIO_for_keypad+0x58>)
 80017e2:	f043 0308 	orr.w	r3, r3, #8
 80017e6:	6013      	str	r3, [r2, #0]

	  // 2.configure PD0,PD1,PD2,PD3 as output (rows)
		*pGPIODModeReg &= ~(0xFF); //clear
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <setup_GPIO_for_keypad+0x5c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a11      	ldr	r2, [pc, #68]	; (8001834 <setup_GPIO_for_keypad+0x5c>)
 80017ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017f2:	6013      	str	r3, [r2, #0]
		*pGPIODModeReg |= 0x55;   //set
 80017f4:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <setup_GPIO_for_keypad+0x5c>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <setup_GPIO_for_keypad+0x5c>)
 80017fa:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80017fe:	6013      	str	r3, [r2, #0]

		// 3. configure PD8 , PD9, PD10, PD11 as input (columns)
	  *pGPIODModeReg &= ~(0xFF << 16);
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <setup_GPIO_for_keypad+0x5c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <setup_GPIO_for_keypad+0x5c>)
 8001806:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800180a:	6013      	str	r3, [r2, #0]

		// 4.Enable internal pull-up resistors for PD8 PD9 PD10 PD11
	  *pPullupDownReg &= ~(0xFF << 16);
 800180c:	4b0a      	ldr	r3, [pc, #40]	; (8001838 <setup_GPIO_for_keypad+0x60>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a09      	ldr	r2, [pc, #36]	; (8001838 <setup_GPIO_for_keypad+0x60>)
 8001812:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001816:	6013      	str	r3, [r2, #0]
	  *pPullupDownReg |=  (0x55 << 16);
 8001818:	4b07      	ldr	r3, [pc, #28]	; (8001838 <setup_GPIO_for_keypad+0x60>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a06      	ldr	r2, [pc, #24]	; (8001838 <setup_GPIO_for_keypad+0x60>)
 800181e:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8001822:	6013      	str	r3, [r2, #0]
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40023830 	.word	0x40023830
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40020c0c 	.word	0x40020c0c

0800183c <convert_hex_to_bin>:

void convert_hex_to_bin() {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
		long int count=0;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
		while(data[count])
 8001846:	e06e      	b.n	8001926 <convert_hex_to_bin+0xea>
		{
			switch(data[count])
 8001848:	4a3c      	ldr	r2, [pc, #240]	; (800193c <convert_hex_to_bin+0x100>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4413      	add	r3, r2
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	3b30      	subs	r3, #48	; 0x30
 8001852:	2b14      	cmp	r3, #20
 8001854:	d864      	bhi.n	8001920 <convert_hex_to_bin+0xe4>
 8001856:	a201      	add	r2, pc, #4	; (adr r2, 800185c <convert_hex_to_bin+0x20>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	080018b1 	.word	0x080018b1
 8001860:	080018b9 	.word	0x080018b9
 8001864:	080018c1 	.word	0x080018c1
 8001868:	080018c9 	.word	0x080018c9
 800186c:	080018d1 	.word	0x080018d1
 8001870:	080018d9 	.word	0x080018d9
 8001874:	080018e1 	.word	0x080018e1
 8001878:	080018e9 	.word	0x080018e9
 800187c:	080018f1 	.word	0x080018f1
 8001880:	080018f9 	.word	0x080018f9
 8001884:	08001921 	.word	0x08001921
 8001888:	08001921 	.word	0x08001921
 800188c:	08001921 	.word	0x08001921
 8001890:	08001921 	.word	0x08001921
 8001894:	08001921 	.word	0x08001921
 8001898:	08001921 	.word	0x08001921
 800189c:	08001921 	.word	0x08001921
 80018a0:	08001901 	.word	0x08001901
 80018a4:	08001909 	.word	0x08001909
 80018a8:	08001911 	.word	0x08001911
 80018ac:	08001919 	.word	0x08001919
			{
				case '0' : print_display_array("0000");
 80018b0:	4823      	ldr	r0, [pc, #140]	; (8001940 <convert_hex_to_bin+0x104>)
 80018b2:	f7ff fcb6 	bl	8001222 <print_display_array>
					break;
 80018b6:	e033      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '1' : print_display_array("0001");
 80018b8:	4822      	ldr	r0, [pc, #136]	; (8001944 <convert_hex_to_bin+0x108>)
 80018ba:	f7ff fcb2 	bl	8001222 <print_display_array>
					break;
 80018be:	e02f      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '2' : print_display_array("0010");
 80018c0:	4821      	ldr	r0, [pc, #132]	; (8001948 <convert_hex_to_bin+0x10c>)
 80018c2:	f7ff fcae 	bl	8001222 <print_display_array>
					break;
 80018c6:	e02b      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '3' : print_display_array("0011");
 80018c8:	4820      	ldr	r0, [pc, #128]	; (800194c <convert_hex_to_bin+0x110>)
 80018ca:	f7ff fcaa 	bl	8001222 <print_display_array>
					break;
 80018ce:	e027      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '4' : print_display_array("0100");
 80018d0:	481f      	ldr	r0, [pc, #124]	; (8001950 <convert_hex_to_bin+0x114>)
 80018d2:	f7ff fca6 	bl	8001222 <print_display_array>
					break;
 80018d6:	e023      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '5' : print_display_array("0101");
 80018d8:	481e      	ldr	r0, [pc, #120]	; (8001954 <convert_hex_to_bin+0x118>)
 80018da:	f7ff fca2 	bl	8001222 <print_display_array>
					break;
 80018de:	e01f      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '6' : print_display_array("0110");
 80018e0:	481d      	ldr	r0, [pc, #116]	; (8001958 <convert_hex_to_bin+0x11c>)
 80018e2:	f7ff fc9e 	bl	8001222 <print_display_array>
					break;
 80018e6:	e01b      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '7' : print_display_array("0111");
 80018e8:	481c      	ldr	r0, [pc, #112]	; (800195c <convert_hex_to_bin+0x120>)
 80018ea:	f7ff fc9a 	bl	8001222 <print_display_array>
					break;
 80018ee:	e017      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '8' : print_display_array("1000");
 80018f0:	481b      	ldr	r0, [pc, #108]	; (8001960 <convert_hex_to_bin+0x124>)
 80018f2:	f7ff fc96 	bl	8001222 <print_display_array>
					break;
 80018f6:	e013      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case '9' : print_display_array("1001");
 80018f8:	481a      	ldr	r0, [pc, #104]	; (8001964 <convert_hex_to_bin+0x128>)
 80018fa:	f7ff fc92 	bl	8001222 <print_display_array>
					break;
 80018fe:	e00f      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case 'A' : print_display_array("1010");
 8001900:	4819      	ldr	r0, [pc, #100]	; (8001968 <convert_hex_to_bin+0x12c>)
 8001902:	f7ff fc8e 	bl	8001222 <print_display_array>
					break;
 8001906:	e00b      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case 'B' : print_display_array("1011");
 8001908:	4818      	ldr	r0, [pc, #96]	; (800196c <convert_hex_to_bin+0x130>)
 800190a:	f7ff fc8a 	bl	8001222 <print_display_array>
					break;
 800190e:	e007      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case 'C' : print_display_array("1100");
 8001910:	4817      	ldr	r0, [pc, #92]	; (8001970 <convert_hex_to_bin+0x134>)
 8001912:	f7ff fc86 	bl	8001222 <print_display_array>
					break;
 8001916:	e003      	b.n	8001920 <convert_hex_to_bin+0xe4>
				case 'D' : print_display_array("1101");
 8001918:	4816      	ldr	r0, [pc, #88]	; (8001974 <convert_hex_to_bin+0x138>)
 800191a:	f7ff fc82 	bl	8001222 <print_display_array>
					break;
 800191e:	bf00      	nop
			}
			++count;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3301      	adds	r3, #1
 8001924:	607b      	str	r3, [r7, #4]
		while(data[count])
 8001926:	4a05      	ldr	r2, [pc, #20]	; (800193c <convert_hex_to_bin+0x100>)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d18a      	bne.n	8001848 <convert_hex_to_bin+0xc>
		}
}
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200002c8 	.word	0x200002c8
 8001940:	08002804 	.word	0x08002804
 8001944:	0800280c 	.word	0x0800280c
 8001948:	08002814 	.word	0x08002814
 800194c:	0800281c 	.word	0x0800281c
 8001950:	08002824 	.word	0x08002824
 8001954:	0800282c 	.word	0x0800282c
 8001958:	08002834 	.word	0x08002834
 800195c:	0800283c 	.word	0x0800283c
 8001960:	08002844 	.word	0x08002844
 8001964:	0800284c 	.word	0x0800284c
 8001968:	08002854 	.word	0x08002854
 800196c:	0800285c 	.word	0x0800285c
 8001970:	08002864 	.word	0x08002864
 8001974:	0800286c 	.word	0x0800286c

08001978 <main>:



int main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0

  setup_clock();
 800197c:	f7ff fd34 	bl	80013e8 <setup_clock>
  setup_LED(LED_PORT, LED_PINS);
 8001980:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001984:	4806      	ldr	r0, [pc, #24]	; (80019a0 <main+0x28>)
 8001986:	f7ff fcb5 	bl	80012f4 <setup_LED>
  setup_GPIO_for_keypad();
 800198a:	f7ff ff25 	bl	80017d8 <setup_GPIO_for_keypad>

  Display_example();
 800198e:	f7ff fc61 	bl	8001254 <Display_example>
  delay();
 8001992:	f7ff ff0b 	bl	80017ac <delay>

  setup_Display();
 8001996:	f7ff fc21 	bl	80011dc <setup_Display>
  setup_first_line();
 800199a:	f7ff fc27 	bl	80011ec <setup_first_line>


  while(cycle)
 800199e:	e195      	b.n	8001ccc <main+0x354>
 80019a0:	40020c00 	.word	0x40020c00
//	  	 if (n_chars == 15) {
//	  		 setup_second_line();
//	  	 }

	     //make all rows HIGH
	    *pOutPutDataReg |= 0x0f;
 80019a4:	4bab      	ldr	r3, [pc, #684]	; (8001c54 <main+0x2dc>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4aaa      	ldr	r2, [pc, #680]	; (8001c54 <main+0x2dc>)
 80019aa:	f043 030f 	orr.w	r3, r3, #15
 80019ae:	6013      	str	r3, [r2, #0]

	    //make R1 LOW(PD0)
	    *pOutPutDataReg &= ~( 1 << 0);
 80019b0:	4ba8      	ldr	r3, [pc, #672]	; (8001c54 <main+0x2dc>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4aa7      	ldr	r2, [pc, #668]	; (8001c54 <main+0x2dc>)
 80019b6:	f023 0301 	bic.w	r3, r3, #1
 80019ba:	6013      	str	r3, [r2, #0]

	    //scan the columns


	    //check C1(PD8) low or high
	    if(!(*pInPutDataReg & ( 1 << 8))){
 80019bc:	4ba6      	ldr	r3, [pc, #664]	; (8001c58 <main+0x2e0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d110      	bne.n	80019ea <main+0x72>
	    	//key is pressed
	    	delay();
 80019c8:	f7ff fef0 	bl	80017ac <delay>
	    	print_display('1');
 80019cc:	2031      	movs	r0, #49	; 0x31
 80019ce:	f7ff fc1b 	bl	8001208 <print_display>
	    	data[n_chars] = '1';
 80019d2:	4ba2      	ldr	r3, [pc, #648]	; (8001c5c <main+0x2e4>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	461a      	mov	r2, r3
 80019d8:	4ba1      	ldr	r3, [pc, #644]	; (8001c60 <main+0x2e8>)
 80019da:	2131      	movs	r1, #49	; 0x31
 80019dc:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 80019de:	4b9f      	ldr	r3, [pc, #636]	; (8001c5c <main+0x2e4>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	4b9d      	ldr	r3, [pc, #628]	; (8001c5c <main+0x2e4>)
 80019e8:	701a      	strb	r2, [r3, #0]
	    }

	    //check C2(PD9) low or high
	    if(!(*pInPutDataReg & ( 1 << 9))){
 80019ea:	4b9b      	ldr	r3, [pc, #620]	; (8001c58 <main+0x2e0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d110      	bne.n	8001a18 <main+0xa0>
	    	//key is pressed
	    	delay();
 80019f6:	f7ff fed9 	bl	80017ac <delay>
	    	print_display('2');
 80019fa:	2032      	movs	r0, #50	; 0x32
 80019fc:	f7ff fc04 	bl	8001208 <print_display>
	    	data[n_chars] = '2';
 8001a00:	4b96      	ldr	r3, [pc, #600]	; (8001c5c <main+0x2e4>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b96      	ldr	r3, [pc, #600]	; (8001c60 <main+0x2e8>)
 8001a08:	2132      	movs	r1, #50	; 0x32
 8001a0a:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001a0c:	4b93      	ldr	r3, [pc, #588]	; (8001c5c <main+0x2e4>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b91      	ldr	r3, [pc, #580]	; (8001c5c <main+0x2e4>)
 8001a16:	701a      	strb	r2, [r3, #0]
	    }

	    //check C3(PD10) low or high
	    if(!(*pInPutDataReg & ( 1 << 10))){
 8001a18:	4b8f      	ldr	r3, [pc, #572]	; (8001c58 <main+0x2e0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d110      	bne.n	8001a46 <main+0xce>
	    	//key is pressed
	    	delay();
 8001a24:	f7ff fec2 	bl	80017ac <delay>
	    	print_display('3');
 8001a28:	2033      	movs	r0, #51	; 0x33
 8001a2a:	f7ff fbed 	bl	8001208 <print_display>
	    	data[n_chars] = '3';
 8001a2e:	4b8b      	ldr	r3, [pc, #556]	; (8001c5c <main+0x2e4>)
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b8a      	ldr	r3, [pc, #552]	; (8001c60 <main+0x2e8>)
 8001a36:	2133      	movs	r1, #51	; 0x33
 8001a38:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001a3a:	4b88      	ldr	r3, [pc, #544]	; (8001c5c <main+0x2e4>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	b2da      	uxtb	r2, r3
 8001a42:	4b86      	ldr	r3, [pc, #536]	; (8001c5c <main+0x2e4>)
 8001a44:	701a      	strb	r2, [r3, #0]
	    }

	    //check C4(PD11) low or high
	    if(!(*pInPutDataReg & ( 1 << 11))){
 8001a46:	4b84      	ldr	r3, [pc, #528]	; (8001c58 <main+0x2e0>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d110      	bne.n	8001a74 <main+0xfc>
	    	//key is pressed
	    	delay();
 8001a52:	f7ff feab 	bl	80017ac <delay>
	    	print_display('A');
 8001a56:	2041      	movs	r0, #65	; 0x41
 8001a58:	f7ff fbd6 	bl	8001208 <print_display>
	    	data[n_chars] = 'A';
 8001a5c:	4b7f      	ldr	r3, [pc, #508]	; (8001c5c <main+0x2e4>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b7f      	ldr	r3, [pc, #508]	; (8001c60 <main+0x2e8>)
 8001a64:	2141      	movs	r1, #65	; 0x41
 8001a66:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001a68:	4b7c      	ldr	r3, [pc, #496]	; (8001c5c <main+0x2e4>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	4b7a      	ldr	r3, [pc, #488]	; (8001c5c <main+0x2e4>)
 8001a72:	701a      	strb	r2, [r3, #0]
	    }


	    //make all rows HIGH
	     *pOutPutDataReg |= 0x0f;
 8001a74:	4b77      	ldr	r3, [pc, #476]	; (8001c54 <main+0x2dc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a76      	ldr	r2, [pc, #472]	; (8001c54 <main+0x2dc>)
 8001a7a:	f043 030f 	orr.w	r3, r3, #15
 8001a7e:	6013      	str	r3, [r2, #0]
	    //make R2 LOW(PD1)
	    *pOutPutDataReg &= ~( 1 << 1);
 8001a80:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <main+0x2dc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a73      	ldr	r2, [pc, #460]	; (8001c54 <main+0x2dc>)
 8001a86:	f023 0302 	bic.w	r3, r3, #2
 8001a8a:	6013      	str	r3, [r2, #0]

	    //scan the columns
	    //check C1(PD8) low or high
	    if(!(*pInPutDataReg & ( 1 << 8))){
 8001a8c:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <main+0x2e0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d110      	bne.n	8001aba <main+0x142>
	    	//key is pressed
	    	delay();
 8001a98:	f7ff fe88 	bl	80017ac <delay>
	    	print_display('4');
 8001a9c:	2034      	movs	r0, #52	; 0x34
 8001a9e:	f7ff fbb3 	bl	8001208 <print_display>
	    	data[n_chars] = '4';
 8001aa2:	4b6e      	ldr	r3, [pc, #440]	; (8001c5c <main+0x2e4>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <main+0x2e8>)
 8001aaa:	2134      	movs	r1, #52	; 0x34
 8001aac:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001aae:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <main+0x2e4>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b69      	ldr	r3, [pc, #420]	; (8001c5c <main+0x2e4>)
 8001ab8:	701a      	strb	r2, [r3, #0]
	    }

	    //check C2(PD9) low or high
	    if(!(*pInPutDataReg & ( 1 << 9))){
 8001aba:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <main+0x2e0>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d110      	bne.n	8001ae8 <main+0x170>
	    	//key is pressed
	    	delay();
 8001ac6:	f7ff fe71 	bl	80017ac <delay>
	    	print_display('5');
 8001aca:	2035      	movs	r0, #53	; 0x35
 8001acc:	f7ff fb9c 	bl	8001208 <print_display>
	    	data[n_chars] = '5';
 8001ad0:	4b62      	ldr	r3, [pc, #392]	; (8001c5c <main+0x2e4>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <main+0x2e8>)
 8001ad8:	2135      	movs	r1, #53	; 0x35
 8001ada:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001adc:	4b5f      	ldr	r3, [pc, #380]	; (8001c5c <main+0x2e4>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b2da      	uxtb	r2, r3
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <main+0x2e4>)
 8001ae6:	701a      	strb	r2, [r3, #0]
	    }

	    //check C3(PD10) low or high
	    if(!(*pInPutDataReg & ( 1 << 10))){
 8001ae8:	4b5b      	ldr	r3, [pc, #364]	; (8001c58 <main+0x2e0>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d110      	bne.n	8001b16 <main+0x19e>
	    	//key is pressed
	    	delay();
 8001af4:	f7ff fe5a 	bl	80017ac <delay>
	    	print_display('6');
 8001af8:	2036      	movs	r0, #54	; 0x36
 8001afa:	f7ff fb85 	bl	8001208 <print_display>
	    	data[n_chars] = '6';
 8001afe:	4b57      	ldr	r3, [pc, #348]	; (8001c5c <main+0x2e4>)
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <main+0x2e8>)
 8001b06:	2136      	movs	r1, #54	; 0x36
 8001b08:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <main+0x2e4>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	3301      	adds	r3, #1
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <main+0x2e4>)
 8001b14:	701a      	strb	r2, [r3, #0]
	    }

	    //check C4(PD11) low or high
	    if(!(*pInPutDataReg & ( 1 << 11))){
 8001b16:	4b50      	ldr	r3, [pc, #320]	; (8001c58 <main+0x2e0>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d110      	bne.n	8001b44 <main+0x1cc>
	    	//key is pressed
	    	delay();
 8001b22:	f7ff fe43 	bl	80017ac <delay>
	    	print_display('B');
 8001b26:	2042      	movs	r0, #66	; 0x42
 8001b28:	f7ff fb6e 	bl	8001208 <print_display>
	    	data[n_chars] = 'B';
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <main+0x2e4>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b4b      	ldr	r3, [pc, #300]	; (8001c60 <main+0x2e8>)
 8001b34:	2142      	movs	r1, #66	; 0x42
 8001b36:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001b38:	4b48      	ldr	r3, [pc, #288]	; (8001c5c <main+0x2e4>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <main+0x2e4>)
 8001b42:	701a      	strb	r2, [r3, #0]
	    }

	    //make all rows HIGH
	     *pOutPutDataReg |= 0x0f;
 8001b44:	4b43      	ldr	r3, [pc, #268]	; (8001c54 <main+0x2dc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a42      	ldr	r2, [pc, #264]	; (8001c54 <main+0x2dc>)
 8001b4a:	f043 030f 	orr.w	r3, r3, #15
 8001b4e:	6013      	str	r3, [r2, #0]
	    //make R3 LOW(PD2)
	    *pOutPutDataReg &= ~( 1 << 2);
 8001b50:	4b40      	ldr	r3, [pc, #256]	; (8001c54 <main+0x2dc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a3f      	ldr	r2, [pc, #252]	; (8001c54 <main+0x2dc>)
 8001b56:	f023 0304 	bic.w	r3, r3, #4
 8001b5a:	6013      	str	r3, [r2, #0]

	    //scan the columns
	    //check C1(PD8) low or high
	    if(!(*pInPutDataReg & ( 1 << 8))){
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <main+0x2e0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d110      	bne.n	8001b8a <main+0x212>
	    	//key is pressed
	    	delay();
 8001b68:	f7ff fe20 	bl	80017ac <delay>
	    	print_display('7');
 8001b6c:	2037      	movs	r0, #55	; 0x37
 8001b6e:	f7ff fb4b 	bl	8001208 <print_display>
	    	data[n_chars] = '7';
 8001b72:	4b3a      	ldr	r3, [pc, #232]	; (8001c5c <main+0x2e4>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <main+0x2e8>)
 8001b7a:	2137      	movs	r1, #55	; 0x37
 8001b7c:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <main+0x2e4>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <main+0x2e4>)
 8001b88:	701a      	strb	r2, [r3, #0]
	    }

	    //check C2(PD9) low or high
	    if(!(*pInPutDataReg & ( 1 << 9))){
 8001b8a:	4b33      	ldr	r3, [pc, #204]	; (8001c58 <main+0x2e0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d110      	bne.n	8001bb8 <main+0x240>
	    	//key is pressed
	    	delay();
 8001b96:	f7ff fe09 	bl	80017ac <delay>
	    	print_display('8');
 8001b9a:	2038      	movs	r0, #56	; 0x38
 8001b9c:	f7ff fb34 	bl	8001208 <print_display>
	    	data[n_chars] = '8';
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <main+0x2e4>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <main+0x2e8>)
 8001ba8:	2138      	movs	r1, #56	; 0x38
 8001baa:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <main+0x2e4>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b29      	ldr	r3, [pc, #164]	; (8001c5c <main+0x2e4>)
 8001bb6:	701a      	strb	r2, [r3, #0]
	    }

	    //check C3(PD10) low or high
	    if(!(*pInPutDataReg & ( 1 << 10))){
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <main+0x2e0>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d110      	bne.n	8001be6 <main+0x26e>
	    	//key is pressed
	    	delay();
 8001bc4:	f7ff fdf2 	bl	80017ac <delay>
	    	print_display('9');
 8001bc8:	2039      	movs	r0, #57	; 0x39
 8001bca:	f7ff fb1d 	bl	8001208 <print_display>
	    	data[n_chars] = '9';
 8001bce:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <main+0x2e4>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4b22      	ldr	r3, [pc, #136]	; (8001c60 <main+0x2e8>)
 8001bd6:	2139      	movs	r1, #57	; 0x39
 8001bd8:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <main+0x2e4>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	3301      	adds	r3, #1
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b1e      	ldr	r3, [pc, #120]	; (8001c5c <main+0x2e4>)
 8001be4:	701a      	strb	r2, [r3, #0]
	    }

	    //check C4(PD11) low or high
	    if(!(*pInPutDataReg & ( 1 << 11))){
 8001be6:	4b1c      	ldr	r3, [pc, #112]	; (8001c58 <main+0x2e0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d110      	bne.n	8001c14 <main+0x29c>
	    	//key is pressed
	    	delay();
 8001bf2:	f7ff fddb 	bl	80017ac <delay>
	    	print_display('C');
 8001bf6:	2043      	movs	r0, #67	; 0x43
 8001bf8:	f7ff fb06 	bl	8001208 <print_display>
	    	data[n_chars] = 'C';
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <main+0x2e4>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <main+0x2e8>)
 8001c04:	2143      	movs	r1, #67	; 0x43
 8001c06:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <main+0x2e4>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <main+0x2e4>)
 8001c12:	701a      	strb	r2, [r3, #0]
	    }

	    //make all rows HIGH
	     *pOutPutDataReg |= 0x0f;
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <main+0x2dc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <main+0x2dc>)
 8001c1a:	f043 030f 	orr.w	r3, r3, #15
 8001c1e:	6013      	str	r3, [r2, #0]
	    //make R4 LOW(PD2)
	    *pOutPutDataReg &= ~( 1 << 3);
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <main+0x2dc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a0b      	ldr	r2, [pc, #44]	; (8001c54 <main+0x2dc>)
 8001c26:	f023 0308 	bic.w	r3, r3, #8
 8001c2a:	6013      	str	r3, [r2, #0]

	    //scan the columns
	    //check C1(PD8) low or high
	    if(!(*pInPutDataReg & ( 1 << 8))){
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <main+0x2e0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d105      	bne.n	8001c44 <main+0x2cc>
	    	//key is pressed
	    	delay();
 8001c38:	f7ff fdb8 	bl	80017ac <delay>
//	    	print_display('*');
	    	setup_second_line();
 8001c3c:	f7ff fadd 	bl	80011fa <setup_second_line>
	    	convert_hex_to_bin();
 8001c40:	f7ff fdfc 	bl	800183c <convert_hex_to_bin>
	    }

	    //check C2(PD9) low or high
	    if(!(*pInPutDataReg & ( 1 << 9))){
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <main+0x2e0>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11a      	bne.n	8001c86 <main+0x30e>
 8001c50:	e008      	b.n	8001c64 <main+0x2ec>
 8001c52:	bf00      	nop
 8001c54:	40020c14 	.word	0x40020c14
 8001c58:	40020c10 	.word	0x40020c10
 8001c5c:	200001a4 	.word	0x200001a4
 8001c60:	200002c8 	.word	0x200002c8
	    	//key is pressed
	    	delay();
 8001c64:	f7ff fda2 	bl	80017ac <delay>
	    	print_display('0');
 8001c68:	2030      	movs	r0, #48	; 0x30
 8001c6a:	f7ff facd 	bl	8001208 <print_display>
	    	data[n_chars] = '0';
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <main+0x364>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <main+0x368>)
 8001c76:	2130      	movs	r1, #48	; 0x30
 8001c78:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <main+0x364>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	3301      	adds	r3, #1
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <main+0x364>)
 8001c84:	701a      	strb	r2, [r3, #0]
	    }

	    //check C3(PD10) low or high
	    if(!(*pInPutDataReg & ( 1 << 10))){
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <main+0x36c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <main+0x326>
	    	//key is pressed
	    	delay();
 8001c92:	f7ff fd8b 	bl	80017ac <delay>
//	    	print_display('#');
	    	setup_second_line();
 8001c96:	f7ff fab0 	bl	80011fa <setup_second_line>
	    	convert_hex_to_bin();
 8001c9a:	f7ff fdcf 	bl	800183c <convert_hex_to_bin>
	    }

	    //check C4(PD11) low or high
	    if(!(*pInPutDataReg & ( 1 << 11))){
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <main+0x36c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d110      	bne.n	8001ccc <main+0x354>
	    	//key is pressed
	    	delay();
 8001caa:	f7ff fd7f 	bl	80017ac <delay>
	    	print_display('D');
 8001cae:	2044      	movs	r0, #68	; 0x44
 8001cb0:	f7ff faaa 	bl	8001208 <print_display>
	    	data[n_chars] = 'D';
 8001cb4:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <main+0x364>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	461a      	mov	r2, r3
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <main+0x368>)
 8001cbc:	2144      	movs	r1, #68	; 0x44
 8001cbe:	5499      	strb	r1, [r3, r2]
	    	++n_chars;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <main+0x364>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <main+0x364>)
 8001cca:	701a      	strb	r2, [r3, #0]
  while(cycle)
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <main+0x370>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f47f ae67 	bne.w	80019a4 <main+0x2c>
 8001cd6:	2300      	movs	r3, #0
	    }
  }
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	200001a4 	.word	0x200001a4
 8001ce0:	200002c8 	.word	0x200002c8
 8001ce4:	40020c10 	.word	0x40020c10
 8001ce8:	20000010 	.word	0x20000010

08001cec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001cf0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001cf2:	e003      	b.n	8001cfc <LoopCopyDataInit>

08001cf4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001cf6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001cf8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001cfa:	3104      	adds	r1, #4

08001cfc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001cfc:	480b      	ldr	r0, [pc, #44]	; (8001d2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d04:	d3f6      	bcc.n	8001cf4 <CopyDataInit>
  ldr  r2, =_sbss
 8001d06:	4a0b      	ldr	r2, [pc, #44]	; (8001d34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d08:	e002      	b.n	8001d10 <LoopFillZerobss>

08001d0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d0c:	f842 3b04 	str.w	r3, [r2], #4

08001d10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d14:	d3f9      	bcc.n	8001d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d16:	f000 f841 	bl	8001d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d1a:	f000 f8f1 	bl	8001f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d1e:	f7ff fe2b 	bl	8001978 <main>
  bx  lr    
 8001d22:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d24:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d28:	080028ac 	.word	0x080028ac
  ldr  r0, =_sdata
 8001d2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d30:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001d34:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001d38:	200002fc 	.word	0x200002fc

08001d3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d3c:	e7fe      	b.n	8001d3c <ADC_IRQHandler>

08001d3e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <HardFault_Handler+0x4>

08001d52 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001d56:	e7fe      	b.n	8001d56 <MemManage_Handler+0x4>

08001d58 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001d5c:	e7fe      	b.n	8001d5c <BusFault_Handler+0x4>

08001d5e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001d62:	e7fe      	b.n	8001d62 <UsageFault_Handler+0x4>

08001d64 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
}
 8001d76:	bf00      	nop
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001d92:	bf00      	nop
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <SystemInit+0x60>)
 8001da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da6:	4a15      	ldr	r2, [pc, #84]	; (8001dfc <SystemInit+0x60>)
 8001da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001db0:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <SystemInit+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <SystemInit+0x64>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dbc:	4b10      	ldr	r3, [pc, #64]	; (8001e00 <SystemInit+0x64>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001dc2:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <SystemInit+0x64>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a0e      	ldr	r2, [pc, #56]	; (8001e00 <SystemInit+0x64>)
 8001dc8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001dd2:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <SystemInit+0x64>)
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <SystemInit+0x68>)
 8001dd6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <SystemInit+0x64>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a08      	ldr	r2, [pc, #32]	; (8001e00 <SystemInit+0x64>)
 8001dde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001de2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001de4:	4b06      	ldr	r3, [pc, #24]	; (8001e00 <SystemInit+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001dea:	f000 f80d 	bl	8001e08 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001dee:	4b03      	ldr	r3, [pc, #12]	; (8001dfc <SystemInit+0x60>)
 8001df0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df4:	609a      	str	r2, [r3, #8]
#endif
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	e000ed00 	.word	0xe000ed00
 8001e00:	40023800 	.word	0x40023800
 8001e04:	24003010 	.word	0x24003010

08001e08 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	607b      	str	r3, [r7, #4]
 8001e12:	2300      	movs	r3, #0
 8001e14:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <SetSysClock+0xe8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a35      	ldr	r2, [pc, #212]	; (8001ef0 <SetSysClock+0xe8>)
 8001e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e20:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <SetSysClock+0xe8>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d103      	bne.n	8001e40 <SetSysClock+0x38>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e3e:	d1f0      	bne.n	8001e22 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <SetSysClock+0xe8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	e001      	b.n	8001e56 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d142      	bne.n	8001ee2 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <SetSysClock+0xe8>)
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4a23      	ldr	r2, [pc, #140]	; (8001ef0 <SetSysClock+0xe8>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8001e68:	4b22      	ldr	r3, [pc, #136]	; (8001ef4 <SetSysClock+0xec>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a21      	ldr	r2, [pc, #132]	; (8001ef4 <SetSysClock+0xec>)
 8001e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e72:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001e74:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <SetSysClock+0xe8>)
 8001e76:	4a1e      	ldr	r2, [pc, #120]	; (8001ef0 <SetSysClock+0xe8>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <SetSysClock+0xe8>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <SetSysClock+0xe8>)
 8001e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e86:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001e88:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <SetSysClock+0xe8>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <SetSysClock+0xe8>)
 8001e8e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001e92:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001e94:	4b16      	ldr	r3, [pc, #88]	; (8001ef0 <SetSysClock+0xe8>)
 8001e96:	4a18      	ldr	r2, [pc, #96]	; (8001ef8 <SetSysClock+0xf0>)
 8001e98:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001e9a:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <SetSysClock+0xe8>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <SetSysClock+0xe8>)
 8001ea0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ea4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ea6:	bf00      	nop
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <SetSysClock+0xe8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0f9      	beq.n	8001ea8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <SetSysClock+0xf4>)
 8001eb6:	f240 7205 	movw	r2, #1797	; 0x705
 8001eba:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001ebc:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <SetSysClock+0xe8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <SetSysClock+0xe8>)
 8001ec2:	f023 0303 	bic.w	r3, r3, #3
 8001ec6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001ec8:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <SetSysClock+0xe8>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <SetSysClock+0xe8>)
 8001ece:	f043 0302 	orr.w	r3, r3, #2
 8001ed2:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001ed4:	bf00      	nop
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <SetSysClock+0xe8>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	f003 030c 	and.w	r3, r3, #12
 8001ede:	2b08      	cmp	r3, #8
 8001ee0:	d1f9      	bne.n	8001ed6 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	07405419 	.word	0x07405419
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <__libc_init_array>:
 8001f00:	b570      	push	{r4, r5, r6, lr}
 8001f02:	4d0d      	ldr	r5, [pc, #52]	; (8001f38 <__libc_init_array+0x38>)
 8001f04:	4c0d      	ldr	r4, [pc, #52]	; (8001f3c <__libc_init_array+0x3c>)
 8001f06:	1b64      	subs	r4, r4, r5
 8001f08:	10a4      	asrs	r4, r4, #2
 8001f0a:	2600      	movs	r6, #0
 8001f0c:	42a6      	cmp	r6, r4
 8001f0e:	d109      	bne.n	8001f24 <__libc_init_array+0x24>
 8001f10:	4d0b      	ldr	r5, [pc, #44]	; (8001f40 <__libc_init_array+0x40>)
 8001f12:	4c0c      	ldr	r4, [pc, #48]	; (8001f44 <__libc_init_array+0x44>)
 8001f14:	f000 fc5c 	bl	80027d0 <_init>
 8001f18:	1b64      	subs	r4, r4, r5
 8001f1a:	10a4      	asrs	r4, r4, #2
 8001f1c:	2600      	movs	r6, #0
 8001f1e:	42a6      	cmp	r6, r4
 8001f20:	d105      	bne.n	8001f2e <__libc_init_array+0x2e>
 8001f22:	bd70      	pop	{r4, r5, r6, pc}
 8001f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f28:	4798      	blx	r3
 8001f2a:	3601      	adds	r6, #1
 8001f2c:	e7ee      	b.n	8001f0c <__libc_init_array+0xc>
 8001f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f32:	4798      	blx	r3
 8001f34:	3601      	adds	r6, #1
 8001f36:	e7f2      	b.n	8001f1e <__libc_init_array+0x1e>
 8001f38:	080028a4 	.word	0x080028a4
 8001f3c:	080028a4 	.word	0x080028a4
 8001f40:	080028a4 	.word	0x080028a4
 8001f44:	080028a8 	.word	0x080028a8

08001f48 <memset>:
 8001f48:	4402      	add	r2, r0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <memset+0xa>
 8001f50:	4770      	bx	lr
 8001f52:	f803 1b01 	strb.w	r1, [r3], #1
 8001f56:	e7f9      	b.n	8001f4c <memset+0x4>

08001f58 <_vsiprintf_r>:
 8001f58:	b500      	push	{lr}
 8001f5a:	b09b      	sub	sp, #108	; 0x6c
 8001f5c:	9100      	str	r1, [sp, #0]
 8001f5e:	9104      	str	r1, [sp, #16]
 8001f60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f64:	9105      	str	r1, [sp, #20]
 8001f66:	9102      	str	r1, [sp, #8]
 8001f68:	4905      	ldr	r1, [pc, #20]	; (8001f80 <_vsiprintf_r+0x28>)
 8001f6a:	9103      	str	r1, [sp, #12]
 8001f6c:	4669      	mov	r1, sp
 8001f6e:	f000 f86f 	bl	8002050 <_svfiprintf_r>
 8001f72:	9b00      	ldr	r3, [sp, #0]
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
 8001f78:	b01b      	add	sp, #108	; 0x6c
 8001f7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f7e:	bf00      	nop
 8001f80:	ffff0208 	.word	0xffff0208

08001f84 <vsiprintf>:
 8001f84:	4613      	mov	r3, r2
 8001f86:	460a      	mov	r2, r1
 8001f88:	4601      	mov	r1, r0
 8001f8a:	4802      	ldr	r0, [pc, #8]	; (8001f94 <vsiprintf+0x10>)
 8001f8c:	6800      	ldr	r0, [r0, #0]
 8001f8e:	f7ff bfe3 	b.w	8001f58 <_vsiprintf_r>
 8001f92:	bf00      	nop
 8001f94:	20000014 	.word	0x20000014

08001f98 <__ssputs_r>:
 8001f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f9c:	688e      	ldr	r6, [r1, #8]
 8001f9e:	429e      	cmp	r6, r3
 8001fa0:	4682      	mov	sl, r0
 8001fa2:	460c      	mov	r4, r1
 8001fa4:	4690      	mov	r8, r2
 8001fa6:	461f      	mov	r7, r3
 8001fa8:	d838      	bhi.n	800201c <__ssputs_r+0x84>
 8001faa:	898a      	ldrh	r2, [r1, #12]
 8001fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001fb0:	d032      	beq.n	8002018 <__ssputs_r+0x80>
 8001fb2:	6825      	ldr	r5, [r4, #0]
 8001fb4:	6909      	ldr	r1, [r1, #16]
 8001fb6:	eba5 0901 	sub.w	r9, r5, r1
 8001fba:	6965      	ldr	r5, [r4, #20]
 8001fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	444b      	add	r3, r9
 8001fc8:	106d      	asrs	r5, r5, #1
 8001fca:	429d      	cmp	r5, r3
 8001fcc:	bf38      	it	cc
 8001fce:	461d      	movcc	r5, r3
 8001fd0:	0553      	lsls	r3, r2, #21
 8001fd2:	d531      	bpl.n	8002038 <__ssputs_r+0xa0>
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	f000 fb47 	bl	8002668 <_malloc_r>
 8001fda:	4606      	mov	r6, r0
 8001fdc:	b950      	cbnz	r0, 8001ff4 <__ssputs_r+0x5c>
 8001fde:	230c      	movs	r3, #12
 8001fe0:	f8ca 3000 	str.w	r3, [sl]
 8001fe4:	89a3      	ldrh	r3, [r4, #12]
 8001fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fea:	81a3      	strh	r3, [r4, #12]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ff4:	6921      	ldr	r1, [r4, #16]
 8001ff6:	464a      	mov	r2, r9
 8001ff8:	f000 fabe 	bl	8002578 <memcpy>
 8001ffc:	89a3      	ldrh	r3, [r4, #12]
 8001ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002006:	81a3      	strh	r3, [r4, #12]
 8002008:	6126      	str	r6, [r4, #16]
 800200a:	6165      	str	r5, [r4, #20]
 800200c:	444e      	add	r6, r9
 800200e:	eba5 0509 	sub.w	r5, r5, r9
 8002012:	6026      	str	r6, [r4, #0]
 8002014:	60a5      	str	r5, [r4, #8]
 8002016:	463e      	mov	r6, r7
 8002018:	42be      	cmp	r6, r7
 800201a:	d900      	bls.n	800201e <__ssputs_r+0x86>
 800201c:	463e      	mov	r6, r7
 800201e:	4632      	mov	r2, r6
 8002020:	6820      	ldr	r0, [r4, #0]
 8002022:	4641      	mov	r1, r8
 8002024:	f000 fab6 	bl	8002594 <memmove>
 8002028:	68a3      	ldr	r3, [r4, #8]
 800202a:	6822      	ldr	r2, [r4, #0]
 800202c:	1b9b      	subs	r3, r3, r6
 800202e:	4432      	add	r2, r6
 8002030:	60a3      	str	r3, [r4, #8]
 8002032:	6022      	str	r2, [r4, #0]
 8002034:	2000      	movs	r0, #0
 8002036:	e7db      	b.n	8001ff0 <__ssputs_r+0x58>
 8002038:	462a      	mov	r2, r5
 800203a:	f000 fb6f 	bl	800271c <_realloc_r>
 800203e:	4606      	mov	r6, r0
 8002040:	2800      	cmp	r0, #0
 8002042:	d1e1      	bne.n	8002008 <__ssputs_r+0x70>
 8002044:	6921      	ldr	r1, [r4, #16]
 8002046:	4650      	mov	r0, sl
 8002048:	f000 fabe 	bl	80025c8 <_free_r>
 800204c:	e7c7      	b.n	8001fde <__ssputs_r+0x46>
	...

08002050 <_svfiprintf_r>:
 8002050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002054:	4698      	mov	r8, r3
 8002056:	898b      	ldrh	r3, [r1, #12]
 8002058:	061b      	lsls	r3, r3, #24
 800205a:	b09d      	sub	sp, #116	; 0x74
 800205c:	4607      	mov	r7, r0
 800205e:	460d      	mov	r5, r1
 8002060:	4614      	mov	r4, r2
 8002062:	d50e      	bpl.n	8002082 <_svfiprintf_r+0x32>
 8002064:	690b      	ldr	r3, [r1, #16]
 8002066:	b963      	cbnz	r3, 8002082 <_svfiprintf_r+0x32>
 8002068:	2140      	movs	r1, #64	; 0x40
 800206a:	f000 fafd 	bl	8002668 <_malloc_r>
 800206e:	6028      	str	r0, [r5, #0]
 8002070:	6128      	str	r0, [r5, #16]
 8002072:	b920      	cbnz	r0, 800207e <_svfiprintf_r+0x2e>
 8002074:	230c      	movs	r3, #12
 8002076:	603b      	str	r3, [r7, #0]
 8002078:	f04f 30ff 	mov.w	r0, #4294967295
 800207c:	e0d1      	b.n	8002222 <_svfiprintf_r+0x1d2>
 800207e:	2340      	movs	r3, #64	; 0x40
 8002080:	616b      	str	r3, [r5, #20]
 8002082:	2300      	movs	r3, #0
 8002084:	9309      	str	r3, [sp, #36]	; 0x24
 8002086:	2320      	movs	r3, #32
 8002088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800208c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002090:	2330      	movs	r3, #48	; 0x30
 8002092:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800223c <_svfiprintf_r+0x1ec>
 8002096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800209a:	f04f 0901 	mov.w	r9, #1
 800209e:	4623      	mov	r3, r4
 80020a0:	469a      	mov	sl, r3
 80020a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80020a6:	b10a      	cbz	r2, 80020ac <_svfiprintf_r+0x5c>
 80020a8:	2a25      	cmp	r2, #37	; 0x25
 80020aa:	d1f9      	bne.n	80020a0 <_svfiprintf_r+0x50>
 80020ac:	ebba 0b04 	subs.w	fp, sl, r4
 80020b0:	d00b      	beq.n	80020ca <_svfiprintf_r+0x7a>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4622      	mov	r2, r4
 80020b6:	4629      	mov	r1, r5
 80020b8:	4638      	mov	r0, r7
 80020ba:	f7ff ff6d 	bl	8001f98 <__ssputs_r>
 80020be:	3001      	adds	r0, #1
 80020c0:	f000 80aa 	beq.w	8002218 <_svfiprintf_r+0x1c8>
 80020c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80020c6:	445a      	add	r2, fp
 80020c8:	9209      	str	r2, [sp, #36]	; 0x24
 80020ca:	f89a 3000 	ldrb.w	r3, [sl]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f000 80a2 	beq.w	8002218 <_svfiprintf_r+0x1c8>
 80020d4:	2300      	movs	r3, #0
 80020d6:	f04f 32ff 	mov.w	r2, #4294967295
 80020da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80020de:	f10a 0a01 	add.w	sl, sl, #1
 80020e2:	9304      	str	r3, [sp, #16]
 80020e4:	9307      	str	r3, [sp, #28]
 80020e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020ea:	931a      	str	r3, [sp, #104]	; 0x68
 80020ec:	4654      	mov	r4, sl
 80020ee:	2205      	movs	r2, #5
 80020f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020f4:	4851      	ldr	r0, [pc, #324]	; (800223c <_svfiprintf_r+0x1ec>)
 80020f6:	f7fe f873 	bl	80001e0 <memchr>
 80020fa:	9a04      	ldr	r2, [sp, #16]
 80020fc:	b9d8      	cbnz	r0, 8002136 <_svfiprintf_r+0xe6>
 80020fe:	06d0      	lsls	r0, r2, #27
 8002100:	bf44      	itt	mi
 8002102:	2320      	movmi	r3, #32
 8002104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002108:	0711      	lsls	r1, r2, #28
 800210a:	bf44      	itt	mi
 800210c:	232b      	movmi	r3, #43	; 0x2b
 800210e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002112:	f89a 3000 	ldrb.w	r3, [sl]
 8002116:	2b2a      	cmp	r3, #42	; 0x2a
 8002118:	d015      	beq.n	8002146 <_svfiprintf_r+0xf6>
 800211a:	9a07      	ldr	r2, [sp, #28]
 800211c:	4654      	mov	r4, sl
 800211e:	2000      	movs	r0, #0
 8002120:	f04f 0c0a 	mov.w	ip, #10
 8002124:	4621      	mov	r1, r4
 8002126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800212a:	3b30      	subs	r3, #48	; 0x30
 800212c:	2b09      	cmp	r3, #9
 800212e:	d94e      	bls.n	80021ce <_svfiprintf_r+0x17e>
 8002130:	b1b0      	cbz	r0, 8002160 <_svfiprintf_r+0x110>
 8002132:	9207      	str	r2, [sp, #28]
 8002134:	e014      	b.n	8002160 <_svfiprintf_r+0x110>
 8002136:	eba0 0308 	sub.w	r3, r0, r8
 800213a:	fa09 f303 	lsl.w	r3, r9, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	9304      	str	r3, [sp, #16]
 8002142:	46a2      	mov	sl, r4
 8002144:	e7d2      	b.n	80020ec <_svfiprintf_r+0x9c>
 8002146:	9b03      	ldr	r3, [sp, #12]
 8002148:	1d19      	adds	r1, r3, #4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	9103      	str	r1, [sp, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	bfbb      	ittet	lt
 8002152:	425b      	neglt	r3, r3
 8002154:	f042 0202 	orrlt.w	r2, r2, #2
 8002158:	9307      	strge	r3, [sp, #28]
 800215a:	9307      	strlt	r3, [sp, #28]
 800215c:	bfb8      	it	lt
 800215e:	9204      	strlt	r2, [sp, #16]
 8002160:	7823      	ldrb	r3, [r4, #0]
 8002162:	2b2e      	cmp	r3, #46	; 0x2e
 8002164:	d10c      	bne.n	8002180 <_svfiprintf_r+0x130>
 8002166:	7863      	ldrb	r3, [r4, #1]
 8002168:	2b2a      	cmp	r3, #42	; 0x2a
 800216a:	d135      	bne.n	80021d8 <_svfiprintf_r+0x188>
 800216c:	9b03      	ldr	r3, [sp, #12]
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	9203      	str	r2, [sp, #12]
 8002174:	2b00      	cmp	r3, #0
 8002176:	bfb8      	it	lt
 8002178:	f04f 33ff 	movlt.w	r3, #4294967295
 800217c:	3402      	adds	r4, #2
 800217e:	9305      	str	r3, [sp, #20]
 8002180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800224c <_svfiprintf_r+0x1fc>
 8002184:	7821      	ldrb	r1, [r4, #0]
 8002186:	2203      	movs	r2, #3
 8002188:	4650      	mov	r0, sl
 800218a:	f7fe f829 	bl	80001e0 <memchr>
 800218e:	b140      	cbz	r0, 80021a2 <_svfiprintf_r+0x152>
 8002190:	2340      	movs	r3, #64	; 0x40
 8002192:	eba0 000a 	sub.w	r0, r0, sl
 8002196:	fa03 f000 	lsl.w	r0, r3, r0
 800219a:	9b04      	ldr	r3, [sp, #16]
 800219c:	4303      	orrs	r3, r0
 800219e:	3401      	adds	r4, #1
 80021a0:	9304      	str	r3, [sp, #16]
 80021a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021a6:	4826      	ldr	r0, [pc, #152]	; (8002240 <_svfiprintf_r+0x1f0>)
 80021a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80021ac:	2206      	movs	r2, #6
 80021ae:	f7fe f817 	bl	80001e0 <memchr>
 80021b2:	2800      	cmp	r0, #0
 80021b4:	d038      	beq.n	8002228 <_svfiprintf_r+0x1d8>
 80021b6:	4b23      	ldr	r3, [pc, #140]	; (8002244 <_svfiprintf_r+0x1f4>)
 80021b8:	bb1b      	cbnz	r3, 8002202 <_svfiprintf_r+0x1b2>
 80021ba:	9b03      	ldr	r3, [sp, #12]
 80021bc:	3307      	adds	r3, #7
 80021be:	f023 0307 	bic.w	r3, r3, #7
 80021c2:	3308      	adds	r3, #8
 80021c4:	9303      	str	r3, [sp, #12]
 80021c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021c8:	4433      	add	r3, r6
 80021ca:	9309      	str	r3, [sp, #36]	; 0x24
 80021cc:	e767      	b.n	800209e <_svfiprintf_r+0x4e>
 80021ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80021d2:	460c      	mov	r4, r1
 80021d4:	2001      	movs	r0, #1
 80021d6:	e7a5      	b.n	8002124 <_svfiprintf_r+0xd4>
 80021d8:	2300      	movs	r3, #0
 80021da:	3401      	adds	r4, #1
 80021dc:	9305      	str	r3, [sp, #20]
 80021de:	4619      	mov	r1, r3
 80021e0:	f04f 0c0a 	mov.w	ip, #10
 80021e4:	4620      	mov	r0, r4
 80021e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80021ea:	3a30      	subs	r2, #48	; 0x30
 80021ec:	2a09      	cmp	r2, #9
 80021ee:	d903      	bls.n	80021f8 <_svfiprintf_r+0x1a8>
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0c5      	beq.n	8002180 <_svfiprintf_r+0x130>
 80021f4:	9105      	str	r1, [sp, #20]
 80021f6:	e7c3      	b.n	8002180 <_svfiprintf_r+0x130>
 80021f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80021fc:	4604      	mov	r4, r0
 80021fe:	2301      	movs	r3, #1
 8002200:	e7f0      	b.n	80021e4 <_svfiprintf_r+0x194>
 8002202:	ab03      	add	r3, sp, #12
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	462a      	mov	r2, r5
 8002208:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <_svfiprintf_r+0x1f8>)
 800220a:	a904      	add	r1, sp, #16
 800220c:	4638      	mov	r0, r7
 800220e:	f3af 8000 	nop.w
 8002212:	1c42      	adds	r2, r0, #1
 8002214:	4606      	mov	r6, r0
 8002216:	d1d6      	bne.n	80021c6 <_svfiprintf_r+0x176>
 8002218:	89ab      	ldrh	r3, [r5, #12]
 800221a:	065b      	lsls	r3, r3, #25
 800221c:	f53f af2c 	bmi.w	8002078 <_svfiprintf_r+0x28>
 8002220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002222:	b01d      	add	sp, #116	; 0x74
 8002224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002228:	ab03      	add	r3, sp, #12
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	462a      	mov	r2, r5
 800222e:	4b06      	ldr	r3, [pc, #24]	; (8002248 <_svfiprintf_r+0x1f8>)
 8002230:	a904      	add	r1, sp, #16
 8002232:	4638      	mov	r0, r7
 8002234:	f000 f87a 	bl	800232c <_printf_i>
 8002238:	e7eb      	b.n	8002212 <_svfiprintf_r+0x1c2>
 800223a:	bf00      	nop
 800223c:	08002871 	.word	0x08002871
 8002240:	0800287b 	.word	0x0800287b
 8002244:	00000000 	.word	0x00000000
 8002248:	08001f99 	.word	0x08001f99
 800224c:	08002877 	.word	0x08002877

08002250 <_printf_common>:
 8002250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002254:	4616      	mov	r6, r2
 8002256:	4699      	mov	r9, r3
 8002258:	688a      	ldr	r2, [r1, #8]
 800225a:	690b      	ldr	r3, [r1, #16]
 800225c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002260:	4293      	cmp	r3, r2
 8002262:	bfb8      	it	lt
 8002264:	4613      	movlt	r3, r2
 8002266:	6033      	str	r3, [r6, #0]
 8002268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800226c:	4607      	mov	r7, r0
 800226e:	460c      	mov	r4, r1
 8002270:	b10a      	cbz	r2, 8002276 <_printf_common+0x26>
 8002272:	3301      	adds	r3, #1
 8002274:	6033      	str	r3, [r6, #0]
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	0699      	lsls	r1, r3, #26
 800227a:	bf42      	ittt	mi
 800227c:	6833      	ldrmi	r3, [r6, #0]
 800227e:	3302      	addmi	r3, #2
 8002280:	6033      	strmi	r3, [r6, #0]
 8002282:	6825      	ldr	r5, [r4, #0]
 8002284:	f015 0506 	ands.w	r5, r5, #6
 8002288:	d106      	bne.n	8002298 <_printf_common+0x48>
 800228a:	f104 0a19 	add.w	sl, r4, #25
 800228e:	68e3      	ldr	r3, [r4, #12]
 8002290:	6832      	ldr	r2, [r6, #0]
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	42ab      	cmp	r3, r5
 8002296:	dc26      	bgt.n	80022e6 <_printf_common+0x96>
 8002298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800229c:	1e13      	subs	r3, r2, #0
 800229e:	6822      	ldr	r2, [r4, #0]
 80022a0:	bf18      	it	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	0692      	lsls	r2, r2, #26
 80022a6:	d42b      	bmi.n	8002300 <_printf_common+0xb0>
 80022a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80022ac:	4649      	mov	r1, r9
 80022ae:	4638      	mov	r0, r7
 80022b0:	47c0      	blx	r8
 80022b2:	3001      	adds	r0, #1
 80022b4:	d01e      	beq.n	80022f4 <_printf_common+0xa4>
 80022b6:	6823      	ldr	r3, [r4, #0]
 80022b8:	68e5      	ldr	r5, [r4, #12]
 80022ba:	6832      	ldr	r2, [r6, #0]
 80022bc:	f003 0306 	and.w	r3, r3, #6
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	bf08      	it	eq
 80022c4:	1aad      	subeq	r5, r5, r2
 80022c6:	68a3      	ldr	r3, [r4, #8]
 80022c8:	6922      	ldr	r2, [r4, #16]
 80022ca:	bf0c      	ite	eq
 80022cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022d0:	2500      	movne	r5, #0
 80022d2:	4293      	cmp	r3, r2
 80022d4:	bfc4      	itt	gt
 80022d6:	1a9b      	subgt	r3, r3, r2
 80022d8:	18ed      	addgt	r5, r5, r3
 80022da:	2600      	movs	r6, #0
 80022dc:	341a      	adds	r4, #26
 80022de:	42b5      	cmp	r5, r6
 80022e0:	d11a      	bne.n	8002318 <_printf_common+0xc8>
 80022e2:	2000      	movs	r0, #0
 80022e4:	e008      	b.n	80022f8 <_printf_common+0xa8>
 80022e6:	2301      	movs	r3, #1
 80022e8:	4652      	mov	r2, sl
 80022ea:	4649      	mov	r1, r9
 80022ec:	4638      	mov	r0, r7
 80022ee:	47c0      	blx	r8
 80022f0:	3001      	adds	r0, #1
 80022f2:	d103      	bne.n	80022fc <_printf_common+0xac>
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022fc:	3501      	adds	r5, #1
 80022fe:	e7c6      	b.n	800228e <_printf_common+0x3e>
 8002300:	18e1      	adds	r1, r4, r3
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	2030      	movs	r0, #48	; 0x30
 8002306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800230a:	4422      	add	r2, r4
 800230c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002314:	3302      	adds	r3, #2
 8002316:	e7c7      	b.n	80022a8 <_printf_common+0x58>
 8002318:	2301      	movs	r3, #1
 800231a:	4622      	mov	r2, r4
 800231c:	4649      	mov	r1, r9
 800231e:	4638      	mov	r0, r7
 8002320:	47c0      	blx	r8
 8002322:	3001      	adds	r0, #1
 8002324:	d0e6      	beq.n	80022f4 <_printf_common+0xa4>
 8002326:	3601      	adds	r6, #1
 8002328:	e7d9      	b.n	80022de <_printf_common+0x8e>
	...

0800232c <_printf_i>:
 800232c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002330:	460c      	mov	r4, r1
 8002332:	4691      	mov	r9, r2
 8002334:	7e27      	ldrb	r7, [r4, #24]
 8002336:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002338:	2f78      	cmp	r7, #120	; 0x78
 800233a:	4680      	mov	r8, r0
 800233c:	469a      	mov	sl, r3
 800233e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002342:	d807      	bhi.n	8002354 <_printf_i+0x28>
 8002344:	2f62      	cmp	r7, #98	; 0x62
 8002346:	d80a      	bhi.n	800235e <_printf_i+0x32>
 8002348:	2f00      	cmp	r7, #0
 800234a:	f000 80d8 	beq.w	80024fe <_printf_i+0x1d2>
 800234e:	2f58      	cmp	r7, #88	; 0x58
 8002350:	f000 80a3 	beq.w	800249a <_printf_i+0x16e>
 8002354:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800235c:	e03a      	b.n	80023d4 <_printf_i+0xa8>
 800235e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002362:	2b15      	cmp	r3, #21
 8002364:	d8f6      	bhi.n	8002354 <_printf_i+0x28>
 8002366:	a001      	add	r0, pc, #4	; (adr r0, 800236c <_printf_i+0x40>)
 8002368:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800236c:	080023c5 	.word	0x080023c5
 8002370:	080023d9 	.word	0x080023d9
 8002374:	08002355 	.word	0x08002355
 8002378:	08002355 	.word	0x08002355
 800237c:	08002355 	.word	0x08002355
 8002380:	08002355 	.word	0x08002355
 8002384:	080023d9 	.word	0x080023d9
 8002388:	08002355 	.word	0x08002355
 800238c:	08002355 	.word	0x08002355
 8002390:	08002355 	.word	0x08002355
 8002394:	08002355 	.word	0x08002355
 8002398:	080024e5 	.word	0x080024e5
 800239c:	08002409 	.word	0x08002409
 80023a0:	080024c7 	.word	0x080024c7
 80023a4:	08002355 	.word	0x08002355
 80023a8:	08002355 	.word	0x08002355
 80023ac:	08002507 	.word	0x08002507
 80023b0:	08002355 	.word	0x08002355
 80023b4:	08002409 	.word	0x08002409
 80023b8:	08002355 	.word	0x08002355
 80023bc:	08002355 	.word	0x08002355
 80023c0:	080024cf 	.word	0x080024cf
 80023c4:	680b      	ldr	r3, [r1, #0]
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	600a      	str	r2, [r1, #0]
 80023cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80023d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0a3      	b.n	8002520 <_printf_i+0x1f4>
 80023d8:	6825      	ldr	r5, [r4, #0]
 80023da:	6808      	ldr	r0, [r1, #0]
 80023dc:	062e      	lsls	r6, r5, #24
 80023de:	f100 0304 	add.w	r3, r0, #4
 80023e2:	d50a      	bpl.n	80023fa <_printf_i+0xce>
 80023e4:	6805      	ldr	r5, [r0, #0]
 80023e6:	600b      	str	r3, [r1, #0]
 80023e8:	2d00      	cmp	r5, #0
 80023ea:	da03      	bge.n	80023f4 <_printf_i+0xc8>
 80023ec:	232d      	movs	r3, #45	; 0x2d
 80023ee:	426d      	negs	r5, r5
 80023f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023f4:	485e      	ldr	r0, [pc, #376]	; (8002570 <_printf_i+0x244>)
 80023f6:	230a      	movs	r3, #10
 80023f8:	e019      	b.n	800242e <_printf_i+0x102>
 80023fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80023fe:	6805      	ldr	r5, [r0, #0]
 8002400:	600b      	str	r3, [r1, #0]
 8002402:	bf18      	it	ne
 8002404:	b22d      	sxthne	r5, r5
 8002406:	e7ef      	b.n	80023e8 <_printf_i+0xbc>
 8002408:	680b      	ldr	r3, [r1, #0]
 800240a:	6825      	ldr	r5, [r4, #0]
 800240c:	1d18      	adds	r0, r3, #4
 800240e:	6008      	str	r0, [r1, #0]
 8002410:	0628      	lsls	r0, r5, #24
 8002412:	d501      	bpl.n	8002418 <_printf_i+0xec>
 8002414:	681d      	ldr	r5, [r3, #0]
 8002416:	e002      	b.n	800241e <_printf_i+0xf2>
 8002418:	0669      	lsls	r1, r5, #25
 800241a:	d5fb      	bpl.n	8002414 <_printf_i+0xe8>
 800241c:	881d      	ldrh	r5, [r3, #0]
 800241e:	4854      	ldr	r0, [pc, #336]	; (8002570 <_printf_i+0x244>)
 8002420:	2f6f      	cmp	r7, #111	; 0x6f
 8002422:	bf0c      	ite	eq
 8002424:	2308      	moveq	r3, #8
 8002426:	230a      	movne	r3, #10
 8002428:	2100      	movs	r1, #0
 800242a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800242e:	6866      	ldr	r6, [r4, #4]
 8002430:	60a6      	str	r6, [r4, #8]
 8002432:	2e00      	cmp	r6, #0
 8002434:	bfa2      	ittt	ge
 8002436:	6821      	ldrge	r1, [r4, #0]
 8002438:	f021 0104 	bicge.w	r1, r1, #4
 800243c:	6021      	strge	r1, [r4, #0]
 800243e:	b90d      	cbnz	r5, 8002444 <_printf_i+0x118>
 8002440:	2e00      	cmp	r6, #0
 8002442:	d04d      	beq.n	80024e0 <_printf_i+0x1b4>
 8002444:	4616      	mov	r6, r2
 8002446:	fbb5 f1f3 	udiv	r1, r5, r3
 800244a:	fb03 5711 	mls	r7, r3, r1, r5
 800244e:	5dc7      	ldrb	r7, [r0, r7]
 8002450:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002454:	462f      	mov	r7, r5
 8002456:	42bb      	cmp	r3, r7
 8002458:	460d      	mov	r5, r1
 800245a:	d9f4      	bls.n	8002446 <_printf_i+0x11a>
 800245c:	2b08      	cmp	r3, #8
 800245e:	d10b      	bne.n	8002478 <_printf_i+0x14c>
 8002460:	6823      	ldr	r3, [r4, #0]
 8002462:	07df      	lsls	r7, r3, #31
 8002464:	d508      	bpl.n	8002478 <_printf_i+0x14c>
 8002466:	6923      	ldr	r3, [r4, #16]
 8002468:	6861      	ldr	r1, [r4, #4]
 800246a:	4299      	cmp	r1, r3
 800246c:	bfde      	ittt	le
 800246e:	2330      	movle	r3, #48	; 0x30
 8002470:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002474:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002478:	1b92      	subs	r2, r2, r6
 800247a:	6122      	str	r2, [r4, #16]
 800247c:	f8cd a000 	str.w	sl, [sp]
 8002480:	464b      	mov	r3, r9
 8002482:	aa03      	add	r2, sp, #12
 8002484:	4621      	mov	r1, r4
 8002486:	4640      	mov	r0, r8
 8002488:	f7ff fee2 	bl	8002250 <_printf_common>
 800248c:	3001      	adds	r0, #1
 800248e:	d14c      	bne.n	800252a <_printf_i+0x1fe>
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	b004      	add	sp, #16
 8002496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800249a:	4835      	ldr	r0, [pc, #212]	; (8002570 <_printf_i+0x244>)
 800249c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80024a0:	6823      	ldr	r3, [r4, #0]
 80024a2:	680e      	ldr	r6, [r1, #0]
 80024a4:	061f      	lsls	r7, r3, #24
 80024a6:	f856 5b04 	ldr.w	r5, [r6], #4
 80024aa:	600e      	str	r6, [r1, #0]
 80024ac:	d514      	bpl.n	80024d8 <_printf_i+0x1ac>
 80024ae:	07d9      	lsls	r1, r3, #31
 80024b0:	bf44      	itt	mi
 80024b2:	f043 0320 	orrmi.w	r3, r3, #32
 80024b6:	6023      	strmi	r3, [r4, #0]
 80024b8:	b91d      	cbnz	r5, 80024c2 <_printf_i+0x196>
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	f023 0320 	bic.w	r3, r3, #32
 80024c0:	6023      	str	r3, [r4, #0]
 80024c2:	2310      	movs	r3, #16
 80024c4:	e7b0      	b.n	8002428 <_printf_i+0xfc>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	f043 0320 	orr.w	r3, r3, #32
 80024cc:	6023      	str	r3, [r4, #0]
 80024ce:	2378      	movs	r3, #120	; 0x78
 80024d0:	4828      	ldr	r0, [pc, #160]	; (8002574 <_printf_i+0x248>)
 80024d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024d6:	e7e3      	b.n	80024a0 <_printf_i+0x174>
 80024d8:	065e      	lsls	r6, r3, #25
 80024da:	bf48      	it	mi
 80024dc:	b2ad      	uxthmi	r5, r5
 80024de:	e7e6      	b.n	80024ae <_printf_i+0x182>
 80024e0:	4616      	mov	r6, r2
 80024e2:	e7bb      	b.n	800245c <_printf_i+0x130>
 80024e4:	680b      	ldr	r3, [r1, #0]
 80024e6:	6826      	ldr	r6, [r4, #0]
 80024e8:	6960      	ldr	r0, [r4, #20]
 80024ea:	1d1d      	adds	r5, r3, #4
 80024ec:	600d      	str	r5, [r1, #0]
 80024ee:	0635      	lsls	r5, r6, #24
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	d501      	bpl.n	80024f8 <_printf_i+0x1cc>
 80024f4:	6018      	str	r0, [r3, #0]
 80024f6:	e002      	b.n	80024fe <_printf_i+0x1d2>
 80024f8:	0671      	lsls	r1, r6, #25
 80024fa:	d5fb      	bpl.n	80024f4 <_printf_i+0x1c8>
 80024fc:	8018      	strh	r0, [r3, #0]
 80024fe:	2300      	movs	r3, #0
 8002500:	6123      	str	r3, [r4, #16]
 8002502:	4616      	mov	r6, r2
 8002504:	e7ba      	b.n	800247c <_printf_i+0x150>
 8002506:	680b      	ldr	r3, [r1, #0]
 8002508:	1d1a      	adds	r2, r3, #4
 800250a:	600a      	str	r2, [r1, #0]
 800250c:	681e      	ldr	r6, [r3, #0]
 800250e:	6862      	ldr	r2, [r4, #4]
 8002510:	2100      	movs	r1, #0
 8002512:	4630      	mov	r0, r6
 8002514:	f7fd fe64 	bl	80001e0 <memchr>
 8002518:	b108      	cbz	r0, 800251e <_printf_i+0x1f2>
 800251a:	1b80      	subs	r0, r0, r6
 800251c:	6060      	str	r0, [r4, #4]
 800251e:	6863      	ldr	r3, [r4, #4]
 8002520:	6123      	str	r3, [r4, #16]
 8002522:	2300      	movs	r3, #0
 8002524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002528:	e7a8      	b.n	800247c <_printf_i+0x150>
 800252a:	6923      	ldr	r3, [r4, #16]
 800252c:	4632      	mov	r2, r6
 800252e:	4649      	mov	r1, r9
 8002530:	4640      	mov	r0, r8
 8002532:	47d0      	blx	sl
 8002534:	3001      	adds	r0, #1
 8002536:	d0ab      	beq.n	8002490 <_printf_i+0x164>
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	079b      	lsls	r3, r3, #30
 800253c:	d413      	bmi.n	8002566 <_printf_i+0x23a>
 800253e:	68e0      	ldr	r0, [r4, #12]
 8002540:	9b03      	ldr	r3, [sp, #12]
 8002542:	4298      	cmp	r0, r3
 8002544:	bfb8      	it	lt
 8002546:	4618      	movlt	r0, r3
 8002548:	e7a4      	b.n	8002494 <_printf_i+0x168>
 800254a:	2301      	movs	r3, #1
 800254c:	4632      	mov	r2, r6
 800254e:	4649      	mov	r1, r9
 8002550:	4640      	mov	r0, r8
 8002552:	47d0      	blx	sl
 8002554:	3001      	adds	r0, #1
 8002556:	d09b      	beq.n	8002490 <_printf_i+0x164>
 8002558:	3501      	adds	r5, #1
 800255a:	68e3      	ldr	r3, [r4, #12]
 800255c:	9903      	ldr	r1, [sp, #12]
 800255e:	1a5b      	subs	r3, r3, r1
 8002560:	42ab      	cmp	r3, r5
 8002562:	dcf2      	bgt.n	800254a <_printf_i+0x21e>
 8002564:	e7eb      	b.n	800253e <_printf_i+0x212>
 8002566:	2500      	movs	r5, #0
 8002568:	f104 0619 	add.w	r6, r4, #25
 800256c:	e7f5      	b.n	800255a <_printf_i+0x22e>
 800256e:	bf00      	nop
 8002570:	08002882 	.word	0x08002882
 8002574:	08002893 	.word	0x08002893

08002578 <memcpy>:
 8002578:	440a      	add	r2, r1
 800257a:	4291      	cmp	r1, r2
 800257c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002580:	d100      	bne.n	8002584 <memcpy+0xc>
 8002582:	4770      	bx	lr
 8002584:	b510      	push	{r4, lr}
 8002586:	f811 4b01 	ldrb.w	r4, [r1], #1
 800258a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800258e:	4291      	cmp	r1, r2
 8002590:	d1f9      	bne.n	8002586 <memcpy+0xe>
 8002592:	bd10      	pop	{r4, pc}

08002594 <memmove>:
 8002594:	4288      	cmp	r0, r1
 8002596:	b510      	push	{r4, lr}
 8002598:	eb01 0402 	add.w	r4, r1, r2
 800259c:	d902      	bls.n	80025a4 <memmove+0x10>
 800259e:	4284      	cmp	r4, r0
 80025a0:	4623      	mov	r3, r4
 80025a2:	d807      	bhi.n	80025b4 <memmove+0x20>
 80025a4:	1e43      	subs	r3, r0, #1
 80025a6:	42a1      	cmp	r1, r4
 80025a8:	d008      	beq.n	80025bc <memmove+0x28>
 80025aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80025ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80025b2:	e7f8      	b.n	80025a6 <memmove+0x12>
 80025b4:	4402      	add	r2, r0
 80025b6:	4601      	mov	r1, r0
 80025b8:	428a      	cmp	r2, r1
 80025ba:	d100      	bne.n	80025be <memmove+0x2a>
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80025c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80025c6:	e7f7      	b.n	80025b8 <memmove+0x24>

080025c8 <_free_r>:
 80025c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025ca:	2900      	cmp	r1, #0
 80025cc:	d048      	beq.n	8002660 <_free_r+0x98>
 80025ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025d2:	9001      	str	r0, [sp, #4]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f1a1 0404 	sub.w	r4, r1, #4
 80025da:	bfb8      	it	lt
 80025dc:	18e4      	addlt	r4, r4, r3
 80025de:	f000 f8d3 	bl	8002788 <__malloc_lock>
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <_free_r+0x9c>)
 80025e4:	9801      	ldr	r0, [sp, #4]
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	4615      	mov	r5, r2
 80025ea:	b933      	cbnz	r3, 80025fa <_free_r+0x32>
 80025ec:	6063      	str	r3, [r4, #4]
 80025ee:	6014      	str	r4, [r2, #0]
 80025f0:	b003      	add	sp, #12
 80025f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025f6:	f000 b8cd 	b.w	8002794 <__malloc_unlock>
 80025fa:	42a3      	cmp	r3, r4
 80025fc:	d90b      	bls.n	8002616 <_free_r+0x4e>
 80025fe:	6821      	ldr	r1, [r4, #0]
 8002600:	1862      	adds	r2, r4, r1
 8002602:	4293      	cmp	r3, r2
 8002604:	bf04      	itt	eq
 8002606:	681a      	ldreq	r2, [r3, #0]
 8002608:	685b      	ldreq	r3, [r3, #4]
 800260a:	6063      	str	r3, [r4, #4]
 800260c:	bf04      	itt	eq
 800260e:	1852      	addeq	r2, r2, r1
 8002610:	6022      	streq	r2, [r4, #0]
 8002612:	602c      	str	r4, [r5, #0]
 8002614:	e7ec      	b.n	80025f0 <_free_r+0x28>
 8002616:	461a      	mov	r2, r3
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	b10b      	cbz	r3, 8002620 <_free_r+0x58>
 800261c:	42a3      	cmp	r3, r4
 800261e:	d9fa      	bls.n	8002616 <_free_r+0x4e>
 8002620:	6811      	ldr	r1, [r2, #0]
 8002622:	1855      	adds	r5, r2, r1
 8002624:	42a5      	cmp	r5, r4
 8002626:	d10b      	bne.n	8002640 <_free_r+0x78>
 8002628:	6824      	ldr	r4, [r4, #0]
 800262a:	4421      	add	r1, r4
 800262c:	1854      	adds	r4, r2, r1
 800262e:	42a3      	cmp	r3, r4
 8002630:	6011      	str	r1, [r2, #0]
 8002632:	d1dd      	bne.n	80025f0 <_free_r+0x28>
 8002634:	681c      	ldr	r4, [r3, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	6053      	str	r3, [r2, #4]
 800263a:	4421      	add	r1, r4
 800263c:	6011      	str	r1, [r2, #0]
 800263e:	e7d7      	b.n	80025f0 <_free_r+0x28>
 8002640:	d902      	bls.n	8002648 <_free_r+0x80>
 8002642:	230c      	movs	r3, #12
 8002644:	6003      	str	r3, [r0, #0]
 8002646:	e7d3      	b.n	80025f0 <_free_r+0x28>
 8002648:	6825      	ldr	r5, [r4, #0]
 800264a:	1961      	adds	r1, r4, r5
 800264c:	428b      	cmp	r3, r1
 800264e:	bf04      	itt	eq
 8002650:	6819      	ldreq	r1, [r3, #0]
 8002652:	685b      	ldreq	r3, [r3, #4]
 8002654:	6063      	str	r3, [r4, #4]
 8002656:	bf04      	itt	eq
 8002658:	1949      	addeq	r1, r1, r5
 800265a:	6021      	streq	r1, [r4, #0]
 800265c:	6054      	str	r4, [r2, #4]
 800265e:	e7c7      	b.n	80025f0 <_free_r+0x28>
 8002660:	b003      	add	sp, #12
 8002662:	bd30      	pop	{r4, r5, pc}
 8002664:	200001a8 	.word	0x200001a8

08002668 <_malloc_r>:
 8002668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800266a:	1ccd      	adds	r5, r1, #3
 800266c:	f025 0503 	bic.w	r5, r5, #3
 8002670:	3508      	adds	r5, #8
 8002672:	2d0c      	cmp	r5, #12
 8002674:	bf38      	it	cc
 8002676:	250c      	movcc	r5, #12
 8002678:	2d00      	cmp	r5, #0
 800267a:	4606      	mov	r6, r0
 800267c:	db01      	blt.n	8002682 <_malloc_r+0x1a>
 800267e:	42a9      	cmp	r1, r5
 8002680:	d903      	bls.n	800268a <_malloc_r+0x22>
 8002682:	230c      	movs	r3, #12
 8002684:	6033      	str	r3, [r6, #0]
 8002686:	2000      	movs	r0, #0
 8002688:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800268a:	f000 f87d 	bl	8002788 <__malloc_lock>
 800268e:	4921      	ldr	r1, [pc, #132]	; (8002714 <_malloc_r+0xac>)
 8002690:	680a      	ldr	r2, [r1, #0]
 8002692:	4614      	mov	r4, r2
 8002694:	b99c      	cbnz	r4, 80026be <_malloc_r+0x56>
 8002696:	4f20      	ldr	r7, [pc, #128]	; (8002718 <_malloc_r+0xb0>)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	b923      	cbnz	r3, 80026a6 <_malloc_r+0x3e>
 800269c:	4621      	mov	r1, r4
 800269e:	4630      	mov	r0, r6
 80026a0:	f000 f862 	bl	8002768 <_sbrk_r>
 80026a4:	6038      	str	r0, [r7, #0]
 80026a6:	4629      	mov	r1, r5
 80026a8:	4630      	mov	r0, r6
 80026aa:	f000 f85d 	bl	8002768 <_sbrk_r>
 80026ae:	1c43      	adds	r3, r0, #1
 80026b0:	d123      	bne.n	80026fa <_malloc_r+0x92>
 80026b2:	230c      	movs	r3, #12
 80026b4:	6033      	str	r3, [r6, #0]
 80026b6:	4630      	mov	r0, r6
 80026b8:	f000 f86c 	bl	8002794 <__malloc_unlock>
 80026bc:	e7e3      	b.n	8002686 <_malloc_r+0x1e>
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	1b5b      	subs	r3, r3, r5
 80026c2:	d417      	bmi.n	80026f4 <_malloc_r+0x8c>
 80026c4:	2b0b      	cmp	r3, #11
 80026c6:	d903      	bls.n	80026d0 <_malloc_r+0x68>
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	441c      	add	r4, r3
 80026cc:	6025      	str	r5, [r4, #0]
 80026ce:	e004      	b.n	80026da <_malloc_r+0x72>
 80026d0:	6863      	ldr	r3, [r4, #4]
 80026d2:	42a2      	cmp	r2, r4
 80026d4:	bf0c      	ite	eq
 80026d6:	600b      	streq	r3, [r1, #0]
 80026d8:	6053      	strne	r3, [r2, #4]
 80026da:	4630      	mov	r0, r6
 80026dc:	f000 f85a 	bl	8002794 <__malloc_unlock>
 80026e0:	f104 000b 	add.w	r0, r4, #11
 80026e4:	1d23      	adds	r3, r4, #4
 80026e6:	f020 0007 	bic.w	r0, r0, #7
 80026ea:	1ac2      	subs	r2, r0, r3
 80026ec:	d0cc      	beq.n	8002688 <_malloc_r+0x20>
 80026ee:	1a1b      	subs	r3, r3, r0
 80026f0:	50a3      	str	r3, [r4, r2]
 80026f2:	e7c9      	b.n	8002688 <_malloc_r+0x20>
 80026f4:	4622      	mov	r2, r4
 80026f6:	6864      	ldr	r4, [r4, #4]
 80026f8:	e7cc      	b.n	8002694 <_malloc_r+0x2c>
 80026fa:	1cc4      	adds	r4, r0, #3
 80026fc:	f024 0403 	bic.w	r4, r4, #3
 8002700:	42a0      	cmp	r0, r4
 8002702:	d0e3      	beq.n	80026cc <_malloc_r+0x64>
 8002704:	1a21      	subs	r1, r4, r0
 8002706:	4630      	mov	r0, r6
 8002708:	f000 f82e 	bl	8002768 <_sbrk_r>
 800270c:	3001      	adds	r0, #1
 800270e:	d1dd      	bne.n	80026cc <_malloc_r+0x64>
 8002710:	e7cf      	b.n	80026b2 <_malloc_r+0x4a>
 8002712:	bf00      	nop
 8002714:	200001a8 	.word	0x200001a8
 8002718:	200001ac 	.word	0x200001ac

0800271c <_realloc_r>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	4607      	mov	r7, r0
 8002720:	4614      	mov	r4, r2
 8002722:	460e      	mov	r6, r1
 8002724:	b921      	cbnz	r1, 8002730 <_realloc_r+0x14>
 8002726:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800272a:	4611      	mov	r1, r2
 800272c:	f7ff bf9c 	b.w	8002668 <_malloc_r>
 8002730:	b922      	cbnz	r2, 800273c <_realloc_r+0x20>
 8002732:	f7ff ff49 	bl	80025c8 <_free_r>
 8002736:	4625      	mov	r5, r4
 8002738:	4628      	mov	r0, r5
 800273a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800273c:	f000 f830 	bl	80027a0 <_malloc_usable_size_r>
 8002740:	42a0      	cmp	r0, r4
 8002742:	d20f      	bcs.n	8002764 <_realloc_r+0x48>
 8002744:	4621      	mov	r1, r4
 8002746:	4638      	mov	r0, r7
 8002748:	f7ff ff8e 	bl	8002668 <_malloc_r>
 800274c:	4605      	mov	r5, r0
 800274e:	2800      	cmp	r0, #0
 8002750:	d0f2      	beq.n	8002738 <_realloc_r+0x1c>
 8002752:	4631      	mov	r1, r6
 8002754:	4622      	mov	r2, r4
 8002756:	f7ff ff0f 	bl	8002578 <memcpy>
 800275a:	4631      	mov	r1, r6
 800275c:	4638      	mov	r0, r7
 800275e:	f7ff ff33 	bl	80025c8 <_free_r>
 8002762:	e7e9      	b.n	8002738 <_realloc_r+0x1c>
 8002764:	4635      	mov	r5, r6
 8002766:	e7e7      	b.n	8002738 <_realloc_r+0x1c>

08002768 <_sbrk_r>:
 8002768:	b538      	push	{r3, r4, r5, lr}
 800276a:	4d06      	ldr	r5, [pc, #24]	; (8002784 <_sbrk_r+0x1c>)
 800276c:	2300      	movs	r3, #0
 800276e:	4604      	mov	r4, r0
 8002770:	4608      	mov	r0, r1
 8002772:	602b      	str	r3, [r5, #0]
 8002774:	f000 f81e 	bl	80027b4 <_sbrk>
 8002778:	1c43      	adds	r3, r0, #1
 800277a:	d102      	bne.n	8002782 <_sbrk_r+0x1a>
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	b103      	cbz	r3, 8002782 <_sbrk_r+0x1a>
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	bd38      	pop	{r3, r4, r5, pc}
 8002784:	200002ec 	.word	0x200002ec

08002788 <__malloc_lock>:
 8002788:	4801      	ldr	r0, [pc, #4]	; (8002790 <__malloc_lock+0x8>)
 800278a:	f000 b811 	b.w	80027b0 <__retarget_lock_acquire_recursive>
 800278e:	bf00      	nop
 8002790:	200002f4 	.word	0x200002f4

08002794 <__malloc_unlock>:
 8002794:	4801      	ldr	r0, [pc, #4]	; (800279c <__malloc_unlock+0x8>)
 8002796:	f000 b80c 	b.w	80027b2 <__retarget_lock_release_recursive>
 800279a:	bf00      	nop
 800279c:	200002f4 	.word	0x200002f4

080027a0 <_malloc_usable_size_r>:
 80027a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80027a4:	1f18      	subs	r0, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	bfbc      	itt	lt
 80027aa:	580b      	ldrlt	r3, [r1, r0]
 80027ac:	18c0      	addlt	r0, r0, r3
 80027ae:	4770      	bx	lr

080027b0 <__retarget_lock_acquire_recursive>:
 80027b0:	4770      	bx	lr

080027b2 <__retarget_lock_release_recursive>:
 80027b2:	4770      	bx	lr

080027b4 <_sbrk>:
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <_sbrk+0x14>)
 80027b6:	6819      	ldr	r1, [r3, #0]
 80027b8:	4602      	mov	r2, r0
 80027ba:	b909      	cbnz	r1, 80027c0 <_sbrk+0xc>
 80027bc:	4903      	ldr	r1, [pc, #12]	; (80027cc <_sbrk+0x18>)
 80027be:	6019      	str	r1, [r3, #0]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	4402      	add	r2, r0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	4770      	bx	lr
 80027c8:	200001b0 	.word	0x200001b0
 80027cc:	200002fc 	.word	0x200002fc

080027d0 <_init>:
 80027d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027d2:	bf00      	nop
 80027d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027d6:	bc08      	pop	{r3}
 80027d8:	469e      	mov	lr, r3
 80027da:	4770      	bx	lr

080027dc <_fini>:
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	bf00      	nop
 80027e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027e2:	bc08      	pop	{r3}
 80027e4:	469e      	mov	lr, r3
 80027e6:	4770      	bx	lr
